/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.appengine.model;

/**
 * Allows autoscaling based on Stackdriver metrics.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the App Engine Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CustomMetric extends com.google.api.client.json.GenericJson {

  /**
   * Allows filtering on the metric's fields.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filter;

  /**
   * The name of the metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metricName;

  /**
   * May be used instead of target_utilization when an instance can handle a specific amount of
   * work/resources and the metric value is equal to the current amount of work remaining. The
   * autoscaler will try to keep the number of instances equal to the metric value divided by
   * single_instance_assignment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double singleInstanceAssignment;

  /**
   * The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE,
   * DELTA_PER_SECOND, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetType;

  /**
   * The target value for the metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double targetUtilization;

  /**
   * Allows filtering on the metric's fields.
   * @return value or {@code null} for none
   */
  public java.lang.String getFilter() {
    return filter;
  }

  /**
   * Allows filtering on the metric's fields.
   * @param filter filter or {@code null} for none
   */
  public CustomMetric setFilter(java.lang.String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * The name of the metric.
   * @return value or {@code null} for none
   */
  public java.lang.String getMetricName() {
    return metricName;
  }

  /**
   * The name of the metric.
   * @param metricName metricName or {@code null} for none
   */
  public CustomMetric setMetricName(java.lang.String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * May be used instead of target_utilization when an instance can handle a specific amount of
   * work/resources and the metric value is equal to the current amount of work remaining. The
   * autoscaler will try to keep the number of instances equal to the metric value divided by
   * single_instance_assignment.
   * @return value or {@code null} for none
   */
  public java.lang.Double getSingleInstanceAssignment() {
    return singleInstanceAssignment;
  }

  /**
   * May be used instead of target_utilization when an instance can handle a specific amount of
   * work/resources and the metric value is equal to the current amount of work remaining. The
   * autoscaler will try to keep the number of instances equal to the metric value divided by
   * single_instance_assignment.
   * @param singleInstanceAssignment singleInstanceAssignment or {@code null} for none
   */
  public CustomMetric setSingleInstanceAssignment(java.lang.Double singleInstanceAssignment) {
    this.singleInstanceAssignment = singleInstanceAssignment;
    return this;
  }

  /**
   * The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE,
   * DELTA_PER_SECOND, etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetType() {
    return targetType;
  }

  /**
   * The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE,
   * DELTA_PER_SECOND, etc.
   * @param targetType targetType or {@code null} for none
   */
  public CustomMetric setTargetType(java.lang.String targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * The target value for the metric.
   * @return value or {@code null} for none
   */
  public java.lang.Double getTargetUtilization() {
    return targetUtilization;
  }

  /**
   * The target value for the metric.
   * @param targetUtilization targetUtilization or {@code null} for none
   */
  public CustomMetric setTargetUtilization(java.lang.Double targetUtilization) {
    this.targetUtilization = targetUtilization;
    return this;
  }

  @Override
  public CustomMetric set(String fieldName, Object value) {
    return (CustomMetric) super.set(fieldName, value);
  }

  @Override
  public CustomMetric clone() {
    return (CustomMetric) super.clone();
  }

}
