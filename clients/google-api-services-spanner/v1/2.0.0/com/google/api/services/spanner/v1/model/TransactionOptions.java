/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * Options to use for transactions.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TransactionOptions extends com.google.api.client.json.GenericJson {

  /**
   * When `exclude_txn_from_change_streams` is set to `true`, it prevents read or write transactions
   * from being tracked in change streams. * If the DDL option `allow_txn_exclusion` is set to
   * `true`, then the updates made within this transaction aren't recorded in the change stream. *
   * If you don't set the DDL option `allow_txn_exclusion` or if it's set to `false`, then the
   * updates made within this transaction are recorded in the change stream. When
   * `exclude_txn_from_change_streams` is set to `false` or not set, modifications from this
   * transaction are recorded in all change streams that are tracking columns modified by these
   * transactions. The `exclude_txn_from_change_streams` option can only be specified for read-write
   * or partitioned DML transactions, otherwise the API returns an `INVALID_ARGUMENT` error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean excludeTxnFromChangeStreams;

  /**
   * Isolation level for the transaction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String isolationLevel;

  /**
   * Partitioned DML transaction. Authorization to begin a Partitioned DML transaction requires
   * `spanner.databases.beginPartitionedDmlTransaction` permission on the `session` resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PartitionedDml partitionedDml;

  /**
   * Transaction does not write. Authorization to begin a read-only transaction requires
   * `spanner.databases.beginReadOnlyTransaction` permission on the `session` resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReadOnly readOnly;

  /**
   * Transaction may write. Authorization to begin a read-write transaction requires
   * `spanner.databases.beginOrRollbackReadWriteTransaction` permission on the `session` resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReadWrite readWrite;

  /**
   * When `exclude_txn_from_change_streams` is set to `true`, it prevents read or write transactions
   * from being tracked in change streams. * If the DDL option `allow_txn_exclusion` is set to
   * `true`, then the updates made within this transaction aren't recorded in the change stream. *
   * If you don't set the DDL option `allow_txn_exclusion` or if it's set to `false`, then the
   * updates made within this transaction are recorded in the change stream. When
   * `exclude_txn_from_change_streams` is set to `false` or not set, modifications from this
   * transaction are recorded in all change streams that are tracking columns modified by these
   * transactions. The `exclude_txn_from_change_streams` option can only be specified for read-write
   * or partitioned DML transactions, otherwise the API returns an `INVALID_ARGUMENT` error.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getExcludeTxnFromChangeStreams() {
    return excludeTxnFromChangeStreams;
  }

  /**
   * When `exclude_txn_from_change_streams` is set to `true`, it prevents read or write transactions
   * from being tracked in change streams. * If the DDL option `allow_txn_exclusion` is set to
   * `true`, then the updates made within this transaction aren't recorded in the change stream. *
   * If you don't set the DDL option `allow_txn_exclusion` or if it's set to `false`, then the
   * updates made within this transaction are recorded in the change stream. When
   * `exclude_txn_from_change_streams` is set to `false` or not set, modifications from this
   * transaction are recorded in all change streams that are tracking columns modified by these
   * transactions. The `exclude_txn_from_change_streams` option can only be specified for read-write
   * or partitioned DML transactions, otherwise the API returns an `INVALID_ARGUMENT` error.
   * @param excludeTxnFromChangeStreams excludeTxnFromChangeStreams or {@code null} for none
   */
  public TransactionOptions setExcludeTxnFromChangeStreams(java.lang.Boolean excludeTxnFromChangeStreams) {
    this.excludeTxnFromChangeStreams = excludeTxnFromChangeStreams;
    return this;
  }

  /**
   * Isolation level for the transaction.
   * @return value or {@code null} for none
   */
  public java.lang.String getIsolationLevel() {
    return isolationLevel;
  }

  /**
   * Isolation level for the transaction.
   * @param isolationLevel isolationLevel or {@code null} for none
   */
  public TransactionOptions setIsolationLevel(java.lang.String isolationLevel) {
    this.isolationLevel = isolationLevel;
    return this;
  }

  /**
   * Partitioned DML transaction. Authorization to begin a Partitioned DML transaction requires
   * `spanner.databases.beginPartitionedDmlTransaction` permission on the `session` resource.
   * @return value or {@code null} for none
   */
  public PartitionedDml getPartitionedDml() {
    return partitionedDml;
  }

  /**
   * Partitioned DML transaction. Authorization to begin a Partitioned DML transaction requires
   * `spanner.databases.beginPartitionedDmlTransaction` permission on the `session` resource.
   * @param partitionedDml partitionedDml or {@code null} for none
   */
  public TransactionOptions setPartitionedDml(PartitionedDml partitionedDml) {
    this.partitionedDml = partitionedDml;
    return this;
  }

  /**
   * Transaction does not write. Authorization to begin a read-only transaction requires
   * `spanner.databases.beginReadOnlyTransaction` permission on the `session` resource.
   * @return value or {@code null} for none
   */
  public ReadOnly getReadOnly() {
    return readOnly;
  }

  /**
   * Transaction does not write. Authorization to begin a read-only transaction requires
   * `spanner.databases.beginReadOnlyTransaction` permission on the `session` resource.
   * @param readOnly readOnly or {@code null} for none
   */
  public TransactionOptions setReadOnly(ReadOnly readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Transaction may write. Authorization to begin a read-write transaction requires
   * `spanner.databases.beginOrRollbackReadWriteTransaction` permission on the `session` resource.
   * @return value or {@code null} for none
   */
  public ReadWrite getReadWrite() {
    return readWrite;
  }

  /**
   * Transaction may write. Authorization to begin a read-write transaction requires
   * `spanner.databases.beginOrRollbackReadWriteTransaction` permission on the `session` resource.
   * @param readWrite readWrite or {@code null} for none
   */
  public TransactionOptions setReadWrite(ReadWrite readWrite) {
    this.readWrite = readWrite;
    return this;
  }

  @Override
  public TransactionOptions set(String fieldName, Object value) {
    return (TransactionOptions) super.set(fieldName, value);
  }

  @Override
  public TransactionOptions clone() {
    return (TransactionOptions) super.clone();
  }

}
