/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The logging-version of DeviceId proto, which identifies a device. This mirrors
 * cs/google3/assistant/api/core_types/device_type.proto?q=symbol:DeviceId Next ID: 6
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantLogsSettingsDeviceIdLog extends com.google.api.client.json.GenericJson {

  /**
   * The client_instance_id on devices with GSA. See 'client_instance_field' in go/androidids.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String agsaClientInstanceId;

  /**
   * A unique device ID for Assistant devices as proposed by go/ocelot-team.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String canonicalDeviceId;

  /**
   * If set, indicates that the device is a cast device, and contains the UUID of the cast device.
   * Corresponds to the device_id field of the CastDevice proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String castDeviceId;

  /**
   * DUSI (go/dusi) is used as the identifier here. This identifier is unique to the user and
   * device. This will help identify which device or application the user's request originated from.
   * This is not to be confused with the client_instance_id that android devices provide. This is
   * currently used by surfaces that use the assistant-legacy-nexus and assistant-legacy-clockwork
   * pipelines. DUSI is created and set in S3. This field is only filled for GAIA requests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientInstanceId;

  /**
   * The unique device ID for HomeGraph devices. This is the HomeGraph ID, created when the device
   * is registered into HomeGraph. It is immutable for the same device unless it is completely
   * deleted and recreated. See go/home-graph for details. }
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String homeGraphDeviceId;

  /**
   * The unique ID for libassistant based devices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String libassistantDeviceId;

  /**
   * The client_instance_id on devices with GSA. See 'client_instance_field' in go/androidids.
   * @return value or {@code null} for none
   */
  public java.lang.String getAgsaClientInstanceId() {
    return agsaClientInstanceId;
  }

  /**
   * The client_instance_id on devices with GSA. See 'client_instance_field' in go/androidids.
   * @param agsaClientInstanceId agsaClientInstanceId or {@code null} for none
   */
  public AssistantLogsSettingsDeviceIdLog setAgsaClientInstanceId(java.lang.String agsaClientInstanceId) {
    this.agsaClientInstanceId = agsaClientInstanceId;
    return this;
  }

  /**
   * A unique device ID for Assistant devices as proposed by go/ocelot-team.
   * @return value or {@code null} for none
   */
  public java.lang.String getCanonicalDeviceId() {
    return canonicalDeviceId;
  }

  /**
   * A unique device ID for Assistant devices as proposed by go/ocelot-team.
   * @param canonicalDeviceId canonicalDeviceId or {@code null} for none
   */
  public AssistantLogsSettingsDeviceIdLog setCanonicalDeviceId(java.lang.String canonicalDeviceId) {
    this.canonicalDeviceId = canonicalDeviceId;
    return this;
  }

  /**
   * If set, indicates that the device is a cast device, and contains the UUID of the cast device.
   * Corresponds to the device_id field of the CastDevice proto.
   * @return value or {@code null} for none
   */
  public java.lang.String getCastDeviceId() {
    return castDeviceId;
  }

  /**
   * If set, indicates that the device is a cast device, and contains the UUID of the cast device.
   * Corresponds to the device_id field of the CastDevice proto.
   * @param castDeviceId castDeviceId or {@code null} for none
   */
  public AssistantLogsSettingsDeviceIdLog setCastDeviceId(java.lang.String castDeviceId) {
    this.castDeviceId = castDeviceId;
    return this;
  }

  /**
   * DUSI (go/dusi) is used as the identifier here. This identifier is unique to the user and
   * device. This will help identify which device or application the user's request originated from.
   * This is not to be confused with the client_instance_id that android devices provide. This is
   * currently used by surfaces that use the assistant-legacy-nexus and assistant-legacy-clockwork
   * pipelines. DUSI is created and set in S3. This field is only filled for GAIA requests.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientInstanceId() {
    return clientInstanceId;
  }

  /**
   * DUSI (go/dusi) is used as the identifier here. This identifier is unique to the user and
   * device. This will help identify which device or application the user's request originated from.
   * This is not to be confused with the client_instance_id that android devices provide. This is
   * currently used by surfaces that use the assistant-legacy-nexus and assistant-legacy-clockwork
   * pipelines. DUSI is created and set in S3. This field is only filled for GAIA requests.
   * @param clientInstanceId clientInstanceId or {@code null} for none
   */
  public AssistantLogsSettingsDeviceIdLog setClientInstanceId(java.lang.String clientInstanceId) {
    this.clientInstanceId = clientInstanceId;
    return this;
  }

  /**
   * The unique device ID for HomeGraph devices. This is the HomeGraph ID, created when the device
   * is registered into HomeGraph. It is immutable for the same device unless it is completely
   * deleted and recreated. See go/home-graph for details. }
   * @return value or {@code null} for none
   */
  public java.lang.String getHomeGraphDeviceId() {
    return homeGraphDeviceId;
  }

  /**
   * The unique device ID for HomeGraph devices. This is the HomeGraph ID, created when the device
   * is registered into HomeGraph. It is immutable for the same device unless it is completely
   * deleted and recreated. See go/home-graph for details. }
   * @param homeGraphDeviceId homeGraphDeviceId or {@code null} for none
   */
  public AssistantLogsSettingsDeviceIdLog setHomeGraphDeviceId(java.lang.String homeGraphDeviceId) {
    this.homeGraphDeviceId = homeGraphDeviceId;
    return this;
  }

  /**
   * The unique ID for libassistant based devices.
   * @return value or {@code null} for none
   */
  public java.lang.String getLibassistantDeviceId() {
    return libassistantDeviceId;
  }

  /**
   * The unique ID for libassistant based devices.
   * @param libassistantDeviceId libassistantDeviceId or {@code null} for none
   */
  public AssistantLogsSettingsDeviceIdLog setLibassistantDeviceId(java.lang.String libassistantDeviceId) {
    this.libassistantDeviceId = libassistantDeviceId;
    return this;
  }

  @Override
  public AssistantLogsSettingsDeviceIdLog set(String fieldName, Object value) {
    return (AssistantLogsSettingsDeviceIdLog) super.set(fieldName, value);
  }

  @Override
  public AssistantLogsSettingsDeviceIdLog clone() {
    return (AssistantLogsSettingsDeviceIdLog) super.clone();
  }

}
