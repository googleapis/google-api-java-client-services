/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.backupdr.v1.model;

/**
 * BackupLock represents a single lock on a Backup resource. An unexpired lock on a Backup prevents
 * the Backup from being deleted.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Backup and DR Service API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BackupLock extends com.google.api.client.json.GenericJson {

  /**
   * If the client is a backup and recovery appliance, this contains metadata about why the lock
   * exists.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BackupApplianceLockInfo backupApplianceLockInfo;

  /**
   * Required. The time after which this lock is not considered valid and will no longer protect the
   * Backup from deletion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lockUntilTime;

  /**
   * Output only. Contains metadata about the lock exist for Google Cloud native backups.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ServiceLockInfo serviceLockInfo;

  /**
   * If the client is a backup and recovery appliance, this contains metadata about why the lock
   * exists.
   * @return value or {@code null} for none
   */
  public BackupApplianceLockInfo getBackupApplianceLockInfo() {
    return backupApplianceLockInfo;
  }

  /**
   * If the client is a backup and recovery appliance, this contains metadata about why the lock
   * exists.
   * @param backupApplianceLockInfo backupApplianceLockInfo or {@code null} for none
   */
  public BackupLock setBackupApplianceLockInfo(BackupApplianceLockInfo backupApplianceLockInfo) {
    this.backupApplianceLockInfo = backupApplianceLockInfo;
    return this;
  }

  /**
   * Required. The time after which this lock is not considered valid and will no longer protect the
   * Backup from deletion.
   * @return value or {@code null} for none
   */
  public String getLockUntilTime() {
    return lockUntilTime;
  }

  /**
   * Required. The time after which this lock is not considered valid and will no longer protect the
   * Backup from deletion.
   * @param lockUntilTime lockUntilTime or {@code null} for none
   */
  public BackupLock setLockUntilTime(String lockUntilTime) {
    this.lockUntilTime = lockUntilTime;
    return this;
  }

  /**
   * Output only. Contains metadata about the lock exist for Google Cloud native backups.
   * @return value or {@code null} for none
   */
  public ServiceLockInfo getServiceLockInfo() {
    return serviceLockInfo;
  }

  /**
   * Output only. Contains metadata about the lock exist for Google Cloud native backups.
   * @param serviceLockInfo serviceLockInfo or {@code null} for none
   */
  public BackupLock setServiceLockInfo(ServiceLockInfo serviceLockInfo) {
    this.serviceLockInfo = serviceLockInfo;
    return this;
  }

  @Override
  public BackupLock set(String fieldName, Object value) {
    return (BackupLock) super.set(fieldName, value);
  }

  @Override
  public BackupLock clone() {
    return (BackupLock) super.clone();
  }

}
