/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Describes the parking allowances for a feature, or the situations and requirements under which
 * one may be permitted to park, such as certain vehicle types, valet parking, and permit parking.
 * Also describes the cost of parking, which may vary based on the time and duration parked.
 * Includes vehicle type, any other conditions for eligibility, and the cost of parking, which may
 * vary based on the time and duration parked. If is_discount is set to true on a given allowance,
 * that allowance represents a discount that can be applied to lower the cost of non-discount
 * allowances specified on feature via parking_provider_feature. In this way, allowances can be
 * 'layered,' i.e. appended, onto each other when denormalizing references via
 * parking_provider_feature.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreParkingAllowanceProto extends com.google.api.client.json.GenericJson {

  /**
   * The type of parking for this allowance. Allowance details only apply to the type of parking
   * specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String allowanceType;

  /**
   * If true, this allowance represents a discount rather than an individual rate; any rate values
   * specified in this allowance describe a discount to be applied to the non-discount allowances in
   * the ParkingProto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDiscount;

  /**
   * If this rate requires validation, this expresses the minimum purchase required for validation
   * in each applicable currency. Should have an ID of /measurement_unit/money_value and consist of
   * two properties: one with an ID of /measurement_unit/money_value/amount and a float value with
   * the amount, and another with the ID /measurement_unit/money_value/currency and an ID value with
   * the MID of the proper currency (from the /finance/currency type). A value of 0 suggests that no
   * purchase is required. If empty, this suggests that no validation is required for this rate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FreebaseTopic> minPurchaseForValidation;

  static {
    // hack to force ProGuard to consider FreebaseTopic used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FreebaseTopic.class);
  }

  /**
   * Any additional details about the permit type; e.g. “Zone A”. In any local languages. Should
   * only be set if allowance_type is PERMIT.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreLanguageTaggedTextProto> permitType;

  static {
    // hack to force ProGuard to consider GeostoreLanguageTaggedTextProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreLanguageTaggedTextProto.class);
  }

  /**
   * The types of services that this parking allowance applies to. For instance, some cities have
   * streets that only allow traditional taxis to pick up passengers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> serviceType;

  /**
   * Describes the rate structures. Each TimeBasedRateProto defines a rate which may apply based on
   * a particular arrival, departure or utilization time; for example, one rate might apply if
   * arriving before 9am, and another might apply regardless of arrival or departure time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreTimeBasedRateProto> timeBasedRate;

  /**
   * Restrictions on which vehicle type(s) the allowance applies to. By default, the allowance
   * applies to any vehicle types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vehicleType;

  /**
   * The type of parking for this allowance. Allowance details only apply to the type of parking
   * specified.
   * @return value or {@code null} for none
   */
  public java.lang.String getAllowanceType() {
    return allowanceType;
  }

  /**
   * The type of parking for this allowance. Allowance details only apply to the type of parking
   * specified.
   * @param allowanceType allowanceType or {@code null} for none
   */
  public GeostoreParkingAllowanceProto setAllowanceType(java.lang.String allowanceType) {
    this.allowanceType = allowanceType;
    return this;
  }

  /**
   * If true, this allowance represents a discount rather than an individual rate; any rate values
   * specified in this allowance describe a discount to be applied to the non-discount allowances in
   * the ParkingProto.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDiscount() {
    return isDiscount;
  }

  /**
   * If true, this allowance represents a discount rather than an individual rate; any rate values
   * specified in this allowance describe a discount to be applied to the non-discount allowances in
   * the ParkingProto.
   * @param isDiscount isDiscount or {@code null} for none
   */
  public GeostoreParkingAllowanceProto setIsDiscount(java.lang.Boolean isDiscount) {
    this.isDiscount = isDiscount;
    return this;
  }

  /**
   * If this rate requires validation, this expresses the minimum purchase required for validation
   * in each applicable currency. Should have an ID of /measurement_unit/money_value and consist of
   * two properties: one with an ID of /measurement_unit/money_value/amount and a float value with
   * the amount, and another with the ID /measurement_unit/money_value/currency and an ID value with
   * the MID of the proper currency (from the /finance/currency type). A value of 0 suggests that no
   * purchase is required. If empty, this suggests that no validation is required for this rate.
   * @return value or {@code null} for none
   */
  public java.util.List<FreebaseTopic> getMinPurchaseForValidation() {
    return minPurchaseForValidation;
  }

  /**
   * If this rate requires validation, this expresses the minimum purchase required for validation
   * in each applicable currency. Should have an ID of /measurement_unit/money_value and consist of
   * two properties: one with an ID of /measurement_unit/money_value/amount and a float value with
   * the amount, and another with the ID /measurement_unit/money_value/currency and an ID value with
   * the MID of the proper currency (from the /finance/currency type). A value of 0 suggests that no
   * purchase is required. If empty, this suggests that no validation is required for this rate.
   * @param minPurchaseForValidation minPurchaseForValidation or {@code null} for none
   */
  public GeostoreParkingAllowanceProto setMinPurchaseForValidation(java.util.List<FreebaseTopic> minPurchaseForValidation) {
    this.minPurchaseForValidation = minPurchaseForValidation;
    return this;
  }

  /**
   * Any additional details about the permit type; e.g. “Zone A”. In any local languages. Should
   * only be set if allowance_type is PERMIT.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreLanguageTaggedTextProto> getPermitType() {
    return permitType;
  }

  /**
   * Any additional details about the permit type; e.g. “Zone A”. In any local languages. Should
   * only be set if allowance_type is PERMIT.
   * @param permitType permitType or {@code null} for none
   */
  public GeostoreParkingAllowanceProto setPermitType(java.util.List<GeostoreLanguageTaggedTextProto> permitType) {
    this.permitType = permitType;
    return this;
  }

  /**
   * The types of services that this parking allowance applies to. For instance, some cities have
   * streets that only allow traditional taxis to pick up passengers.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getServiceType() {
    return serviceType;
  }

  /**
   * The types of services that this parking allowance applies to. For instance, some cities have
   * streets that only allow traditional taxis to pick up passengers.
   * @param serviceType serviceType or {@code null} for none
   */
  public GeostoreParkingAllowanceProto setServiceType(java.util.List<java.lang.String> serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  /**
   * Describes the rate structures. Each TimeBasedRateProto defines a rate which may apply based on
   * a particular arrival, departure or utilization time; for example, one rate might apply if
   * arriving before 9am, and another might apply regardless of arrival or departure time.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreTimeBasedRateProto> getTimeBasedRate() {
    return timeBasedRate;
  }

  /**
   * Describes the rate structures. Each TimeBasedRateProto defines a rate which may apply based on
   * a particular arrival, departure or utilization time; for example, one rate might apply if
   * arriving before 9am, and another might apply regardless of arrival or departure time.
   * @param timeBasedRate timeBasedRate or {@code null} for none
   */
  public GeostoreParkingAllowanceProto setTimeBasedRate(java.util.List<GeostoreTimeBasedRateProto> timeBasedRate) {
    this.timeBasedRate = timeBasedRate;
    return this;
  }

  /**
   * Restrictions on which vehicle type(s) the allowance applies to. By default, the allowance
   * applies to any vehicle types.
   * @return value or {@code null} for none
   */
  public java.lang.String getVehicleType() {
    return vehicleType;
  }

  /**
   * Restrictions on which vehicle type(s) the allowance applies to. By default, the allowance
   * applies to any vehicle types.
   * @param vehicleType vehicleType or {@code null} for none
   */
  public GeostoreParkingAllowanceProto setVehicleType(java.lang.String vehicleType) {
    this.vehicleType = vehicleType;
    return this;
  }

  @Override
  public GeostoreParkingAllowanceProto set(String fieldName, Object value) {
    return (GeostoreParkingAllowanceProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreParkingAllowanceProto clone() {
    return (GeostoreParkingAllowanceProto) super.clone();
  }

}
