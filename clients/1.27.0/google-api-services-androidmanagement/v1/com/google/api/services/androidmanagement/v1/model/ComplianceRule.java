/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * A rule declaring which mitigating actions to take when a device is not compliant with its policy.
 * For every rule, there is always an implicit mitigating action to set policy_compliant to false
 * for the Device resource, and display a message on the device indicating that the device is not
 * compliant with its policy. Other mitigating actions may optionally be taken as well, depending on
 * the field values in the rule.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ComplianceRule extends com.google.api.client.json.GenericJson {

  /**
   * A condition which is satisfied if the Android Framework API level on the device doesn't meet a
   * minimum requirement.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ApiLevelCondition apiLevelCondition;

  /**
   * If set to true, the rule includes a mitigating action to disable apps so that the device is
   * effectively disabled, but app data is preserved. If the device is running an app in locked task
   * mode, the app will be closed and a UI showing the reason for non-compliance will be displayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean disableApps;

  /**
   * A condition which is satisfied if there exists any matching NonComplianceDetail for the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NonComplianceDetailCondition nonComplianceDetailCondition;

  /**
   * If set, the rule includes a mitigating action to disable apps specified in the list, but app
   * data is preserved.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> packageNamesToDisable;

  /**
   * A condition which is satisfied if the Android Framework API level on the device doesn't meet a
   * minimum requirement.
   * @return value or {@code null} for none
   */
  public ApiLevelCondition getApiLevelCondition() {
    return apiLevelCondition;
  }

  /**
   * A condition which is satisfied if the Android Framework API level on the device doesn't meet a
   * minimum requirement.
   * @param apiLevelCondition apiLevelCondition or {@code null} for none
   */
  public ComplianceRule setApiLevelCondition(ApiLevelCondition apiLevelCondition) {
    this.apiLevelCondition = apiLevelCondition;
    return this;
  }

  /**
   * If set to true, the rule includes a mitigating action to disable apps so that the device is
   * effectively disabled, but app data is preserved. If the device is running an app in locked task
   * mode, the app will be closed and a UI showing the reason for non-compliance will be displayed.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDisableApps() {
    return disableApps;
  }

  /**
   * If set to true, the rule includes a mitigating action to disable apps so that the device is
   * effectively disabled, but app data is preserved. If the device is running an app in locked task
   * mode, the app will be closed and a UI showing the reason for non-compliance will be displayed.
   * @param disableApps disableApps or {@code null} for none
   */
  public ComplianceRule setDisableApps(java.lang.Boolean disableApps) {
    this.disableApps = disableApps;
    return this;
  }

  /**
   * A condition which is satisfied if there exists any matching NonComplianceDetail for the device.
   * @return value or {@code null} for none
   */
  public NonComplianceDetailCondition getNonComplianceDetailCondition() {
    return nonComplianceDetailCondition;
  }

  /**
   * A condition which is satisfied if there exists any matching NonComplianceDetail for the device.
   * @param nonComplianceDetailCondition nonComplianceDetailCondition or {@code null} for none
   */
  public ComplianceRule setNonComplianceDetailCondition(NonComplianceDetailCondition nonComplianceDetailCondition) {
    this.nonComplianceDetailCondition = nonComplianceDetailCondition;
    return this;
  }

  /**
   * If set, the rule includes a mitigating action to disable apps specified in the list, but app
   * data is preserved.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPackageNamesToDisable() {
    return packageNamesToDisable;
  }

  /**
   * If set, the rule includes a mitigating action to disable apps specified in the list, but app
   * data is preserved.
   * @param packageNamesToDisable packageNamesToDisable or {@code null} for none
   */
  public ComplianceRule setPackageNamesToDisable(java.util.List<java.lang.String> packageNamesToDisable) {
    this.packageNamesToDisable = packageNamesToDisable;
    return this;
  }

  @Override
  public ComplianceRule set(String fieldName, Object value) {
    return (ComplianceRule) super.set(fieldName, value);
  }

  @Override
  public ComplianceRule clone() {
    return (ComplianceRule) super.clone();
  }

}
