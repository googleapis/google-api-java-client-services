/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbuild.v1.model;

/**
 * BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Build API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BitbucketServerRepositoryId extends com.google.api.client.json.GenericJson {

  /**
   * Required. Identifier for the project storing the repository.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String projectKey;

  /**
   * Required. Identifier for the repository.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String repoSlug;

  /**
   * Output only. The ID of the webhook that was created for receiving events from this repo. We
   * only create and manage a single webhook for each repo.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer webhookId;

  /**
   * Required. Identifier for the project storing the repository.
   * @return value or {@code null} for none
   */
  public java.lang.String getProjectKey() {
    return projectKey;
  }

  /**
   * Required. Identifier for the project storing the repository.
   * @param projectKey projectKey or {@code null} for none
   */
  public BitbucketServerRepositoryId setProjectKey(java.lang.String projectKey) {
    this.projectKey = projectKey;
    return this;
  }

  /**
   * Required. Identifier for the repository.
   * @return value or {@code null} for none
   */
  public java.lang.String getRepoSlug() {
    return repoSlug;
  }

  /**
   * Required. Identifier for the repository.
   * @param repoSlug repoSlug or {@code null} for none
   */
  public BitbucketServerRepositoryId setRepoSlug(java.lang.String repoSlug) {
    this.repoSlug = repoSlug;
    return this;
  }

  /**
   * Output only. The ID of the webhook that was created for receiving events from this repo. We
   * only create and manage a single webhook for each repo.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWebhookId() {
    return webhookId;
  }

  /**
   * Output only. The ID of the webhook that was created for receiving events from this repo. We
   * only create and manage a single webhook for each repo.
   * @param webhookId webhookId or {@code null} for none
   */
  public BitbucketServerRepositoryId setWebhookId(java.lang.Integer webhookId) {
    this.webhookId = webhookId;
    return this;
  }

  @Override
  public BitbucketServerRepositoryId set(String fieldName, Object value) {
    return (BitbucketServerRepositoryId) super.set(fieldName, value);
  }

  @Override
  public BitbucketServerRepositoryId clone() {
    return (BitbucketServerRepositoryId) super.clone();
  }

}
