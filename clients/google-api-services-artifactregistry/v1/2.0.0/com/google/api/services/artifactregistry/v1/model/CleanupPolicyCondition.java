/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.artifactregistry.v1.model;

/**
 * CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries
 * are set, all must be satisfied for the condition to be satisfied.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Artifact Registry API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CleanupPolicyCondition extends com.google.api.client.json.GenericJson {

  /**
   * Match versions newer than a duration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String newerThan;

  /**
   * Match versions older than a duration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String olderThan;

  /**
   * Match versions by package prefix. Applied on any prefix match.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> packageNamePrefixes;

  /**
   * Match versions by tag prefix. Applied on any prefix match.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> tagPrefixes;

  /**
   * Match versions by tag status.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tagState;

  /**
   * DEPRECATED: Use older_than.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String versionAge;

  /**
   * Match versions by version name prefix. Applied on any prefix match.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> versionNamePrefixes;

  /**
   * Match versions newer than a duration.
   * @return value or {@code null} for none
   */
  public String getNewerThan() {
    return newerThan;
  }

  /**
   * Match versions newer than a duration.
   * @param newerThan newerThan or {@code null} for none
   */
  public CleanupPolicyCondition setNewerThan(String newerThan) {
    this.newerThan = newerThan;
    return this;
  }

  /**
   * Match versions older than a duration.
   * @return value or {@code null} for none
   */
  public String getOlderThan() {
    return olderThan;
  }

  /**
   * Match versions older than a duration.
   * @param olderThan olderThan or {@code null} for none
   */
  public CleanupPolicyCondition setOlderThan(String olderThan) {
    this.olderThan = olderThan;
    return this;
  }

  /**
   * Match versions by package prefix. Applied on any prefix match.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPackageNamePrefixes() {
    return packageNamePrefixes;
  }

  /**
   * Match versions by package prefix. Applied on any prefix match.
   * @param packageNamePrefixes packageNamePrefixes or {@code null} for none
   */
  public CleanupPolicyCondition setPackageNamePrefixes(java.util.List<java.lang.String> packageNamePrefixes) {
    this.packageNamePrefixes = packageNamePrefixes;
    return this;
  }

  /**
   * Match versions by tag prefix. Applied on any prefix match.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTagPrefixes() {
    return tagPrefixes;
  }

  /**
   * Match versions by tag prefix. Applied on any prefix match.
   * @param tagPrefixes tagPrefixes or {@code null} for none
   */
  public CleanupPolicyCondition setTagPrefixes(java.util.List<java.lang.String> tagPrefixes) {
    this.tagPrefixes = tagPrefixes;
    return this;
  }

  /**
   * Match versions by tag status.
   * @return value or {@code null} for none
   */
  public java.lang.String getTagState() {
    return tagState;
  }

  /**
   * Match versions by tag status.
   * @param tagState tagState or {@code null} for none
   */
  public CleanupPolicyCondition setTagState(java.lang.String tagState) {
    this.tagState = tagState;
    return this;
  }

  /**
   * DEPRECATED: Use older_than.
   * @return value or {@code null} for none
   */
  public String getVersionAge() {
    return versionAge;
  }

  /**
   * DEPRECATED: Use older_than.
   * @param versionAge versionAge or {@code null} for none
   */
  public CleanupPolicyCondition setVersionAge(String versionAge) {
    this.versionAge = versionAge;
    return this;
  }

  /**
   * Match versions by version name prefix. Applied on any prefix match.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getVersionNamePrefixes() {
    return versionNamePrefixes;
  }

  /**
   * Match versions by version name prefix. Applied on any prefix match.
   * @param versionNamePrefixes versionNamePrefixes or {@code null} for none
   */
  public CleanupPolicyCondition setVersionNamePrefixes(java.util.List<java.lang.String> versionNamePrefixes) {
    this.versionNamePrefixes = versionNamePrefixes;
    return this;
  }

  @Override
  public CleanupPolicyCondition set(String fieldName, Object value) {
    return (CleanupPolicyCondition) super.set(fieldName, value);
  }

  @Override
  public CleanupPolicyCondition clone() {
    return (CleanupPolicyCondition) super.clone();
  }

}
