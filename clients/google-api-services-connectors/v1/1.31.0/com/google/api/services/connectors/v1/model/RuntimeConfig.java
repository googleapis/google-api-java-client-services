/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v1.model;

/**
 * RuntimeConfig is the singleton resource of each location. It includes generic resource configs
 * consumed by control plane and runtime plane like: pub/sub topic/subscription resource name, Cloud
 * Storage location storing schema etc.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Connectors API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RuntimeConfig extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-
   * id}/subscriptions/{topic-id}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String conndSubscription;

  /**
   * Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-
   * id}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String conndTopic;

  /**
   * Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-
   * id}/subscriptions/{topic-id}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String controlPlaneSubscription;

  /**
   * Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects
   * /{project-id}/topics/{topic-id}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String controlPlaneTopic;

  /**
   * Output only. location_id of the runtime location. E.g. "us-west1".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String locationId;

  /**
   * Output only. Resource name of the form: `projects/locations/runtimeConfig`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The endpoint of the connectors runtime ingress.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeEndpoint;

  /**
   * Output only. The Cloud Storage bucket that stores connector's schema reports.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String schemaGcsBucket;

  /**
   * Output only. The name of the Service Directory service name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceDirectory;

  /**
   * Output only. The state of the location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-
   * id}/subscriptions/{topic-id}
   * @return value or {@code null} for none
   */
  public java.lang.String getConndSubscription() {
    return conndSubscription;
  }

  /**
   * Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-
   * id}/subscriptions/{topic-id}
   * @param conndSubscription conndSubscription or {@code null} for none
   */
  public RuntimeConfig setConndSubscription(java.lang.String conndSubscription) {
    this.conndSubscription = conndSubscription;
    return this;
  }

  /**
   * Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-
   * id}
   * @return value or {@code null} for none
   */
  public java.lang.String getConndTopic() {
    return conndTopic;
  }

  /**
   * Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-
   * id}
   * @param conndTopic conndTopic or {@code null} for none
   */
  public RuntimeConfig setConndTopic(java.lang.String conndTopic) {
    this.conndTopic = conndTopic;
    return this;
  }

  /**
   * Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-
   * id}/subscriptions/{topic-id}
   * @return value or {@code null} for none
   */
  public java.lang.String getControlPlaneSubscription() {
    return controlPlaneSubscription;
  }

  /**
   * Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-
   * id}/subscriptions/{topic-id}
   * @param controlPlaneSubscription controlPlaneSubscription or {@code null} for none
   */
  public RuntimeConfig setControlPlaneSubscription(java.lang.String controlPlaneSubscription) {
    this.controlPlaneSubscription = controlPlaneSubscription;
    return this;
  }

  /**
   * Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects
   * /{project-id}/topics/{topic-id}
   * @return value or {@code null} for none
   */
  public java.lang.String getControlPlaneTopic() {
    return controlPlaneTopic;
  }

  /**
   * Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects
   * /{project-id}/topics/{topic-id}
   * @param controlPlaneTopic controlPlaneTopic or {@code null} for none
   */
  public RuntimeConfig setControlPlaneTopic(java.lang.String controlPlaneTopic) {
    this.controlPlaneTopic = controlPlaneTopic;
    return this;
  }

  /**
   * Output only. location_id of the runtime location. E.g. "us-west1".
   * @return value or {@code null} for none
   */
  public java.lang.String getLocationId() {
    return locationId;
  }

  /**
   * Output only. location_id of the runtime location. E.g. "us-west1".
   * @param locationId locationId or {@code null} for none
   */
  public RuntimeConfig setLocationId(java.lang.String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Output only. Resource name of the form: `projects/locations/runtimeConfig`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. Resource name of the form: `projects/locations/runtimeConfig`
   * @param name name or {@code null} for none
   */
  public RuntimeConfig setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The endpoint of the connectors runtime ingress.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeEndpoint() {
    return runtimeEndpoint;
  }

  /**
   * Output only. The endpoint of the connectors runtime ingress.
   * @param runtimeEndpoint runtimeEndpoint or {@code null} for none
   */
  public RuntimeConfig setRuntimeEndpoint(java.lang.String runtimeEndpoint) {
    this.runtimeEndpoint = runtimeEndpoint;
    return this;
  }

  /**
   * Output only. The Cloud Storage bucket that stores connector's schema reports.
   * @return value or {@code null} for none
   */
  public java.lang.String getSchemaGcsBucket() {
    return schemaGcsBucket;
  }

  /**
   * Output only. The Cloud Storage bucket that stores connector's schema reports.
   * @param schemaGcsBucket schemaGcsBucket or {@code null} for none
   */
  public RuntimeConfig setSchemaGcsBucket(java.lang.String schemaGcsBucket) {
    this.schemaGcsBucket = schemaGcsBucket;
    return this;
  }

  /**
   * Output only. The name of the Service Directory service name.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceDirectory() {
    return serviceDirectory;
  }

  /**
   * Output only. The name of the Service Directory service name.
   * @param serviceDirectory serviceDirectory or {@code null} for none
   */
  public RuntimeConfig setServiceDirectory(java.lang.String serviceDirectory) {
    this.serviceDirectory = serviceDirectory;
    return this;
  }

  /**
   * Output only. The state of the location.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The state of the location.
   * @param state state or {@code null} for none
   */
  public RuntimeConfig setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public RuntimeConfig set(String fieldName, Object value) {
    return (RuntimeConfig) super.set(fieldName, value);
  }

  @Override
  public RuntimeConfig clone() {
    return (RuntimeConfig) super.clone();
  }

}
