/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * NOTE(gponcin) 2008/11 This is repeated for articles where we may have multiple links in one
 * entity. From Vivek (Atlantis): "The block segmenter outputs a list of headlines on a page as a
 * single logical entity that we attach to the logicalentity(1) for the goodoc."
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoodocLogicalEntityLink extends com.google.api.client.json.GenericJson {

  /**
   * The preferred way to link to an element is to create an AnchorLabel in the target element and
   * name it here. Multiple elements may contain the same Anchor string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Anchor")
  private java.lang.String anchor;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("BlockId")
  private java.lang.Integer blockId;

  /**
   * Links may also specifically locate the target element with the following indices. Note that
   * during the course of layout analysis, goodoc elements may move around, so such hard links
   * should be created only very late (or not at all -- Anchors would be more reliable target
   * addresses).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DocId")
  private java.lang.Integer docId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("PageId")
  private java.lang.Integer pageId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ParagraphId")
  private java.lang.Integer paragraphId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("RouteId")
  private java.lang.Integer routeId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SymbolId")
  private java.lang.Integer symbolId;

  /**
   * If not defined, link points to the current doc
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Url")
  private java.lang.String url;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("WordId")
  private java.lang.Integer wordId;

  /**
   * The preferred way to link to an element is to create an AnchorLabel in the target element and
   * name it here. Multiple elements may contain the same Anchor string.
   * @return value or {@code null} for none
   */
  public java.lang.String getAnchor() {
    return anchor;
  }

  /**
   * The preferred way to link to an element is to create an AnchorLabel in the target element and
   * name it here. Multiple elements may contain the same Anchor string.
   * @param anchor anchor or {@code null} for none
   */
  public GoodocLogicalEntityLink setAnchor(java.lang.String anchor) {
    this.anchor = anchor;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBlockId() {
    return blockId;
  }

  /**
   * @param blockId blockId or {@code null} for none
   */
  public GoodocLogicalEntityLink setBlockId(java.lang.Integer blockId) {
    this.blockId = blockId;
    return this;
  }

  /**
   * Links may also specifically locate the target element with the following indices. Note that
   * during the course of layout analysis, goodoc elements may move around, so such hard links
   * should be created only very late (or not at all -- Anchors would be more reliable target
   * addresses).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDocId() {
    return docId;
  }

  /**
   * Links may also specifically locate the target element with the following indices. Note that
   * during the course of layout analysis, goodoc elements may move around, so such hard links
   * should be created only very late (or not at all -- Anchors would be more reliable target
   * addresses).
   * @param docId docId or {@code null} for none
   */
  public GoodocLogicalEntityLink setDocId(java.lang.Integer docId) {
    this.docId = docId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPageId() {
    return pageId;
  }

  /**
   * @param pageId pageId or {@code null} for none
   */
  public GoodocLogicalEntityLink setPageId(java.lang.Integer pageId) {
    this.pageId = pageId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getParagraphId() {
    return paragraphId;
  }

  /**
   * @param paragraphId paragraphId or {@code null} for none
   */
  public GoodocLogicalEntityLink setParagraphId(java.lang.Integer paragraphId) {
    this.paragraphId = paragraphId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRouteId() {
    return routeId;
  }

  /**
   * @param routeId routeId or {@code null} for none
   */
  public GoodocLogicalEntityLink setRouteId(java.lang.Integer routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSymbolId() {
    return symbolId;
  }

  /**
   * @param symbolId symbolId or {@code null} for none
   */
  public GoodocLogicalEntityLink setSymbolId(java.lang.Integer symbolId) {
    this.symbolId = symbolId;
    return this;
  }

  /**
   * If not defined, link points to the current doc
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * If not defined, link points to the current doc
   * @param url url or {@code null} for none
   */
  public GoodocLogicalEntityLink setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWordId() {
    return wordId;
  }

  /**
   * @param wordId wordId or {@code null} for none
   */
  public GoodocLogicalEntityLink setWordId(java.lang.Integer wordId) {
    this.wordId = wordId;
    return this;
  }

  @Override
  public GoodocLogicalEntityLink set(String fieldName, Object value) {
    return (GoodocLogicalEntityLink) super.set(fieldName, value);
  }

  @Override
  public GoodocLogicalEntityLink clone() {
    return (GoodocLogicalEntityLink) super.clone();
  }

}
