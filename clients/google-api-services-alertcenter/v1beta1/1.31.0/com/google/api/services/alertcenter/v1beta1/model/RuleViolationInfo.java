/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.alertcenter.v1beta1.model;

/**
 * Common alert information about violated rules that are configured by G Suite administrators.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Workspace Alert Center API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RuleViolationInfo extends com.google.api.client.json.GenericJson {

  /**
   * Source of the data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataSource;

  /**
   * List of matches that were found in the resource content.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<MatchInfo> matchInfo;

  static {
    // hack to force ProGuard to consider MatchInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(MatchInfo.class);
  }

  /**
   * Resource recipients. For Drive, they are grantees that the Drive file was shared with at the
   * time of rule triggering. Valid values include user emails, group emails, domains, or 'anyone'
   * if the file was publicly accessible. If the file was private the recipients list will be empty.
   * For Gmail, they are emails of the users or groups that the Gmail message was sent to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> recipients;

  /**
   * Details of the resource which violated the rule.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResourceInfo resourceInfo;

  /**
   * Details of the violated rule.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RuleInfo ruleInfo;

  /**
   * Actions suppressed due to other actions with higher priority.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> suppressedActionTypes;

  /**
   * Trigger of the rule.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String trigger;

  /**
   * Actions applied as a consequence of the rule being triggered.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> triggeredActionTypes;

  /**
   * Email of the user who caused the violation. Value could be empty if not applicable, for
   * example, a violation found by drive continuous scan.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String triggeringUserEmail;

  /**
   * Source of the data.
   * @return value or {@code null} for none
   */
  public java.lang.String getDataSource() {
    return dataSource;
  }

  /**
   * Source of the data.
   * @param dataSource dataSource or {@code null} for none
   */
  public RuleViolationInfo setDataSource(java.lang.String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * List of matches that were found in the resource content.
   * @return value or {@code null} for none
   */
  public java.util.List<MatchInfo> getMatchInfo() {
    return matchInfo;
  }

  /**
   * List of matches that were found in the resource content.
   * @param matchInfo matchInfo or {@code null} for none
   */
  public RuleViolationInfo setMatchInfo(java.util.List<MatchInfo> matchInfo) {
    this.matchInfo = matchInfo;
    return this;
  }

  /**
   * Resource recipients. For Drive, they are grantees that the Drive file was shared with at the
   * time of rule triggering. Valid values include user emails, group emails, domains, or 'anyone'
   * if the file was publicly accessible. If the file was private the recipients list will be empty.
   * For Gmail, they are emails of the users or groups that the Gmail message was sent to.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRecipients() {
    return recipients;
  }

  /**
   * Resource recipients. For Drive, they are grantees that the Drive file was shared with at the
   * time of rule triggering. Valid values include user emails, group emails, domains, or 'anyone'
   * if the file was publicly accessible. If the file was private the recipients list will be empty.
   * For Gmail, they are emails of the users or groups that the Gmail message was sent to.
   * @param recipients recipients or {@code null} for none
   */
  public RuleViolationInfo setRecipients(java.util.List<java.lang.String> recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Details of the resource which violated the rule.
   * @return value or {@code null} for none
   */
  public ResourceInfo getResourceInfo() {
    return resourceInfo;
  }

  /**
   * Details of the resource which violated the rule.
   * @param resourceInfo resourceInfo or {@code null} for none
   */
  public RuleViolationInfo setResourceInfo(ResourceInfo resourceInfo) {
    this.resourceInfo = resourceInfo;
    return this;
  }

  /**
   * Details of the violated rule.
   * @return value or {@code null} for none
   */
  public RuleInfo getRuleInfo() {
    return ruleInfo;
  }

  /**
   * Details of the violated rule.
   * @param ruleInfo ruleInfo or {@code null} for none
   */
  public RuleViolationInfo setRuleInfo(RuleInfo ruleInfo) {
    this.ruleInfo = ruleInfo;
    return this;
  }

  /**
   * Actions suppressed due to other actions with higher priority.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSuppressedActionTypes() {
    return suppressedActionTypes;
  }

  /**
   * Actions suppressed due to other actions with higher priority.
   * @param suppressedActionTypes suppressedActionTypes or {@code null} for none
   */
  public RuleViolationInfo setSuppressedActionTypes(java.util.List<java.lang.String> suppressedActionTypes) {
    this.suppressedActionTypes = suppressedActionTypes;
    return this;
  }

  /**
   * Trigger of the rule.
   * @return value or {@code null} for none
   */
  public java.lang.String getTrigger() {
    return trigger;
  }

  /**
   * Trigger of the rule.
   * @param trigger trigger or {@code null} for none
   */
  public RuleViolationInfo setTrigger(java.lang.String trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Actions applied as a consequence of the rule being triggered.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTriggeredActionTypes() {
    return triggeredActionTypes;
  }

  /**
   * Actions applied as a consequence of the rule being triggered.
   * @param triggeredActionTypes triggeredActionTypes or {@code null} for none
   */
  public RuleViolationInfo setTriggeredActionTypes(java.util.List<java.lang.String> triggeredActionTypes) {
    this.triggeredActionTypes = triggeredActionTypes;
    return this;
  }

  /**
   * Email of the user who caused the violation. Value could be empty if not applicable, for
   * example, a violation found by drive continuous scan.
   * @return value or {@code null} for none
   */
  public java.lang.String getTriggeringUserEmail() {
    return triggeringUserEmail;
  }

  /**
   * Email of the user who caused the violation. Value could be empty if not applicable, for
   * example, a violation found by drive continuous scan.
   * @param triggeringUserEmail triggeringUserEmail or {@code null} for none
   */
  public RuleViolationInfo setTriggeringUserEmail(java.lang.String triggeringUserEmail) {
    this.triggeringUserEmail = triggeringUserEmail;
    return this;
  }

  @Override
  public RuleViolationInfo set(String fieldName, Object value) {
    return (RuleViolationInfo) super.set(fieldName, value);
  }

  @Override
  public RuleViolationInfo clone() {
    return (RuleViolationInfo) super.clone();
  }

}
