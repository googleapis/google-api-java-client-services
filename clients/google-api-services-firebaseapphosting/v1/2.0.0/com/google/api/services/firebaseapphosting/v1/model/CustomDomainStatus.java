/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseapphosting.v1.model;

/**
 * The status of a custom domain's linkage to a backend.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase App Hosting API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CustomDomainStatus extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Tracks SSL certificate status for the domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String certState;

  /**
   * Output only. Tracks whether a custom domain is detected as appropriately directing traffic to
   * App Hosting.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostState;

  /**
   * Output only. A list of issues with domain configuration. Allows users to self-correct problems
   * with DNS records.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Status> issues;

  /**
   * Output only. Tracks whether the backend is permitted to serve content on the domain, based off
   * the domain's DNS records.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ownershipState;

  /**
   * Output only. Lists the records that must added or removed to a custom domain's DNS in order to
   * finish setup and start serving content. Field is present during onboarding. Also present after
   * onboarding if one or more of the above states is not *_ACTIVE, indicating the domain's DNS
   * records are in a bad state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DnsUpdates> requiredDnsUpdates;

  /**
   * Output only. Tracks SSL certificate status for the domain.
   * @return value or {@code null} for none
   */
  public java.lang.String getCertState() {
    return certState;
  }

  /**
   * Output only. Tracks SSL certificate status for the domain.
   * @param certState certState or {@code null} for none
   */
  public CustomDomainStatus setCertState(java.lang.String certState) {
    this.certState = certState;
    return this;
  }

  /**
   * Output only. Tracks whether a custom domain is detected as appropriately directing traffic to
   * App Hosting.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostState() {
    return hostState;
  }

  /**
   * Output only. Tracks whether a custom domain is detected as appropriately directing traffic to
   * App Hosting.
   * @param hostState hostState or {@code null} for none
   */
  public CustomDomainStatus setHostState(java.lang.String hostState) {
    this.hostState = hostState;
    return this;
  }

  /**
   * Output only. A list of issues with domain configuration. Allows users to self-correct problems
   * with DNS records.
   * @return value or {@code null} for none
   */
  public java.util.List<Status> getIssues() {
    return issues;
  }

  /**
   * Output only. A list of issues with domain configuration. Allows users to self-correct problems
   * with DNS records.
   * @param issues issues or {@code null} for none
   */
  public CustomDomainStatus setIssues(java.util.List<Status> issues) {
    this.issues = issues;
    return this;
  }

  /**
   * Output only. Tracks whether the backend is permitted to serve content on the domain, based off
   * the domain's DNS records.
   * @return value or {@code null} for none
   */
  public java.lang.String getOwnershipState() {
    return ownershipState;
  }

  /**
   * Output only. Tracks whether the backend is permitted to serve content on the domain, based off
   * the domain's DNS records.
   * @param ownershipState ownershipState or {@code null} for none
   */
  public CustomDomainStatus setOwnershipState(java.lang.String ownershipState) {
    this.ownershipState = ownershipState;
    return this;
  }

  /**
   * Output only. Lists the records that must added or removed to a custom domain's DNS in order to
   * finish setup and start serving content. Field is present during onboarding. Also present after
   * onboarding if one or more of the above states is not *_ACTIVE, indicating the domain's DNS
   * records are in a bad state.
   * @return value or {@code null} for none
   */
  public java.util.List<DnsUpdates> getRequiredDnsUpdates() {
    return requiredDnsUpdates;
  }

  /**
   * Output only. Lists the records that must added or removed to a custom domain's DNS in order to
   * finish setup and start serving content. Field is present during onboarding. Also present after
   * onboarding if one or more of the above states is not *_ACTIVE, indicating the domain's DNS
   * records are in a bad state.
   * @param requiredDnsUpdates requiredDnsUpdates or {@code null} for none
   */
  public CustomDomainStatus setRequiredDnsUpdates(java.util.List<DnsUpdates> requiredDnsUpdates) {
    this.requiredDnsUpdates = requiredDnsUpdates;
    return this;
  }

  @Override
  public CustomDomainStatus set(String fieldName, Object value) {
    return (CustomDomainStatus) super.set(fieldName, value);
  }

  @Override
  public CustomDomainStatus clone() {
    return (CustomDomainStatus) super.clone();
  }

}
