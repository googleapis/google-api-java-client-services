/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for VideoVideoStream.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoVideoStream extends com.google.api.client.json.GenericJson {

  /**
   * Video bitrate in bits/s.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long bitrate;

  /**
   * Video codec ID. Uses the numeric value corresponding to the CodecId enum object, in order to
   * avoid the dependency on vsi/videostreaminfo.proto.
   * http://cs/symbol:CodecId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer codecId;

  /**
   * Video frame per second, obtained by parsing video header information. The value can be
   * inaccurate for some types of codecs. See comments at
   * http://cs/symbol:video_fps%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double fps;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer height;

  /**
   * Video length, in seconds. This value is derived from metadata in the source video, and often
   * differs from the actual duration of any given transcode. In videos without valid timestamps,
   * this value is not calculable, and is reported as zero.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double lengthSec;

  /**
   * Index of the stream in the file, 0-based.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long streamIndex;

  /**
   * The video stream's width and height. Important notes: 1) These are the coded dimensions of the
   * video stream and DO NOT take into account any rotation metadata that may be present in the
   * video container. Prefer to use the MediaOverview::resolution and MediaOverview::orientation
   * when possible. 2) In the case you want detailed displayed width/height information, you can use
   * the MediaOverview::orientation to determine the displayed dimensions. E.g., in the case of
   * PORTRAIT orientation: displayed_width = min(width, height) displayed_height = max(width,
   * height) And for LANDSCAPE orientation: displayed_width = max(width, height) displayed_height =
   * min(width, height)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer width;

  /**
   * Video bitrate in bits/s.
   * @return value or {@code null} for none
   */
  public java.lang.Long getBitrate() {
    return bitrate;
  }

  /**
   * Video bitrate in bits/s.
   * @param bitrate bitrate or {@code null} for none
   */
  public VideoVideoStream setBitrate(java.lang.Long bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Video codec ID. Uses the numeric value corresponding to the CodecId enum object, in order to
   * avoid the dependency on vsi/videostreaminfo.proto.
   * http://cs/symbol:CodecId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCodecId() {
    return codecId;
  }

  /**
   * Video codec ID. Uses the numeric value corresponding to the CodecId enum object, in order to
   * avoid the dependency on vsi/videostreaminfo.proto.
   * http://cs/symbol:CodecId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * @param codecId codecId or {@code null} for none
   */
  public VideoVideoStream setCodecId(java.lang.Integer codecId) {
    this.codecId = codecId;
    return this;
  }

  /**
   * Video frame per second, obtained by parsing video header information. The value can be
   * inaccurate for some types of codecs. See comments at
   * http://cs/symbol:video_fps%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * @return value or {@code null} for none
   */
  public java.lang.Double getFps() {
    return fps;
  }

  /**
   * Video frame per second, obtained by parsing video header information. The value can be
   * inaccurate for some types of codecs. See comments at
   * http://cs/symbol:video_fps%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * @param fps fps or {@code null} for none
   */
  public VideoVideoStream setFps(java.lang.Double fps) {
    this.fps = fps;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * @param height height or {@code null} for none
   */
  public VideoVideoStream setHeight(java.lang.Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Video length, in seconds. This value is derived from metadata in the source video, and often
   * differs from the actual duration of any given transcode. In videos without valid timestamps,
   * this value is not calculable, and is reported as zero.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLengthSec() {
    return lengthSec;
  }

  /**
   * Video length, in seconds. This value is derived from metadata in the source video, and often
   * differs from the actual duration of any given transcode. In videos without valid timestamps,
   * this value is not calculable, and is reported as zero.
   * @param lengthSec lengthSec or {@code null} for none
   */
  public VideoVideoStream setLengthSec(java.lang.Double lengthSec) {
    this.lengthSec = lengthSec;
    return this;
  }

  /**
   * Index of the stream in the file, 0-based.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStreamIndex() {
    return streamIndex;
  }

  /**
   * Index of the stream in the file, 0-based.
   * @param streamIndex streamIndex or {@code null} for none
   */
  public VideoVideoStream setStreamIndex(java.lang.Long streamIndex) {
    this.streamIndex = streamIndex;
    return this;
  }

  /**
   * The video stream's width and height. Important notes: 1) These are the coded dimensions of the
   * video stream and DO NOT take into account any rotation metadata that may be present in the
   * video container. Prefer to use the MediaOverview::resolution and MediaOverview::orientation
   * when possible. 2) In the case you want detailed displayed width/height information, you can use
   * the MediaOverview::orientation to determine the displayed dimensions. E.g., in the case of
   * PORTRAIT orientation: displayed_width = min(width, height) displayed_height = max(width,
   * height) And for LANDSCAPE orientation: displayed_width = max(width, height) displayed_height =
   * min(width, height)
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWidth() {
    return width;
  }

  /**
   * The video stream's width and height. Important notes: 1) These are the coded dimensions of the
   * video stream and DO NOT take into account any rotation metadata that may be present in the
   * video container. Prefer to use the MediaOverview::resolution and MediaOverview::orientation
   * when possible. 2) In the case you want detailed displayed width/height information, you can use
   * the MediaOverview::orientation to determine the displayed dimensions. E.g., in the case of
   * PORTRAIT orientation: displayed_width = min(width, height) displayed_height = max(width,
   * height) And for LANDSCAPE orientation: displayed_width = max(width, height) displayed_height =
   * min(width, height)
   * @param width width or {@code null} for none
   */
  public VideoVideoStream setWidth(java.lang.Integer width) {
    this.width = width;
    return this;
  }

  @Override
  public VideoVideoStream set(String fieldName, Object value) {
    return (VideoVideoStream) super.set(fieldName, value);
  }

  @Override
  public VideoVideoStream clone() {
    return (VideoVideoStream) super.clone();
  }

}
