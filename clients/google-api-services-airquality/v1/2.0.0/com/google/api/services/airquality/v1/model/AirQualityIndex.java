/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.airquality.v1.model;

/**
 * The basic object for representing different air quality metrics. When brought together, these
 * metrics provide a snapshot about the current air quality conditions. There are multiple indexes
 * in the world serving different purposes and groups interested in measuring different aspects of
 * air quality.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Air Quality API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AirQualityIndex extends com.google.api.client.json.GenericJson {

  /**
   * The index's numeric score. Examples: 10, 100. The value is not normalized and should only be
   * interpreted in the context of its related air-quality index. For non-numeric indexes, this
   * field will not be returned. Note: This field should be used for calculations, graph display,
   * etc. For displaying the index score, you should use the AQI display field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer aqi;

  /**
   * Textual representation of the index numeric score, that may include prefix or suffix symbols,
   * which usually represents the worst index score. Example: >100 or 10+. Note: This field should
   * be used when you want to display the index score. For non-numeric indexes, this field is empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String aqiDisplay;

  /**
   * Textual classification of the index numeric score interpretation. For example: "Excellent air
   * quality".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String category;

  /**
   * The index's code. This field represents the index for programming purposes by using snake case
   * instead of spaces. Examples: "uaqi", "fra_atmo".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String code;

  /**
   * The color used to represent the AQI numeric score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Color color;

  /**
   * A human readable representation of the index name. Example: "AQI (US)"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * The chemical symbol of the dominant pollutant. For example: "CO".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dominantPollutant;

  /**
   * The index's numeric score. Examples: 10, 100. The value is not normalized and should only be
   * interpreted in the context of its related air-quality index. For non-numeric indexes, this
   * field will not be returned. Note: This field should be used for calculations, graph display,
   * etc. For displaying the index score, you should use the AQI display field.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAqi() {
    return aqi;
  }

  /**
   * The index's numeric score. Examples: 10, 100. The value is not normalized and should only be
   * interpreted in the context of its related air-quality index. For non-numeric indexes, this
   * field will not be returned. Note: This field should be used for calculations, graph display,
   * etc. For displaying the index score, you should use the AQI display field.
   * @param aqi aqi or {@code null} for none
   */
  public AirQualityIndex setAqi(java.lang.Integer aqi) {
    this.aqi = aqi;
    return this;
  }

  /**
   * Textual representation of the index numeric score, that may include prefix or suffix symbols,
   * which usually represents the worst index score. Example: >100 or 10+. Note: This field should
   * be used when you want to display the index score. For non-numeric indexes, this field is empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getAqiDisplay() {
    return aqiDisplay;
  }

  /**
   * Textual representation of the index numeric score, that may include prefix or suffix symbols,
   * which usually represents the worst index score. Example: >100 or 10+. Note: This field should
   * be used when you want to display the index score. For non-numeric indexes, this field is empty.
   * @param aqiDisplay aqiDisplay or {@code null} for none
   */
  public AirQualityIndex setAqiDisplay(java.lang.String aqiDisplay) {
    this.aqiDisplay = aqiDisplay;
    return this;
  }

  /**
   * Textual classification of the index numeric score interpretation. For example: "Excellent air
   * quality".
   * @return value or {@code null} for none
   */
  public java.lang.String getCategory() {
    return category;
  }

  /**
   * Textual classification of the index numeric score interpretation. For example: "Excellent air
   * quality".
   * @param category category or {@code null} for none
   */
  public AirQualityIndex setCategory(java.lang.String category) {
    this.category = category;
    return this;
  }

  /**
   * The index's code. This field represents the index for programming purposes by using snake case
   * instead of spaces. Examples: "uaqi", "fra_atmo".
   * @return value or {@code null} for none
   */
  public java.lang.String getCode() {
    return code;
  }

  /**
   * The index's code. This field represents the index for programming purposes by using snake case
   * instead of spaces. Examples: "uaqi", "fra_atmo".
   * @param code code or {@code null} for none
   */
  public AirQualityIndex setCode(java.lang.String code) {
    this.code = code;
    return this;
  }

  /**
   * The color used to represent the AQI numeric score.
   * @return value or {@code null} for none
   */
  public Color getColor() {
    return color;
  }

  /**
   * The color used to represent the AQI numeric score.
   * @param color color or {@code null} for none
   */
  public AirQualityIndex setColor(Color color) {
    this.color = color;
    return this;
  }

  /**
   * A human readable representation of the index name. Example: "AQI (US)"
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * A human readable representation of the index name. Example: "AQI (US)"
   * @param displayName displayName or {@code null} for none
   */
  public AirQualityIndex setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The chemical symbol of the dominant pollutant. For example: "CO".
   * @return value or {@code null} for none
   */
  public java.lang.String getDominantPollutant() {
    return dominantPollutant;
  }

  /**
   * The chemical symbol of the dominant pollutant. For example: "CO".
   * @param dominantPollutant dominantPollutant or {@code null} for none
   */
  public AirQualityIndex setDominantPollutant(java.lang.String dominantPollutant) {
    this.dominantPollutant = dominantPollutant;
    return this;
  }

  @Override
  public AirQualityIndex set(String fieldName, Object value) {
    return (AirQualityIndex) super.set(fieldName, value);
  }

  @Override
  public AirQualityIndex clone() {
    return (AirQualityIndex) super.clone();
  }

}
