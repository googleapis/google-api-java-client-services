/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.binaryauthorization.v1.model;

/**
 * An image vulnerability check, which rejects images that violate the configured vulnerability
 * rules.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Binary Authorization API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VulnerabilityCheck extends com.google.api.client.json.GenericJson {

  /**
   * Optional. A list of specific CVEs to ignore even if the vulnerability level violates
   * `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of
   * Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are
   * applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will allow
   * vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or
   * `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> allowedCves;

  /**
   * Optional. A list of specific CVEs to always raise warnings about even if the vulnerability
   * level meets `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the
   * format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs
   * are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will
   * block vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or
   * `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> blockedCves;

  /**
   * Optional. The projects where vulnerabilities are stored as Container Analysis Occurrences. Each
   * project is expressed in the resource format of `projects/[PROJECT_ID]`, e.g., `projects/my-gcp-
   * project`. An attempt will be made for each project to fetch vulnerabilities, and all valid
   * vulnerabilities will be used to check against the vulnerability policy. If no valid scan is
   * found in all projects configured here, an error will be returned for the check. Maximum number
   * of `container_analysis_vulnerability_projects` allowed in each `VulnerabilityCheck` is 10.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> containerAnalysisVulnerabilityProjects;

  /**
   * Required. The threshold for severity for which a fix is currently available. This field is
   * required and must be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String maximumFixableSeverity;

  /**
   * Required. The threshold for severity for which a fix isn't currently available. This field is
   * required and must be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String maximumUnfixableSeverity;

  /**
   * Optional. A list of specific CVEs to ignore even if the vulnerability level violates
   * `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of
   * Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are
   * applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will allow
   * vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or
   * `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAllowedCves() {
    return allowedCves;
  }

  /**
   * Optional. A list of specific CVEs to ignore even if the vulnerability level violates
   * `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of
   * Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are
   * applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will allow
   * vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or
   * `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
   * @param allowedCves allowedCves or {@code null} for none
   */
  public VulnerabilityCheck setAllowedCves(java.util.List<java.lang.String> allowedCves) {
    this.allowedCves = allowedCves;
    return this;
  }

  /**
   * Optional. A list of specific CVEs to always raise warnings about even if the vulnerability
   * level meets `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the
   * format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs
   * are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will
   * block vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or
   * `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getBlockedCves() {
    return blockedCves;
  }

  /**
   * Optional. A list of specific CVEs to always raise warnings about even if the vulnerability
   * level meets `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the
   * format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs
   * are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will
   * block vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or
   * `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
   * @param blockedCves blockedCves or {@code null} for none
   */
  public VulnerabilityCheck setBlockedCves(java.util.List<java.lang.String> blockedCves) {
    this.blockedCves = blockedCves;
    return this;
  }

  /**
   * Optional. The projects where vulnerabilities are stored as Container Analysis Occurrences. Each
   * project is expressed in the resource format of `projects/[PROJECT_ID]`, e.g., `projects/my-gcp-
   * project`. An attempt will be made for each project to fetch vulnerabilities, and all valid
   * vulnerabilities will be used to check against the vulnerability policy. If no valid scan is
   * found in all projects configured here, an error will be returned for the check. Maximum number
   * of `container_analysis_vulnerability_projects` allowed in each `VulnerabilityCheck` is 10.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getContainerAnalysisVulnerabilityProjects() {
    return containerAnalysisVulnerabilityProjects;
  }

  /**
   * Optional. The projects where vulnerabilities are stored as Container Analysis Occurrences. Each
   * project is expressed in the resource format of `projects/[PROJECT_ID]`, e.g., `projects/my-gcp-
   * project`. An attempt will be made for each project to fetch vulnerabilities, and all valid
   * vulnerabilities will be used to check against the vulnerability policy. If no valid scan is
   * found in all projects configured here, an error will be returned for the check. Maximum number
   * of `container_analysis_vulnerability_projects` allowed in each `VulnerabilityCheck` is 10.
   * @param containerAnalysisVulnerabilityProjects containerAnalysisVulnerabilityProjects or {@code null} for none
   */
  public VulnerabilityCheck setContainerAnalysisVulnerabilityProjects(java.util.List<java.lang.String> containerAnalysisVulnerabilityProjects) {
    this.containerAnalysisVulnerabilityProjects = containerAnalysisVulnerabilityProjects;
    return this;
  }

  /**
   * Required. The threshold for severity for which a fix is currently available. This field is
   * required and must be set.
   * @return value or {@code null} for none
   */
  public java.lang.String getMaximumFixableSeverity() {
    return maximumFixableSeverity;
  }

  /**
   * Required. The threshold for severity for which a fix is currently available. This field is
   * required and must be set.
   * @param maximumFixableSeverity maximumFixableSeverity or {@code null} for none
   */
  public VulnerabilityCheck setMaximumFixableSeverity(java.lang.String maximumFixableSeverity) {
    this.maximumFixableSeverity = maximumFixableSeverity;
    return this;
  }

  /**
   * Required. The threshold for severity for which a fix isn't currently available. This field is
   * required and must be set.
   * @return value or {@code null} for none
   */
  public java.lang.String getMaximumUnfixableSeverity() {
    return maximumUnfixableSeverity;
  }

  /**
   * Required. The threshold for severity for which a fix isn't currently available. This field is
   * required and must be set.
   * @param maximumUnfixableSeverity maximumUnfixableSeverity or {@code null} for none
   */
  public VulnerabilityCheck setMaximumUnfixableSeverity(java.lang.String maximumUnfixableSeverity) {
    this.maximumUnfixableSeverity = maximumUnfixableSeverity;
    return this;
  }

  @Override
  public VulnerabilityCheck set(String fieldName, Object value) {
    return (VulnerabilityCheck) super.set(fieldName, value);
  }

  @Override
  public VulnerabilityCheck clone() {
    return (VulnerabilityCheck) super.clone();
  }

}
