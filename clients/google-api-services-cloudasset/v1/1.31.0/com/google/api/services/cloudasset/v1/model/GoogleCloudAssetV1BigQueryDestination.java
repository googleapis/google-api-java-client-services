/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudasset.v1.model;

/**
 * A BigQuery destination.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Asset API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAssetV1BigQueryDestination extends com.google.api.client.json.GenericJson {

  /**
   * Required. The BigQuery dataset in format "projects/projectId/datasets/datasetId", to which the
   * analysis results should be exported. If this dataset does not exist, the export call will
   * return an INVALID_ARGUMENT error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataset;

  /**
   * The partition key for BigQuery partitioned table.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String partitionKey;

  /**
   * Required. The prefix of the BigQuery tables to which the analysis results will be written.
   * Tables will be created based on this table_prefix if not exist: * _analysis table will contain
   * export operation's metadata. * _analysis_result will contain all the IamPolicyAnalysisResult.
   * When [partition_key] is specified, both tables will be partitioned based on the
   * [partition_key].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tablePrefix;

  /**
   * Optional. Specifies the action that occurs if the destination table or partition already
   * exists. The following values are supported: * WRITE_TRUNCATE: If the table or partition already
   * exists, BigQuery overwrites the entire table or all the partitions data. * WRITE_APPEND: If the
   * table or partition already exists, BigQuery appends the data to the table or the latest
   * partition. * WRITE_EMPTY: If the table already exists and contains data, an error is returned.
   * The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to
   * complete the job successfully. Details are at https://cloud.google.com/bigquery/docs/loading-
   * data-local#appending_to_or_overwriting_a_table_using_a_local_file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String writeDisposition;

  /**
   * Required. The BigQuery dataset in format "projects/projectId/datasets/datasetId", to which the
   * analysis results should be exported. If this dataset does not exist, the export call will
   * return an INVALID_ARGUMENT error.
   * @return value or {@code null} for none
   */
  public java.lang.String getDataset() {
    return dataset;
  }

  /**
   * Required. The BigQuery dataset in format "projects/projectId/datasets/datasetId", to which the
   * analysis results should be exported. If this dataset does not exist, the export call will
   * return an INVALID_ARGUMENT error.
   * @param dataset dataset or {@code null} for none
   */
  public GoogleCloudAssetV1BigQueryDestination setDataset(java.lang.String dataset) {
    this.dataset = dataset;
    return this;
  }

  /**
   * The partition key for BigQuery partitioned table.
   * @return value or {@code null} for none
   */
  public java.lang.String getPartitionKey() {
    return partitionKey;
  }

  /**
   * The partition key for BigQuery partitioned table.
   * @param partitionKey partitionKey or {@code null} for none
   */
  public GoogleCloudAssetV1BigQueryDestination setPartitionKey(java.lang.String partitionKey) {
    this.partitionKey = partitionKey;
    return this;
  }

  /**
   * Required. The prefix of the BigQuery tables to which the analysis results will be written.
   * Tables will be created based on this table_prefix if not exist: * _analysis table will contain
   * export operation's metadata. * _analysis_result will contain all the IamPolicyAnalysisResult.
   * When [partition_key] is specified, both tables will be partitioned based on the
   * [partition_key].
   * @return value or {@code null} for none
   */
  public java.lang.String getTablePrefix() {
    return tablePrefix;
  }

  /**
   * Required. The prefix of the BigQuery tables to which the analysis results will be written.
   * Tables will be created based on this table_prefix if not exist: * _analysis table will contain
   * export operation's metadata. * _analysis_result will contain all the IamPolicyAnalysisResult.
   * When [partition_key] is specified, both tables will be partitioned based on the
   * [partition_key].
   * @param tablePrefix tablePrefix or {@code null} for none
   */
  public GoogleCloudAssetV1BigQueryDestination setTablePrefix(java.lang.String tablePrefix) {
    this.tablePrefix = tablePrefix;
    return this;
  }

  /**
   * Optional. Specifies the action that occurs if the destination table or partition already
   * exists. The following values are supported: * WRITE_TRUNCATE: If the table or partition already
   * exists, BigQuery overwrites the entire table or all the partitions data. * WRITE_APPEND: If the
   * table or partition already exists, BigQuery appends the data to the table or the latest
   * partition. * WRITE_EMPTY: If the table already exists and contains data, an error is returned.
   * The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to
   * complete the job successfully. Details are at https://cloud.google.com/bigquery/docs/loading-
   * data-local#appending_to_or_overwriting_a_table_using_a_local_file.
   * @return value or {@code null} for none
   */
  public java.lang.String getWriteDisposition() {
    return writeDisposition;
  }

  /**
   * Optional. Specifies the action that occurs if the destination table or partition already
   * exists. The following values are supported: * WRITE_TRUNCATE: If the table or partition already
   * exists, BigQuery overwrites the entire table or all the partitions data. * WRITE_APPEND: If the
   * table or partition already exists, BigQuery appends the data to the table or the latest
   * partition. * WRITE_EMPTY: If the table already exists and contains data, an error is returned.
   * The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to
   * complete the job successfully. Details are at https://cloud.google.com/bigquery/docs/loading-
   * data-local#appending_to_or_overwriting_a_table_using_a_local_file.
   * @param writeDisposition writeDisposition or {@code null} for none
   */
  public GoogleCloudAssetV1BigQueryDestination setWriteDisposition(java.lang.String writeDisposition) {
    this.writeDisposition = writeDisposition;
    return this;
  }

  @Override
  public GoogleCloudAssetV1BigQueryDestination set(String fieldName, Object value) {
    return (GoogleCloudAssetV1BigQueryDestination) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAssetV1BigQueryDestination clone() {
    return (GoogleCloudAssetV1BigQueryDestination) super.clone();
  }

}
