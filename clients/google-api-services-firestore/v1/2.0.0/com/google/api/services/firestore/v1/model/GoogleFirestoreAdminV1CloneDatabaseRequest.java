/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1.model;

/**
 * The request message for FirestoreAdmin.CloneDatabase.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleFirestoreAdminV1CloneDatabaseRequest extends com.google.api.client.json.GenericJson {

  /**
   * Required. The ID to use for the database, which will become the final component of the
   * database's resource name. This database ID must not be associated with an existing database.
   * This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter
   * and the last a letter or a number. Must not be UUID-like
   * /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database ID is also valid.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String databaseId;

  /**
   * Optional. Encryption configuration for the cloned database. If this field is not specified, the
   * cloned database will use the same encryption configuration as the source database, namely
   * use_source_encryption.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleFirestoreAdminV1EncryptionConfig encryptionConfig;

  /**
   * Required. Specification of the PITR data to clone from. The source database must exist. The
   * cloned database will be created in the same location as the source database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleFirestoreAdminV1PitrSnapshot pitrSnapshot;

  /**
   * Optional. Immutable. Tags to be bound to the cloned database. The tags should be provided in
   * the format of `tagKeys/{tag_key_id} -> tagValues/{tag_value_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> tags;

  /**
   * Required. The ID to use for the database, which will become the final component of the
   * database's resource name. This database ID must not be associated with an existing database.
   * This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter
   * and the last a letter or a number. Must not be UUID-like
   * /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database ID is also valid.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabaseId() {
    return databaseId;
  }

  /**
   * Required. The ID to use for the database, which will become the final component of the
   * database's resource name. This database ID must not be associated with an existing database.
   * This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter
   * and the last a letter or a number. Must not be UUID-like
   * /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database ID is also valid.
   * @param databaseId databaseId or {@code null} for none
   */
  public GoogleFirestoreAdminV1CloneDatabaseRequest setDatabaseId(java.lang.String databaseId) {
    this.databaseId = databaseId;
    return this;
  }

  /**
   * Optional. Encryption configuration for the cloned database. If this field is not specified, the
   * cloned database will use the same encryption configuration as the source database, namely
   * use_source_encryption.
   * @return value or {@code null} for none
   */
  public GoogleFirestoreAdminV1EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  /**
   * Optional. Encryption configuration for the cloned database. If this field is not specified, the
   * cloned database will use the same encryption configuration as the source database, namely
   * use_source_encryption.
   * @param encryptionConfig encryptionConfig or {@code null} for none
   */
  public GoogleFirestoreAdminV1CloneDatabaseRequest setEncryptionConfig(GoogleFirestoreAdminV1EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Required. Specification of the PITR data to clone from. The source database must exist. The
   * cloned database will be created in the same location as the source database.
   * @return value or {@code null} for none
   */
  public GoogleFirestoreAdminV1PitrSnapshot getPitrSnapshot() {
    return pitrSnapshot;
  }

  /**
   * Required. Specification of the PITR data to clone from. The source database must exist. The
   * cloned database will be created in the same location as the source database.
   * @param pitrSnapshot pitrSnapshot or {@code null} for none
   */
  public GoogleFirestoreAdminV1CloneDatabaseRequest setPitrSnapshot(GoogleFirestoreAdminV1PitrSnapshot pitrSnapshot) {
    this.pitrSnapshot = pitrSnapshot;
    return this;
  }

  /**
   * Optional. Immutable. Tags to be bound to the cloned database. The tags should be provided in
   * the format of `tagKeys/{tag_key_id} -> tagValues/{tag_value_id}`.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getTags() {
    return tags;
  }

  /**
   * Optional. Immutable. Tags to be bound to the cloned database. The tags should be provided in
   * the format of `tagKeys/{tag_key_id} -> tagValues/{tag_value_id}`.
   * @param tags tags or {@code null} for none
   */
  public GoogleFirestoreAdminV1CloneDatabaseRequest setTags(java.util.Map<String, java.lang.String> tags) {
    this.tags = tags;
    return this;
  }

  @Override
  public GoogleFirestoreAdminV1CloneDatabaseRequest set(String fieldName, Object value) {
    return (GoogleFirestoreAdminV1CloneDatabaseRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleFirestoreAdminV1CloneDatabaseRequest clone() {
    return (GoogleFirestoreAdminV1CloneDatabaseRequest) super.clone();
  }

}
