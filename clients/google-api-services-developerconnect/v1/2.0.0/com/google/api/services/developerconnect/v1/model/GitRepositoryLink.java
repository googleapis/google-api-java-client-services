/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.developerconnect.v1.model;

/**
 * Message describing the GitRepositoryLink object
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Developer Connect API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GitRepositoryLink extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Allows clients to store small amounts of arbitrary data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Required. Git Clone URI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cloneUri;

  /**
   * Output only. [Output only] Create timestamp
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. [Output only] Delete timestamp
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String deleteTime;

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and may
   * be sent on update and delete requests to ensure the client has an up-to-date value before
   * proceeding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Output only. URI to access the linked repository through the Git Proxy. This field is only
   * populated if the git proxy is enabled for the connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gitProxyUri;

  /**
   * Optional. Labels as key value pairs
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Identifier. Resource name of the repository, in the format
   * `projects/locations/connections/gitRepositoryLinks`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. Set to true when the connection is being set up or updated in the background.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reconciling;

  /**
   * Output only. A system-assigned unique identifier for the GitRepositoryLink.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. [Output only] Update timestamp
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. External ID of the webhook created for the repository.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String webhookId;

  /**
   * Optional. Allows clients to store small amounts of arbitrary data.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Optional. Allows clients to store small amounts of arbitrary data.
   * @param annotations annotations or {@code null} for none
   */
  public GitRepositoryLink setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Required. Git Clone URI.
   * @return value or {@code null} for none
   */
  public java.lang.String getCloneUri() {
    return cloneUri;
  }

  /**
   * Required. Git Clone URI.
   * @param cloneUri cloneUri or {@code null} for none
   */
  public GitRepositoryLink setCloneUri(java.lang.String cloneUri) {
    this.cloneUri = cloneUri;
    return this;
  }

  /**
   * Output only. [Output only] Create timestamp
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. [Output only] Create timestamp
   * @param createTime createTime or {@code null} for none
   */
  public GitRepositoryLink setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. [Output only] Delete timestamp
   * @return value or {@code null} for none
   */
  public String getDeleteTime() {
    return deleteTime;
  }

  /**
   * Output only. [Output only] Delete timestamp
   * @param deleteTime deleteTime or {@code null} for none
   */
  public GitRepositoryLink setDeleteTime(String deleteTime) {
    this.deleteTime = deleteTime;
    return this;
  }

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and may
   * be sent on update and delete requests to ensure the client has an up-to-date value before
   * proceeding.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and may
   * be sent on update and delete requests to ensure the client has an up-to-date value before
   * proceeding.
   * @param etag etag or {@code null} for none
   */
  public GitRepositoryLink setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Output only. URI to access the linked repository through the Git Proxy. This field is only
   * populated if the git proxy is enabled for the connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getGitProxyUri() {
    return gitProxyUri;
  }

  /**
   * Output only. URI to access the linked repository through the Git Proxy. This field is only
   * populated if the git proxy is enabled for the connection.
   * @param gitProxyUri gitProxyUri or {@code null} for none
   */
  public GitRepositoryLink setGitProxyUri(java.lang.String gitProxyUri) {
    this.gitProxyUri = gitProxyUri;
    return this;
  }

  /**
   * Optional. Labels as key value pairs
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. Labels as key value pairs
   * @param labels labels or {@code null} for none
   */
  public GitRepositoryLink setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Identifier. Resource name of the repository, in the format
   * `projects/locations/connections/gitRepositoryLinks`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. Resource name of the repository, in the format
   * `projects/locations/connections/gitRepositoryLinks`.
   * @param name name or {@code null} for none
   */
  public GitRepositoryLink setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Set to true when the connection is being set up or updated in the background.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReconciling() {
    return reconciling;
  }

  /**
   * Output only. Set to true when the connection is being set up or updated in the background.
   * @param reconciling reconciling or {@code null} for none
   */
  public GitRepositoryLink setReconciling(java.lang.Boolean reconciling) {
    this.reconciling = reconciling;
    return this;
  }

  /**
   * Output only. A system-assigned unique identifier for the GitRepositoryLink.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. A system-assigned unique identifier for the GitRepositoryLink.
   * @param uid uid or {@code null} for none
   */
  public GitRepositoryLink setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. [Output only] Update timestamp
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. [Output only] Update timestamp
   * @param updateTime updateTime or {@code null} for none
   */
  public GitRepositoryLink setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. External ID of the webhook created for the repository.
   * @return value or {@code null} for none
   */
  public java.lang.String getWebhookId() {
    return webhookId;
  }

  /**
   * Output only. External ID of the webhook created for the repository.
   * @param webhookId webhookId or {@code null} for none
   */
  public GitRepositoryLink setWebhookId(java.lang.String webhookId) {
    this.webhookId = webhookId;
    return this;
  }

  @Override
  public GitRepositoryLink set(String fieldName, Object value) {
    return (GitRepositoryLink) super.set(fieldName, value);
  }

  @Override
  public GitRepositoryLink clone() {
    return (GitRepositoryLink) super.clone();
  }

}
