/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * expressions: "every Monday after December 1" "every morning starting from this Friday". Note: if
 * a recurrent DATE/TIME expression is bounded (limited by a finite interval or a finite count),
 * e.g., "every monday in the next 3 months", "... at 11:00am every Monday for 4 times" the grammar
 * will resolve it to a finite number of |range|s. Next available ID: 17.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingDatetimeRecurrent extends com.google.api.client.json.GenericJson {

  /**
   * How many times it repeats.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer countRestriction;

  /**
   * An arbitrary exception to the recurrence. This can be an absolute point, a relative, a range or
   * a recurrent expression. Examples: * "every Tuesday except for July 13th 2021" * "every Tuesday
   * except for July 13th and November 2nd" * "every second Monday except during the summer" *
   * "everyday except Thursdays" * "every Friday, except from October 1st to October 22nd"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingDatetimeDateTime> exception;

  static {
    // hack to force ProGuard to consider NlpSemanticParsingDatetimeDateTime used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(NlpSemanticParsingDatetimeDateTime.class);
  }

  /**
   * |frequency| is used to represent the frequency of the recurrence over a given recurrent period.
   * E.g. "twice a week", "once a month". An unknown frequency is represented with 0, as in just
   * "repeating".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long frequency;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metadata;

  /**
   * |period| and |unit| specify how often |start_point| or |start_range| repeats. |period| should
   * not be 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long period;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeRange rangeRestriction;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeRelativeDateTime relativeRangeRestriction;

  /**
   * A recurrent expression can be restricted by either a datetime |restriction| or
   * |count_restriction| below. The restriction datetime can be expressed as an explicit range a
   * relative datetime expression, a datetime point or a recurrent datetime. E.g. "every monday
   * [next month]", "every second tuesday [this year]", etc. If |period| is > 0 and |restriction| is
   * not set, repeat indefinitely. Note that this can support recurrent expressions as |restriction|
   * as well. For example in the expression "every monday on [every other month]" where [every other
   * month] is a restriction expressed as a recurrent datetime.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeDateTime restriction;

  /**
   * |start| is used to represent the starting points, ranges or relative datetims in a recurrent
   * expression, for example: "every morning", (range) "everyday at 5 pm", (point) "every second
   * monday" (relative) |start| should never contain a recurrent element.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingDatetimeDateTime> start;

  static {
    // hack to force ProGuard to consider NlpSemanticParsingDatetimeDateTime used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(NlpSemanticParsingDatetimeDateTime.class);
  }

  /**
   * DO NOT USE: deprecated fields soon to be removed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingDatetimeAbsoluteDateTime> startPoint;

  static {
    // hack to force ProGuard to consider NlpSemanticParsingDatetimeAbsoluteDateTime used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(NlpSemanticParsingDatetimeAbsoluteDateTime.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingDatetimeRange> startRange;

  static {
    // hack to force ProGuard to consider NlpSemanticParsingDatetimeRange used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(NlpSemanticParsingDatetimeRange.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingDatetimeRelativeDateTime> startRelative;

  /**
   * The target to be fetched. This could be a named day-of-week or month (e.g., "Monday", "April"),
   * or a date/time unit (e.g., "day", "week", "month").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeTargetToFetch target;

  /**
   * |time_interval| is a time amount or duration, used to described the time interval between the
   * instances of the recurrence. (e.g. "every 3 hours", "every 35 minutes", "every 2 months and 15
   * days", etc)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeQuantity timeInterval;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unit;

  /**
   * How many times it repeats.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCountRestriction() {
    return countRestriction;
  }

  /**
   * How many times it repeats.
   * @param countRestriction countRestriction or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setCountRestriction(java.lang.Integer countRestriction) {
    this.countRestriction = countRestriction;
    return this;
  }

  /**
   * An arbitrary exception to the recurrence. This can be an absolute point, a relative, a range or
   * a recurrent expression. Examples: * "every Tuesday except for July 13th 2021" * "every Tuesday
   * except for July 13th and November 2nd" * "every second Monday except during the summer" *
   * "everyday except Thursdays" * "every Friday, except from October 1st to October 22nd"
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingDatetimeDateTime> getException() {
    return exception;
  }

  /**
   * An arbitrary exception to the recurrence. This can be an absolute point, a relative, a range or
   * a recurrent expression. Examples: * "every Tuesday except for July 13th 2021" * "every Tuesday
   * except for July 13th and November 2nd" * "every second Monday except during the summer" *
   * "everyday except Thursdays" * "every Friday, except from October 1st to October 22nd"
   * @param exception exception or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setException(java.util.List<NlpSemanticParsingDatetimeDateTime> exception) {
    this.exception = exception;
    return this;
  }

  /**
   * |frequency| is used to represent the frequency of the recurrence over a given recurrent period.
   * E.g. "twice a week", "once a month". An unknown frequency is represented with 0, as in just
   * "repeating".
   * @return value or {@code null} for none
   */
  public java.lang.Long getFrequency() {
    return frequency;
  }

  /**
   * |frequency| is used to represent the frequency of the recurrence over a given recurrent period.
   * E.g. "twice a week", "once a month". An unknown frequency is represented with 0, as in just
   * "repeating".
   * @param frequency frequency or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setFrequency(java.lang.Long frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMetadata() {
    return metadata;
  }

  /**
   * @param metadata metadata or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setMetadata(java.lang.String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * |period| and |unit| specify how often |start_point| or |start_range| repeats. |period| should
   * not be 0.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPeriod() {
    return period;
  }

  /**
   * |period| and |unit| specify how often |start_point| or |start_range| repeats. |period| should
   * not be 0.
   * @param period period or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setPeriod(java.lang.Long period) {
    this.period = period;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange getRangeRestriction() {
    return rangeRestriction;
  }

  /**
   * @param rangeRestriction rangeRestriction or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setRangeRestriction(NlpSemanticParsingDatetimeRange rangeRestriction) {
    this.rangeRestriction = rangeRestriction;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRelativeDateTime getRelativeRangeRestriction() {
    return relativeRangeRestriction;
  }

  /**
   * @param relativeRangeRestriction relativeRangeRestriction or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setRelativeRangeRestriction(NlpSemanticParsingDatetimeRelativeDateTime relativeRangeRestriction) {
    this.relativeRangeRestriction = relativeRangeRestriction;
    return this;
  }

  /**
   * A recurrent expression can be restricted by either a datetime |restriction| or
   * |count_restriction| below. The restriction datetime can be expressed as an explicit range a
   * relative datetime expression, a datetime point or a recurrent datetime. E.g. "every monday
   * [next month]", "every second tuesday [this year]", etc. If |period| is > 0 and |restriction| is
   * not set, repeat indefinitely. Note that this can support recurrent expressions as |restriction|
   * as well. For example in the expression "every monday on [every other month]" where [every other
   * month] is a restriction expressed as a recurrent datetime.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime getRestriction() {
    return restriction;
  }

  /**
   * A recurrent expression can be restricted by either a datetime |restriction| or
   * |count_restriction| below. The restriction datetime can be expressed as an explicit range a
   * relative datetime expression, a datetime point or a recurrent datetime. E.g. "every monday
   * [next month]", "every second tuesday [this year]", etc. If |period| is > 0 and |restriction| is
   * not set, repeat indefinitely. Note that this can support recurrent expressions as |restriction|
   * as well. For example in the expression "every monday on [every other month]" where [every other
   * month] is a restriction expressed as a recurrent datetime.
   * @param restriction restriction or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setRestriction(NlpSemanticParsingDatetimeDateTime restriction) {
    this.restriction = restriction;
    return this;
  }

  /**
   * |start| is used to represent the starting points, ranges or relative datetims in a recurrent
   * expression, for example: "every morning", (range) "everyday at 5 pm", (point) "every second
   * monday" (relative) |start| should never contain a recurrent element.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingDatetimeDateTime> getStart() {
    return start;
  }

  /**
   * |start| is used to represent the starting points, ranges or relative datetims in a recurrent
   * expression, for example: "every morning", (range) "everyday at 5 pm", (point) "every second
   * monday" (relative) |start| should never contain a recurrent element.
   * @param start start or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setStart(java.util.List<NlpSemanticParsingDatetimeDateTime> start) {
    this.start = start;
    return this;
  }

  /**
   * DO NOT USE: deprecated fields soon to be removed.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingDatetimeAbsoluteDateTime> getStartPoint() {
    return startPoint;
  }

  /**
   * DO NOT USE: deprecated fields soon to be removed.
   * @param startPoint startPoint or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setStartPoint(java.util.List<NlpSemanticParsingDatetimeAbsoluteDateTime> startPoint) {
    this.startPoint = startPoint;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingDatetimeRange> getStartRange() {
    return startRange;
  }

  /**
   * @param startRange startRange or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setStartRange(java.util.List<NlpSemanticParsingDatetimeRange> startRange) {
    this.startRange = startRange;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingDatetimeRelativeDateTime> getStartRelative() {
    return startRelative;
  }

  /**
   * @param startRelative startRelative or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setStartRelative(java.util.List<NlpSemanticParsingDatetimeRelativeDateTime> startRelative) {
    this.startRelative = startRelative;
    return this;
  }

  /**
   * The target to be fetched. This could be a named day-of-week or month (e.g., "Monday", "April"),
   * or a date/time unit (e.g., "day", "week", "month").
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeTargetToFetch getTarget() {
    return target;
  }

  /**
   * The target to be fetched. This could be a named day-of-week or month (e.g., "Monday", "April"),
   * or a date/time unit (e.g., "day", "week", "month").
   * @param target target or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setTarget(NlpSemanticParsingDatetimeTargetToFetch target) {
    this.target = target;
    return this;
  }

  /**
   * |time_interval| is a time amount or duration, used to described the time interval between the
   * instances of the recurrence. (e.g. "every 3 hours", "every 35 minutes", "every 2 months and 15
   * days", etc)
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeQuantity getTimeInterval() {
    return timeInterval;
  }

  /**
   * |time_interval| is a time amount or duration, used to described the time interval between the
   * instances of the recurrence. (e.g. "every 3 hours", "every 35 minutes", "every 2 months and 15
   * days", etc)
   * @param timeInterval timeInterval or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setTimeInterval(NlpSemanticParsingDatetimeQuantity timeInterval) {
    this.timeInterval = timeInterval;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getUnit() {
    return unit;
  }

  /**
   * @param unit unit or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent setUnit(java.lang.String unit) {
    this.unit = unit;
    return this;
  }

  @Override
  public NlpSemanticParsingDatetimeRecurrent set(String fieldName, Object value) {
    return (NlpSemanticParsingDatetimeRecurrent) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingDatetimeRecurrent clone() {
    return (NlpSemanticParsingDatetimeRecurrent) super.clone();
  }

}
