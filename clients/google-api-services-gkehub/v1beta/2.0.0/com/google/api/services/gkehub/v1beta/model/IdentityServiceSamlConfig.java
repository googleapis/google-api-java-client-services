/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkehub.v1beta.model;

/**
 * Configuration for the SAML Auth flow.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the GKE Hub API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IdentityServiceSamlConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The mapping of additional user attributes like nickname, birthday and address etc..
   * `key` is the name of this additional attribute. `value` is a string presenting as CEL(common
   * expression language, go/cel) used for getting the value from the resources. Take nickname as an
   * example, in this case, `key` is "attribute.nickname" and `value` is "assertion.nickname".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> attributeMapping;

  /**
   * Optional. Prefix to prepend to group name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String groupPrefix;

  /**
   * Optional. The SAML attribute to read groups from. This value is expected to be a string and
   * will be passed along as-is (with the option of being prefixed by the `group_prefix`).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String groupsAttribute;

  /**
   * Required. The list of IdP certificates to validate the SAML response against.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> identityProviderCertificates;

  /**
   * Required. The entity ID of the SAML IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String identityProviderId;

  /**
   * Required. The URI where the SAML IdP exposes the SSO service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String identityProviderSsoUri;

  /**
   * Optional. The SAML attribute to read username from. If unspecified, the username will be read
   * from the NameID element of the assertion in SAML response. This value is expected to be a
   * string and will be passed along as-is (with the option of being prefixed by the `user_prefix`).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userAttribute;

  /**
   * Optional. Prefix to prepend to user name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userPrefix;

  /**
   * Optional. The mapping of additional user attributes like nickname, birthday and address etc..
   * `key` is the name of this additional attribute. `value` is a string presenting as CEL(common
   * expression language, go/cel) used for getting the value from the resources. Take nickname as an
   * example, in this case, `key` is "attribute.nickname" and `value` is "assertion.nickname".
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAttributeMapping() {
    return attributeMapping;
  }

  /**
   * Optional. The mapping of additional user attributes like nickname, birthday and address etc..
   * `key` is the name of this additional attribute. `value` is a string presenting as CEL(common
   * expression language, go/cel) used for getting the value from the resources. Take nickname as an
   * example, in this case, `key` is "attribute.nickname" and `value` is "assertion.nickname".
   * @param attributeMapping attributeMapping or {@code null} for none
   */
  public IdentityServiceSamlConfig setAttributeMapping(java.util.Map<String, java.lang.String> attributeMapping) {
    this.attributeMapping = attributeMapping;
    return this;
  }

  /**
   * Optional. Prefix to prepend to group name.
   * @return value or {@code null} for none
   */
  public java.lang.String getGroupPrefix() {
    return groupPrefix;
  }

  /**
   * Optional. Prefix to prepend to group name.
   * @param groupPrefix groupPrefix or {@code null} for none
   */
  public IdentityServiceSamlConfig setGroupPrefix(java.lang.String groupPrefix) {
    this.groupPrefix = groupPrefix;
    return this;
  }

  /**
   * Optional. The SAML attribute to read groups from. This value is expected to be a string and
   * will be passed along as-is (with the option of being prefixed by the `group_prefix`).
   * @return value or {@code null} for none
   */
  public java.lang.String getGroupsAttribute() {
    return groupsAttribute;
  }

  /**
   * Optional. The SAML attribute to read groups from. This value is expected to be a string and
   * will be passed along as-is (with the option of being prefixed by the `group_prefix`).
   * @param groupsAttribute groupsAttribute or {@code null} for none
   */
  public IdentityServiceSamlConfig setGroupsAttribute(java.lang.String groupsAttribute) {
    this.groupsAttribute = groupsAttribute;
    return this;
  }

  /**
   * Required. The list of IdP certificates to validate the SAML response against.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIdentityProviderCertificates() {
    return identityProviderCertificates;
  }

  /**
   * Required. The list of IdP certificates to validate the SAML response against.
   * @param identityProviderCertificates identityProviderCertificates or {@code null} for none
   */
  public IdentityServiceSamlConfig setIdentityProviderCertificates(java.util.List<java.lang.String> identityProviderCertificates) {
    this.identityProviderCertificates = identityProviderCertificates;
    return this;
  }

  /**
   * Required. The entity ID of the SAML IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getIdentityProviderId() {
    return identityProviderId;
  }

  /**
   * Required. The entity ID of the SAML IdP.
   * @param identityProviderId identityProviderId or {@code null} for none
   */
  public IdentityServiceSamlConfig setIdentityProviderId(java.lang.String identityProviderId) {
    this.identityProviderId = identityProviderId;
    return this;
  }

  /**
   * Required. The URI where the SAML IdP exposes the SSO service.
   * @return value or {@code null} for none
   */
  public java.lang.String getIdentityProviderSsoUri() {
    return identityProviderSsoUri;
  }

  /**
   * Required. The URI where the SAML IdP exposes the SSO service.
   * @param identityProviderSsoUri identityProviderSsoUri or {@code null} for none
   */
  public IdentityServiceSamlConfig setIdentityProviderSsoUri(java.lang.String identityProviderSsoUri) {
    this.identityProviderSsoUri = identityProviderSsoUri;
    return this;
  }

  /**
   * Optional. The SAML attribute to read username from. If unspecified, the username will be read
   * from the NameID element of the assertion in SAML response. This value is expected to be a
   * string and will be passed along as-is (with the option of being prefixed by the `user_prefix`).
   * @return value or {@code null} for none
   */
  public java.lang.String getUserAttribute() {
    return userAttribute;
  }

  /**
   * Optional. The SAML attribute to read username from. If unspecified, the username will be read
   * from the NameID element of the assertion in SAML response. This value is expected to be a
   * string and will be passed along as-is (with the option of being prefixed by the `user_prefix`).
   * @param userAttribute userAttribute or {@code null} for none
   */
  public IdentityServiceSamlConfig setUserAttribute(java.lang.String userAttribute) {
    this.userAttribute = userAttribute;
    return this;
  }

  /**
   * Optional. Prefix to prepend to user name.
   * @return value or {@code null} for none
   */
  public java.lang.String getUserPrefix() {
    return userPrefix;
  }

  /**
   * Optional. Prefix to prepend to user name.
   * @param userPrefix userPrefix or {@code null} for none
   */
  public IdentityServiceSamlConfig setUserPrefix(java.lang.String userPrefix) {
    this.userPrefix = userPrefix;
    return this;
  }

  @Override
  public IdentityServiceSamlConfig set(String fieldName, Object value) {
    return (IdentityServiceSamlConfig) super.set(fieldName, value);
  }

  @Override
  public IdentityServiceSamlConfig clone() {
    return (IdentityServiceSamlConfig) super.clone();
  }

}
