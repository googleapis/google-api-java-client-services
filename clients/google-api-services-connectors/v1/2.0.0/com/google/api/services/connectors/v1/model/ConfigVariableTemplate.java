/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v1.model;

/**
 * ConfigVariableTemplate provides metadata about a `ConfigVariable` that is used in a Connection.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Connectors API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ConfigVariableTemplate extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Authorization code link options. To be populated if `ValueType` is
   * `AUTHORIZATION_CODE`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AuthorizationCodeLink authorizationCodeLink;

  /**
   * Optional. Description.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Optional. Display name of the parameter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Optional. Enum options. To be populated if `ValueType` is `ENUM`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EnumOption> enumOptions;

  /**
   * Optional. enum source denotes the source of api to fill the enum options
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String enumSource;

  /**
   * Optional. Indicates if current template is part of advanced settings
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isAdvanced;

  /**
   * Optional. Key of the config variable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String key;

  /**
   * Optional. Location Tyep denotes where this value should be sent in BYOC connections.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String locationType;

  /**
   * Optional. MultipleSelectConfig represents the multiple options for a config variable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MultipleSelectConfig multipleSelectConfig;

  /**
   * Optional. Flag represents that this `ConfigVariable` must be provided for a connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean required;

  /**
   * Optional. Condition under which a field would be required. The condition can be represented in
   * the form of a logical expression.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LogicalExpression requiredCondition;

  /**
   * Optional. Role grant configuration for the config variable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RoleGrant roleGrant;

  /**
   * Output only. State of the config variable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Optional. Regular expression in RE2 syntax used for validating the `value` of a
   * `ConfigVariable`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String validationRegex;

  /**
   * Optional. Type of the parameter: string, int, bool etc. consider custom type for the benefit
   * for the validation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String valueType;

  /**
   * Optional. Authorization code link options. To be populated if `ValueType` is
   * `AUTHORIZATION_CODE`
   * @return value or {@code null} for none
   */
  public AuthorizationCodeLink getAuthorizationCodeLink() {
    return authorizationCodeLink;
  }

  /**
   * Optional. Authorization code link options. To be populated if `ValueType` is
   * `AUTHORIZATION_CODE`
   * @param authorizationCodeLink authorizationCodeLink or {@code null} for none
   */
  public ConfigVariableTemplate setAuthorizationCodeLink(AuthorizationCodeLink authorizationCodeLink) {
    this.authorizationCodeLink = authorizationCodeLink;
    return this;
  }

  /**
   * Optional. Description.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional. Description.
   * @param description description or {@code null} for none
   */
  public ConfigVariableTemplate setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Display name of the parameter.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Optional. Display name of the parameter.
   * @param displayName displayName or {@code null} for none
   */
  public ConfigVariableTemplate setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. Enum options. To be populated if `ValueType` is `ENUM`
   * @return value or {@code null} for none
   */
  public java.util.List<EnumOption> getEnumOptions() {
    return enumOptions;
  }

  /**
   * Optional. Enum options. To be populated if `ValueType` is `ENUM`
   * @param enumOptions enumOptions or {@code null} for none
   */
  public ConfigVariableTemplate setEnumOptions(java.util.List<EnumOption> enumOptions) {
    this.enumOptions = enumOptions;
    return this;
  }

  /**
   * Optional. enum source denotes the source of api to fill the enum options
   * @return value or {@code null} for none
   */
  public java.lang.String getEnumSource() {
    return enumSource;
  }

  /**
   * Optional. enum source denotes the source of api to fill the enum options
   * @param enumSource enumSource or {@code null} for none
   */
  public ConfigVariableTemplate setEnumSource(java.lang.String enumSource) {
    this.enumSource = enumSource;
    return this;
  }

  /**
   * Optional. Indicates if current template is part of advanced settings
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsAdvanced() {
    return isAdvanced;
  }

  /**
   * Optional. Indicates if current template is part of advanced settings
   * @param isAdvanced isAdvanced or {@code null} for none
   */
  public ConfigVariableTemplate setIsAdvanced(java.lang.Boolean isAdvanced) {
    this.isAdvanced = isAdvanced;
    return this;
  }

  /**
   * Optional. Key of the config variable.
   * @return value or {@code null} for none
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Optional. Key of the config variable.
   * @param key key or {@code null} for none
   */
  public ConfigVariableTemplate setKey(java.lang.String key) {
    this.key = key;
    return this;
  }

  /**
   * Optional. Location Tyep denotes where this value should be sent in BYOC connections.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocationType() {
    return locationType;
  }

  /**
   * Optional. Location Tyep denotes where this value should be sent in BYOC connections.
   * @param locationType locationType or {@code null} for none
   */
  public ConfigVariableTemplate setLocationType(java.lang.String locationType) {
    this.locationType = locationType;
    return this;
  }

  /**
   * Optional. MultipleSelectConfig represents the multiple options for a config variable.
   * @return value or {@code null} for none
   */
  public MultipleSelectConfig getMultipleSelectConfig() {
    return multipleSelectConfig;
  }

  /**
   * Optional. MultipleSelectConfig represents the multiple options for a config variable.
   * @param multipleSelectConfig multipleSelectConfig or {@code null} for none
   */
  public ConfigVariableTemplate setMultipleSelectConfig(MultipleSelectConfig multipleSelectConfig) {
    this.multipleSelectConfig = multipleSelectConfig;
    return this;
  }

  /**
   * Optional. Flag represents that this `ConfigVariable` must be provided for a connection.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequired() {
    return required;
  }

  /**
   * Optional. Flag represents that this `ConfigVariable` must be provided for a connection.
   * @param required required or {@code null} for none
   */
  public ConfigVariableTemplate setRequired(java.lang.Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Optional. Condition under which a field would be required. The condition can be represented in
   * the form of a logical expression.
   * @return value or {@code null} for none
   */
  public LogicalExpression getRequiredCondition() {
    return requiredCondition;
  }

  /**
   * Optional. Condition under which a field would be required. The condition can be represented in
   * the form of a logical expression.
   * @param requiredCondition requiredCondition or {@code null} for none
   */
  public ConfigVariableTemplate setRequiredCondition(LogicalExpression requiredCondition) {
    this.requiredCondition = requiredCondition;
    return this;
  }

  /**
   * Optional. Role grant configuration for the config variable.
   * @return value or {@code null} for none
   */
  public RoleGrant getRoleGrant() {
    return roleGrant;
  }

  /**
   * Optional. Role grant configuration for the config variable.
   * @param roleGrant roleGrant or {@code null} for none
   */
  public ConfigVariableTemplate setRoleGrant(RoleGrant roleGrant) {
    this.roleGrant = roleGrant;
    return this;
  }

  /**
   * Output only. State of the config variable.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. State of the config variable.
   * @param state state or {@code null} for none
   */
  public ConfigVariableTemplate setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Optional. Regular expression in RE2 syntax used for validating the `value` of a
   * `ConfigVariable`.
   * @return value or {@code null} for none
   */
  public java.lang.String getValidationRegex() {
    return validationRegex;
  }

  /**
   * Optional. Regular expression in RE2 syntax used for validating the `value` of a
   * `ConfigVariable`.
   * @param validationRegex validationRegex or {@code null} for none
   */
  public ConfigVariableTemplate setValidationRegex(java.lang.String validationRegex) {
    this.validationRegex = validationRegex;
    return this;
  }

  /**
   * Optional. Type of the parameter: string, int, bool etc. consider custom type for the benefit
   * for the validation.
   * @return value or {@code null} for none
   */
  public java.lang.String getValueType() {
    return valueType;
  }

  /**
   * Optional. Type of the parameter: string, int, bool etc. consider custom type for the benefit
   * for the validation.
   * @param valueType valueType or {@code null} for none
   */
  public ConfigVariableTemplate setValueType(java.lang.String valueType) {
    this.valueType = valueType;
    return this;
  }

  @Override
  public ConfigVariableTemplate set(String fieldName, Object value) {
    return (ConfigVariableTemplate) super.set(fieldName, value);
  }

  @Override
  public ConfigVariableTemplate clone() {
    return (ConfigVariableTemplate) super.clone();
  }

}
