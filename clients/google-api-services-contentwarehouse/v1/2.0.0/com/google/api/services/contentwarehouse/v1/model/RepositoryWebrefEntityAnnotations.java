/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * All annotations for a given concept (in one document collection). Available tags: [10-15], [19-]
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefEntityAnnotations extends com.google.api.client.json.GenericJson {

  /**
   * The overall confidence that the entity is annotated somewhere in the document or query. For
   * WebRef it is computed as a function of the mention confidences weighted by the importance of
   * each mention, where for documents a mention is of greater importance if it occurs in the title,
   * h1 or anchors. For QRef it is just the maximum of the confidence over all mentions. NOTE: You
   * probably want to use the mention-level segment_mentions.mention.confidence_score field instead
   * of this one.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float confidenceScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefAnnotationDebugInfo debugInfo;

  /**
   * Additional information about how the entity relates to the page, for example whether it is a
   * business entity which published the page.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefDetailedEntityScores detailedEntityScores;

  /**
   * All ranges explained by the entity or any other entity it implies. Used in the context of
   * partial query interpretation (go/partial-understanding).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefExplainedRangeInfo explainedRangeInfo;

  /**
   * An entity is marked as implicit if there is no explicit mention of the entity in the content of
   * the page. For instance, all mentions of the entity are in query, url and/or anchors; or the
   * entity has only implicit content mentions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isImplicit;

  /**
   * True if the entity is an MDVC summary entity, i.e. it might not be mentioned directly on the
   * query, but it is the product of resolving a set of explicit annotations. E.g. "2014 FIFA World
   * Cup" can be the summary for the query: [soccer world cup in brazil] even though none of the
   * names of the entity is mentioned on the query. Summary nodes can also be synthetic, i.e. have a
   * /t/ mid, as they represent the intersection between a set of regular annotations. For more
   * information, see http://go/mdvc-output.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isResolution;

  /**
   * All mentions of a given concept grouped by segments. For Webref, there are many different kinds
   * of segment, such as content, title and anchors; while for QRef, there is only one segment
   * called CONTENT. For QRef this field contains the primary output of the annotator, and for
   * WebRef it together with topicality_score does.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefSegmentMentions> segmentMentions;

  /**
   * Rank of the entity when sorted by topicality score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer topicalityRank;

  /**
   * The WebRef topicality score of the entity for this document. This score indicates how related
   * is the entity to the overall topic of the document. See https://goto.google.com/topicality-
   * score for details. This field is not present in QRef output. Note that the topicality and the
   * confidence score are orthogonal measures. It is possible that the annotator is absolutely sure
   * that an entity is mentioned in a given range in the document, but this entity may be unrelated
   * to the overall topic of the page (e.g. the entity "RSS" is mentioned in the footer of
   * appleinsider.com). In this case the mention has a very high confidence score, but very low
   * topicality score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float topicalityScore;

  /**
   * The overall confidence that the entity is annotated somewhere in the document or query. For
   * WebRef it is computed as a function of the mention confidences weighted by the importance of
   * each mention, where for documents a mention is of greater importance if it occurs in the title,
   * h1 or anchors. For QRef it is just the maximum of the confidence over all mentions. NOTE: You
   * probably want to use the mention-level segment_mentions.mention.confidence_score field instead
   * of this one.
   * @return value or {@code null} for none
   */
  public java.lang.Float getConfidenceScore() {
    return confidenceScore;
  }

  /**
   * The overall confidence that the entity is annotated somewhere in the document or query. For
   * WebRef it is computed as a function of the mention confidences weighted by the importance of
   * each mention, where for documents a mention is of greater importance if it occurs in the title,
   * h1 or anchors. For QRef it is just the maximum of the confidence over all mentions. NOTE: You
   * probably want to use the mention-level segment_mentions.mention.confidence_score field instead
   * of this one.
   * @param confidenceScore confidenceScore or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations setConfidenceScore(java.lang.Float confidenceScore) {
    this.confidenceScore = confidenceScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public RepositoryWebrefAnnotationDebugInfo getDebugInfo() {
    return debugInfo;
  }

  /**
   * @param debugInfo debugInfo or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations setDebugInfo(RepositoryWebrefAnnotationDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * Additional information about how the entity relates to the page, for example whether it is a
   * business entity which published the page.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefDetailedEntityScores getDetailedEntityScores() {
    return detailedEntityScores;
  }

  /**
   * Additional information about how the entity relates to the page, for example whether it is a
   * business entity which published the page.
   * @param detailedEntityScores detailedEntityScores or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations setDetailedEntityScores(RepositoryWebrefDetailedEntityScores detailedEntityScores) {
    this.detailedEntityScores = detailedEntityScores;
    return this;
  }

  /**
   * All ranges explained by the entity or any other entity it implies. Used in the context of
   * partial query interpretation (go/partial-understanding).
   * @return value or {@code null} for none
   */
  public RepositoryWebrefExplainedRangeInfo getExplainedRangeInfo() {
    return explainedRangeInfo;
  }

  /**
   * All ranges explained by the entity or any other entity it implies. Used in the context of
   * partial query interpretation (go/partial-understanding).
   * @param explainedRangeInfo explainedRangeInfo or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations setExplainedRangeInfo(RepositoryWebrefExplainedRangeInfo explainedRangeInfo) {
    this.explainedRangeInfo = explainedRangeInfo;
    return this;
  }

  /**
   * An entity is marked as implicit if there is no explicit mention of the entity in the content of
   * the page. For instance, all mentions of the entity are in query, url and/or anchors; or the
   * entity has only implicit content mentions.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsImplicit() {
    return isImplicit;
  }

  /**
   * An entity is marked as implicit if there is no explicit mention of the entity in the content of
   * the page. For instance, all mentions of the entity are in query, url and/or anchors; or the
   * entity has only implicit content mentions.
   * @param isImplicit isImplicit or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations setIsImplicit(java.lang.Boolean isImplicit) {
    this.isImplicit = isImplicit;
    return this;
  }

  /**
   * True if the entity is an MDVC summary entity, i.e. it might not be mentioned directly on the
   * query, but it is the product of resolving a set of explicit annotations. E.g. "2014 FIFA World
   * Cup" can be the summary for the query: [soccer world cup in brazil] even though none of the
   * names of the entity is mentioned on the query. Summary nodes can also be synthetic, i.e. have a
   * /t/ mid, as they represent the intersection between a set of regular annotations. For more
   * information, see http://go/mdvc-output.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsResolution() {
    return isResolution;
  }

  /**
   * True if the entity is an MDVC summary entity, i.e. it might not be mentioned directly on the
   * query, but it is the product of resolving a set of explicit annotations. E.g. "2014 FIFA World
   * Cup" can be the summary for the query: [soccer world cup in brazil] even though none of the
   * names of the entity is mentioned on the query. Summary nodes can also be synthetic, i.e. have a
   * /t/ mid, as they represent the intersection between a set of regular annotations. For more
   * information, see http://go/mdvc-output.
   * @param isResolution isResolution or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations setIsResolution(java.lang.Boolean isResolution) {
    this.isResolution = isResolution;
    return this;
  }

  /**
   * All mentions of a given concept grouped by segments. For Webref, there are many different kinds
   * of segment, such as content, title and anchors; while for QRef, there is only one segment
   * called CONTENT. For QRef this field contains the primary output of the annotator, and for
   * WebRef it together with topicality_score does.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefSegmentMentions> getSegmentMentions() {
    return segmentMentions;
  }

  /**
   * All mentions of a given concept grouped by segments. For Webref, there are many different kinds
   * of segment, such as content, title and anchors; while for QRef, there is only one segment
   * called CONTENT. For QRef this field contains the primary output of the annotator, and for
   * WebRef it together with topicality_score does.
   * @param segmentMentions segmentMentions or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations setSegmentMentions(java.util.List<RepositoryWebrefSegmentMentions> segmentMentions) {
    this.segmentMentions = segmentMentions;
    return this;
  }

  /**
   * Rank of the entity when sorted by topicality score.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTopicalityRank() {
    return topicalityRank;
  }

  /**
   * Rank of the entity when sorted by topicality score.
   * @param topicalityRank topicalityRank or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations setTopicalityRank(java.lang.Integer topicalityRank) {
    this.topicalityRank = topicalityRank;
    return this;
  }

  /**
   * The WebRef topicality score of the entity for this document. This score indicates how related
   * is the entity to the overall topic of the document. See https://goto.google.com/topicality-
   * score for details. This field is not present in QRef output. Note that the topicality and the
   * confidence score are orthogonal measures. It is possible that the annotator is absolutely sure
   * that an entity is mentioned in a given range in the document, but this entity may be unrelated
   * to the overall topic of the page (e.g. the entity "RSS" is mentioned in the footer of
   * appleinsider.com). In this case the mention has a very high confidence score, but very low
   * topicality score.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTopicalityScore() {
    return topicalityScore;
  }

  /**
   * The WebRef topicality score of the entity for this document. This score indicates how related
   * is the entity to the overall topic of the document. See https://goto.google.com/topicality-
   * score for details. This field is not present in QRef output. Note that the topicality and the
   * confidence score are orthogonal measures. It is possible that the annotator is absolutely sure
   * that an entity is mentioned in a given range in the document, but this entity may be unrelated
   * to the overall topic of the page (e.g. the entity "RSS" is mentioned in the footer of
   * appleinsider.com). In this case the mention has a very high confidence score, but very low
   * topicality score.
   * @param topicalityScore topicalityScore or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations setTopicalityScore(java.lang.Float topicalityScore) {
    this.topicalityScore = topicalityScore;
    return this;
  }

  @Override
  public RepositoryWebrefEntityAnnotations set(String fieldName, Object value) {
    return (RepositoryWebrefEntityAnnotations) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefEntityAnnotations clone() {
    return (RepositoryWebrefEntityAnnotations) super.clone();
  }

}
