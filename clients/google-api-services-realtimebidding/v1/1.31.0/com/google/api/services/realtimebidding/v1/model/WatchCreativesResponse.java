/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.realtimebidding.v1.model;

/**
 * A response for the request to receive push notification when a bidder's creatives change status.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Real-time Bidding API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class WatchCreativesResponse extends com.google.api.client.json.GenericJson {

  /**
   * The Pub/Sub subscription that can be used to pull creative status notifications. This would be
   * of the format `projects/{project_id}/subscriptions/{subscription_id}`. Subscription is created
   * with pull delivery. All service accounts belonging to the bidder will have read access to this
   * subscription. Subscriptions that are inactive for more than 90 days will be disabled. Please
   * use watchCreatives to re-enable the subscription.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subscription;

  /**
   * The Pub/Sub topic that will be used to publish creative serving status notifications. This
   * would be of the format `projects/{project_id}/topics/{topic_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String topic;

  /**
   * The Pub/Sub subscription that can be used to pull creative status notifications. This would be
   * of the format `projects/{project_id}/subscriptions/{subscription_id}`. Subscription is created
   * with pull delivery. All service accounts belonging to the bidder will have read access to this
   * subscription. Subscriptions that are inactive for more than 90 days will be disabled. Please
   * use watchCreatives to re-enable the subscription.
   * @return value or {@code null} for none
   */
  public java.lang.String getSubscription() {
    return subscription;
  }

  /**
   * The Pub/Sub subscription that can be used to pull creative status notifications. This would be
   * of the format `projects/{project_id}/subscriptions/{subscription_id}`. Subscription is created
   * with pull delivery. All service accounts belonging to the bidder will have read access to this
   * subscription. Subscriptions that are inactive for more than 90 days will be disabled. Please
   * use watchCreatives to re-enable the subscription.
   * @param subscription subscription or {@code null} for none
   */
  public WatchCreativesResponse setSubscription(java.lang.String subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * The Pub/Sub topic that will be used to publish creative serving status notifications. This
   * would be of the format `projects/{project_id}/topics/{topic_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getTopic() {
    return topic;
  }

  /**
   * The Pub/Sub topic that will be used to publish creative serving status notifications. This
   * would be of the format `projects/{project_id}/topics/{topic_id}`.
   * @param topic topic or {@code null} for none
   */
  public WatchCreativesResponse setTopic(java.lang.String topic) {
    this.topic = topic;
    return this;
  }

  @Override
  public WatchCreativesResponse set(String fieldName, Object value) {
    return (WatchCreativesResponse) super.set(fieldName, value);
  }

  @Override
  public WatchCreativesResponse clone() {
    return (WatchCreativesResponse) super.clone();
  }

}
