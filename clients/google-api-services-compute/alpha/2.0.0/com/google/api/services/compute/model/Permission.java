/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.compute.model;

/**
 * [Deprecated] All fields defined in a permission are ANDed.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Compute Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Permission extends com.google.api.client.json.GenericJson {

  /**
   * Extra custom constraints. The constraints are ANDed together.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PermissionConstraint> constraints;

  /**
   * Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact
   * match, prefix match, and suffix match are supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> hosts;

  /**
   * HTTP method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> methods;

  /**
   * Negate of hosts. Specifies exclusions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> notHosts;

  /**
   * Negate of methods. Specifies exclusions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> notMethods;

  /**
   * Negate of paths. Specifies exclusions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> notPaths;

  /**
   * Negate of ports. Specifies exclusions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> notPorts;

  /**
   * HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> paths;

  /**
   * Port names or numbers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> ports;

  /**
   * Extra custom constraints. The constraints are ANDed together.
   * @return value or {@code null} for none
   */
  public java.util.List<PermissionConstraint> getConstraints() {
    return constraints;
  }

  /**
   * Extra custom constraints. The constraints are ANDed together.
   * @param constraints constraints or {@code null} for none
   */
  public Permission setConstraints(java.util.List<PermissionConstraint> constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact
   * match, prefix match, and suffix match are supported.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getHosts() {
    return hosts;
  }

  /**
   * Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact
   * match, prefix match, and suffix match are supported.
   * @param hosts hosts or {@code null} for none
   */
  public Permission setHosts(java.util.List<java.lang.String> hosts) {
    this.hosts = hosts;
    return this;
  }

  /**
   * HTTP method.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMethods() {
    return methods;
  }

  /**
   * HTTP method.
   * @param methods methods or {@code null} for none
   */
  public Permission setMethods(java.util.List<java.lang.String> methods) {
    this.methods = methods;
    return this;
  }

  /**
   * Negate of hosts. Specifies exclusions.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNotHosts() {
    return notHosts;
  }

  /**
   * Negate of hosts. Specifies exclusions.
   * @param notHosts notHosts or {@code null} for none
   */
  public Permission setNotHosts(java.util.List<java.lang.String> notHosts) {
    this.notHosts = notHosts;
    return this;
  }

  /**
   * Negate of methods. Specifies exclusions.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNotMethods() {
    return notMethods;
  }

  /**
   * Negate of methods. Specifies exclusions.
   * @param notMethods notMethods or {@code null} for none
   */
  public Permission setNotMethods(java.util.List<java.lang.String> notMethods) {
    this.notMethods = notMethods;
    return this;
  }

  /**
   * Negate of paths. Specifies exclusions.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNotPaths() {
    return notPaths;
  }

  /**
   * Negate of paths. Specifies exclusions.
   * @param notPaths notPaths or {@code null} for none
   */
  public Permission setNotPaths(java.util.List<java.lang.String> notPaths) {
    this.notPaths = notPaths;
    return this;
  }

  /**
   * Negate of ports. Specifies exclusions.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNotPorts() {
    return notPorts;
  }

  /**
   * Negate of ports. Specifies exclusions.
   * @param notPorts notPorts or {@code null} for none
   */
  public Permission setNotPorts(java.util.List<java.lang.String> notPorts) {
    this.notPorts = notPorts;
    return this;
  }

  /**
   * HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPaths() {
    return paths;
  }

  /**
   * HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
   * @param paths paths or {@code null} for none
   */
  public Permission setPaths(java.util.List<java.lang.String> paths) {
    this.paths = paths;
    return this;
  }

  /**
   * Port names or numbers.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPorts() {
    return ports;
  }

  /**
   * Port names or numbers.
   * @param ports ports or {@code null} for none
   */
  public Permission setPorts(java.util.List<java.lang.String> ports) {
    this.ports = ports;
    return this;
  }

  @Override
  public Permission set(String fieldName, Object value) {
    return (Permission) super.set(fieldName, value);
  }

  @Override
  public Permission clone() {
    return (Permission) super.clone();
  }

}
