/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.config.v1.model;

/**
 * A set of files in a Git repository.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Infrastructure Manager API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GitSource extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Subdirectory inside the repository. Example: 'staging/my-package'
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String directory;

  /**
   * Optional. Git reference (e.g. branch or tag).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ref;

  /**
   * Optional. Repository URL. Example: 'https://github.com/kubernetes/examples.git'
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String repo;

  /**
   * Optional. Subdirectory inside the repository. Example: 'staging/my-package'
   * @return value or {@code null} for none
   */
  public java.lang.String getDirectory() {
    return directory;
  }

  /**
   * Optional. Subdirectory inside the repository. Example: 'staging/my-package'
   * @param directory directory or {@code null} for none
   */
  public GitSource setDirectory(java.lang.String directory) {
    this.directory = directory;
    return this;
  }

  /**
   * Optional. Git reference (e.g. branch or tag).
   * @return value or {@code null} for none
   */
  public java.lang.String getRef() {
    return ref;
  }

  /**
   * Optional. Git reference (e.g. branch or tag).
   * @param ref ref or {@code null} for none
   */
  public GitSource setRef(java.lang.String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * Optional. Repository URL. Example: 'https://github.com/kubernetes/examples.git'
   * @return value or {@code null} for none
   */
  public java.lang.String getRepo() {
    return repo;
  }

  /**
   * Optional. Repository URL. Example: 'https://github.com/kubernetes/examples.git'
   * @param repo repo or {@code null} for none
   */
  public GitSource setRepo(java.lang.String repo) {
    this.repo = repo;
    return this;
  }

  @Override
  public GitSource set(String fieldName, Object value) {
    return (GitSource) super.set(fieldName, value);
  }

  @Override
  public GitSource clone() {
    return (GitSource) super.clone();
  }

}
