/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dialogflow.v3.model;

/**
 * Entities are extracted from user input and represent parameters that are meaningful to your
 * application. For example, a date range, a proper name such as a geographic location or landmark,
 * and so on. Entities represent actionable data for your application. When you define an entity,
 * you can also include synonyms that all map to that entity. For example, "soft drink", "soda",
 * "pop", and so on. There are three types of entities: * **System** - entities that are defined by
 * the Dialogflow API for common data types such as date, time, currency, and so on. A system entity
 * is represented by the `EntityType` type. * **Custom** - entities that are defined by you that
 * represent actionable data that is meaningful to your application. For example, you could define a
 * `pizza.sauce` entity for red or white pizza sauce, a `pizza.cheese` entity for the different
 * types of cheese on a pizza, a `pizza.topping` entity for different toppings, and so on. A custom
 * entity is represented by the `EntityType` type. * **User** - entities that are built for an
 * individual user such as favorites, preferences, playlists, and so on. A user entity is
 * represented by the SessionEntityType type. For more information about entity types, see the
 * [Dialogflow documentation](https://cloud.google.com/dialogflow/docs/entities-overview).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Dialogflow API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDialogflowCxV3EntityType extends com.google.api.client.json.GenericJson {

  /**
   * Indicates whether the entity type can be automatically expanded.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String autoExpansionMode;

  /**
   * Required. The human-readable name of the entity type, unique within the agent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Enables fuzzy entity extraction during classification.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enableFuzzyExtraction;

  /**
   * The collection of entity entries associated with the entity type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudDialogflowCxV3EntityTypeEntity> entities;

  /**
   * Collection of exceptional words and phrases that shouldn't be matched. For example, if you have
   * a size entity type with entry `giant`(an adjective), you might consider adding `giants`(a noun)
   * as an exclusion. If the kind of entity type is `KIND_MAP`, then the phrases specified by
   * entities and excluded phrases should be mutually exclusive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase> excludedPhrases;

  /**
   * Required. Indicates the kind of entity type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType. Format:
   * `projects//locations//agents//entityTypes/`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Indicates whether parameters of the entity type should be redacted in log. If redaction is
   * enabled, page parameters and intent parameters referring to the entity type will be replaced by
   * parameter name when logging.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean redact;

  /**
   * Indicates whether the entity type can be automatically expanded.
   * @return value or {@code null} for none
   */
  public java.lang.String getAutoExpansionMode() {
    return autoExpansionMode;
  }

  /**
   * Indicates whether the entity type can be automatically expanded.
   * @param autoExpansionMode autoExpansionMode or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3EntityType setAutoExpansionMode(java.lang.String autoExpansionMode) {
    this.autoExpansionMode = autoExpansionMode;
    return this;
  }

  /**
   * Required. The human-readable name of the entity type, unique within the agent.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Required. The human-readable name of the entity type, unique within the agent.
   * @param displayName displayName or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3EntityType setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Enables fuzzy entity extraction during classification.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnableFuzzyExtraction() {
    return enableFuzzyExtraction;
  }

  /**
   * Enables fuzzy entity extraction during classification.
   * @param enableFuzzyExtraction enableFuzzyExtraction or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3EntityType setEnableFuzzyExtraction(java.lang.Boolean enableFuzzyExtraction) {
    this.enableFuzzyExtraction = enableFuzzyExtraction;
    return this;
  }

  /**
   * The collection of entity entries associated with the entity type.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudDialogflowCxV3EntityTypeEntity> getEntities() {
    return entities;
  }

  /**
   * The collection of entity entries associated with the entity type.
   * @param entities entities or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3EntityType setEntities(java.util.List<GoogleCloudDialogflowCxV3EntityTypeEntity> entities) {
    this.entities = entities;
    return this;
  }

  /**
   * Collection of exceptional words and phrases that shouldn't be matched. For example, if you have
   * a size entity type with entry `giant`(an adjective), you might consider adding `giants`(a noun)
   * as an exclusion. If the kind of entity type is `KIND_MAP`, then the phrases specified by
   * entities and excluded phrases should be mutually exclusive.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase> getExcludedPhrases() {
    return excludedPhrases;
  }

  /**
   * Collection of exceptional words and phrases that shouldn't be matched. For example, if you have
   * a size entity type with entry `giant`(an adjective), you might consider adding `giants`(a noun)
   * as an exclusion. If the kind of entity type is `KIND_MAP`, then the phrases specified by
   * entities and excluded phrases should be mutually exclusive.
   * @param excludedPhrases excludedPhrases or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3EntityType setExcludedPhrases(java.util.List<GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase> excludedPhrases) {
    this.excludedPhrases = excludedPhrases;
    return this;
  }

  /**
   * Required. Indicates the kind of entity type.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * Required. Indicates the kind of entity type.
   * @param kind kind or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3EntityType setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType. Format:
   * `projects//locations//agents//entityTypes/`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType. Format:
   * `projects//locations//agents//entityTypes/`.
   * @param name name or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3EntityType setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Indicates whether parameters of the entity type should be redacted in log. If redaction is
   * enabled, page parameters and intent parameters referring to the entity type will be replaced by
   * parameter name when logging.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRedact() {
    return redact;
  }

  /**
   * Indicates whether parameters of the entity type should be redacted in log. If redaction is
   * enabled, page parameters and intent parameters referring to the entity type will be replaced by
   * parameter name when logging.
   * @param redact redact or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3EntityType setRedact(java.lang.Boolean redact) {
    this.redact = redact;
    return this;
  }

  @Override
  public GoogleCloudDialogflowCxV3EntityType set(String fieldName, Object value) {
    return (GoogleCloudDialogflowCxV3EntityType) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDialogflowCxV3EntityType clone() {
    return (GoogleCloudDialogflowCxV3EntityType) super.clone();
  }

}
