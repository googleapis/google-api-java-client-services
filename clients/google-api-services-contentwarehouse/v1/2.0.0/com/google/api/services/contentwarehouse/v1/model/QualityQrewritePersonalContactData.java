/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Contact metadata Next Id: 36
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QualityQrewritePersonalContactData extends com.google.api.client.json.GenericJson {

  /**
   * Tracks the account owner of this contact. See go/cross-account-understanding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QualityQrewriteAccountProvenance accountProvenance;

  /**
   * Other metadata relating with the contact. This field is added so that the value can be copied
   * to the corresponding field |additional_contact_metadata| in person.proto, that later will be
   * logged to Assistant Interaction Event footprint from client side.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.util.Map<String, java.lang.Object>> additionalContactMetadata;

  /**
   * Populated only if matched_name_type is GIVEN_NAME_ALIAS or FULL_NAME_ALIAS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float commonNameAliasConfidence;

  /**
   * Concept id for relationships in query language, e.g. "Mother" in English, "Mère" in French.
   * It's only populated for source = RELATIONSHIP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String conceptId;

  /**
   * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only
   * populated for source = RELATIONSHIP. It is used as the key to store relationship in memory (see
   * http://go/assistant-relationship). For English, this field is not filled, and we will use
   * concept_id field as the relationship key in memory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String conceptIdEn;

  /**
   * TODO(shuaiwang) these are kept here temporarily because aqua regression tests are still
   * referring to them, migrating aqua regression tests to use the new person_data field depends on
   * binary change (i.e. this proto change) so there's a period we need to keep both.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String familyName;

  /**
   * The ffrac score of the suggested contact from Starlight.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double ffracScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long gaiaId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String givenName;

  /**
   * Whether we have address info for this contact. IMPORTANT, READ BEFORE USING THIS FIELD: - This
   * is a temporary solution to export this info for device contacts. - This could only be set for
   * device contacts, contacts from other sources won't have this bit set even if there's address
   * available inside person_data. - This will go away once Starlight supports device contacts,
   * addresses will be available inside person_data the same way as Focus contacts. TODO(shuaiwang)
   * remove after b/20412551
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasAddressForDeviceContacts;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasGplusProfile;

  /**
   * If the contact data is from on device lookup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isFromOnDeviceLookup;

  /**
   * Indicate the contact matches the transliterated query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isTransliteratedMatch;

  /**
   * If the lookup was done using relationship which is visible to guests. This value will only be
   * set if lookup was done using relationship. E.g. user has a guest relationship (doctor) ->
   * (John) And user says "call doctor", then this value will be true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isVisibleToGuestsRelationship;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lookupNameSource;

  /**
   * Populate only if AlternateSource is not NONE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantVerticalsCommonContactMatchSignal matchSignal;

  /**
   * LINT.ThenChange(//depot/google3/assistant/verticals/communication/\
   * fulfillment/proto/contact_logging_enums.proto,
   * //depot/google3/assistant/api/dialog_state/values/person.proto,
   * //depot/google3/assistant/context/proto/person.proto)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String matchedNameType;

  /**
   * Alternate name from recognition that has contact matched. Need this to make name correction
   * history log consistent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String matchedRecognitionAlternateName;

  /**
   * Metadata such as name, email, phone, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppsPeopleOzExternalMergedpeopleapiPerson personData;

  /**
   * Log version of PersonalContactData. Holds e.g. FUZZY match results. It is populated in
   * NamedContactFrame when fuzzy match is performed:
   * http://google3/quality/dialog_manager/frames/contact/named_contact_frame.cc?l=255=331994299
   * Currently only fuzzy ngram match results are logged here.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsCommunicationPersonalContactDataLog personalContactDataLog;

  /**
   * Contains information about a Copley Person resolution (go/copley-people). This field is used to
   * propagate metadata related to the resolved person, used for attribution and logging. Meaningful
   * data (addresses, phone numbers) are copied into person_data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingQRefAnnotation pkgPerson;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pkgReferenceType;

  /**
   * Populate only if AlternateSource is not NONE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float recognitionAlternateScore;

  /**
   * If not none, then it indicates the personal contact data is alternate and how the alternate is
   * fulfilled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recognitionAlternateSource;

  /**
   * Lexical information for relationships in query language, e.g. "Mother" in English, "Mère" in
   * French. It's only populated for source = RELATIONSHIP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CopleyLexicalMetadata relationshipLexicalInfo;

  /**
   * Resolved relationship names and contact pointers from Assistant Memory. This field is populated
   * into both relationship annotation (source = RELATIONSHIP) and Focus/device contacts retrieved
   * by that contact name. The data from Assistant Memory comes from two different columns:
   * ASSISTANT_SETTINGS and PWS_CONTACT_ANNOTATION. We support multiple people with same
   * relationship (e.g. multiple brothers) by using a repeated relationship_memory field. Examples
   * are at go/person-subgrammar-relationship.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<QualityQrewriteRelationshipMemoryData> relationshipMemory;

  /**
   * Gaia ID of the user this contact belongs to. Only populates if contact is shared from another
   * user. See go/shared-contacts-assistant. E.g. user A triggers the request and uses user B's
   * contact data (which is marked as visible to user A). This field will be populated with user B's
   * gaia id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long sharedContactOwnerGaiaId;

  /**
   * LINT.ThenChange(//depot/google3/assistant/verticals/communication/\
   * fulfillment/proto/contact_logging_enums.proto,
   * //depot/google3/assistant/api/dialog_state/values/person.proto) Data source of the contact
   * data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * Tracks the account owner of this contact. See go/cross-account-understanding.
   * @return value or {@code null} for none
   */
  public QualityQrewriteAccountProvenance getAccountProvenance() {
    return accountProvenance;
  }

  /**
   * Tracks the account owner of this contact. See go/cross-account-understanding.
   * @param accountProvenance accountProvenance or {@code null} for none
   */
  public QualityQrewritePersonalContactData setAccountProvenance(QualityQrewriteAccountProvenance accountProvenance) {
    this.accountProvenance = accountProvenance;
    return this;
  }

  /**
   * Other metadata relating with the contact. This field is added so that the value can be copied
   * to the corresponding field |additional_contact_metadata| in person.proto, that later will be
   * logged to Assistant Interaction Event footprint from client side.
   * @return value or {@code null} for none
   */
  public java.util.List<java.util.Map<String, java.lang.Object>> getAdditionalContactMetadata() {
    return additionalContactMetadata;
  }

  /**
   * Other metadata relating with the contact. This field is added so that the value can be copied
   * to the corresponding field |additional_contact_metadata| in person.proto, that later will be
   * logged to Assistant Interaction Event footprint from client side.
   * @param additionalContactMetadata additionalContactMetadata or {@code null} for none
   */
  public QualityQrewritePersonalContactData setAdditionalContactMetadata(java.util.List<java.util.Map<String, java.lang.Object>> additionalContactMetadata) {
    this.additionalContactMetadata = additionalContactMetadata;
    return this;
  }

  /**
   * Populated only if matched_name_type is GIVEN_NAME_ALIAS or FULL_NAME_ALIAS.
   * @return value or {@code null} for none
   */
  public java.lang.Float getCommonNameAliasConfidence() {
    return commonNameAliasConfidence;
  }

  /**
   * Populated only if matched_name_type is GIVEN_NAME_ALIAS or FULL_NAME_ALIAS.
   * @param commonNameAliasConfidence commonNameAliasConfidence or {@code null} for none
   */
  public QualityQrewritePersonalContactData setCommonNameAliasConfidence(java.lang.Float commonNameAliasConfidence) {
    this.commonNameAliasConfidence = commonNameAliasConfidence;
    return this;
  }

  /**
   * Concept id for relationships in query language, e.g. "Mother" in English, "Mère" in French.
   * It's only populated for source = RELATIONSHIP.
   * @return value or {@code null} for none
   */
  public java.lang.String getConceptId() {
    return conceptId;
  }

  /**
   * Concept id for relationships in query language, e.g. "Mother" in English, "Mère" in French.
   * It's only populated for source = RELATIONSHIP.
   * @param conceptId conceptId or {@code null} for none
   */
  public QualityQrewritePersonalContactData setConceptId(java.lang.String conceptId) {
    this.conceptId = conceptId;
    return this;
  }

  /**
   * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only
   * populated for source = RELATIONSHIP. It is used as the key to store relationship in memory (see
   * http://go/assistant-relationship). For English, this field is not filled, and we will use
   * concept_id field as the relationship key in memory.
   * @return value or {@code null} for none
   */
  public java.lang.String getConceptIdEn() {
    return conceptIdEn;
  }

  /**
   * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only
   * populated for source = RELATIONSHIP. It is used as the key to store relationship in memory (see
   * http://go/assistant-relationship). For English, this field is not filled, and we will use
   * concept_id field as the relationship key in memory.
   * @param conceptIdEn conceptIdEn or {@code null} for none
   */
  public QualityQrewritePersonalContactData setConceptIdEn(java.lang.String conceptIdEn) {
    this.conceptIdEn = conceptIdEn;
    return this;
  }

  /**
   * TODO(shuaiwang) these are kept here temporarily because aqua regression tests are still
   * referring to them, migrating aqua regression tests to use the new person_data field depends on
   * binary change (i.e. this proto change) so there's a period we need to keep both.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * TODO(shuaiwang) these are kept here temporarily because aqua regression tests are still
   * referring to them, migrating aqua regression tests to use the new person_data field depends on
   * binary change (i.e. this proto change) so there's a period we need to keep both.
   * @param displayName displayName or {@code null} for none
   */
  public QualityQrewritePersonalContactData setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getFamilyName() {
    return familyName;
  }

  /**
   * @param familyName familyName or {@code null} for none
   */
  public QualityQrewritePersonalContactData setFamilyName(java.lang.String familyName) {
    this.familyName = familyName;
    return this;
  }

  /**
   * The ffrac score of the suggested contact from Starlight.
   * @return value or {@code null} for none
   */
  public java.lang.Double getFfracScore() {
    return ffracScore;
  }

  /**
   * The ffrac score of the suggested contact from Starlight.
   * @param ffracScore ffracScore or {@code null} for none
   */
  public QualityQrewritePersonalContactData setFfracScore(java.lang.Double ffracScore) {
    this.ffracScore = ffracScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getGaiaId() {
    return gaiaId;
  }

  /**
   * @param gaiaId gaiaId or {@code null} for none
   */
  public QualityQrewritePersonalContactData setGaiaId(java.lang.Long gaiaId) {
    this.gaiaId = gaiaId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGivenName() {
    return givenName;
  }

  /**
   * @param givenName givenName or {@code null} for none
   */
  public QualityQrewritePersonalContactData setGivenName(java.lang.String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * Whether we have address info for this contact. IMPORTANT, READ BEFORE USING THIS FIELD: - This
   * is a temporary solution to export this info for device contacts. - This could only be set for
   * device contacts, contacts from other sources won't have this bit set even if there's address
   * available inside person_data. - This will go away once Starlight supports device contacts,
   * addresses will be available inside person_data the same way as Focus contacts. TODO(shuaiwang)
   * remove after b/20412551
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasAddressForDeviceContacts() {
    return hasAddressForDeviceContacts;
  }

  /**
   * Whether we have address info for this contact. IMPORTANT, READ BEFORE USING THIS FIELD: - This
   * is a temporary solution to export this info for device contacts. - This could only be set for
   * device contacts, contacts from other sources won't have this bit set even if there's address
   * available inside person_data. - This will go away once Starlight supports device contacts,
   * addresses will be available inside person_data the same way as Focus contacts. TODO(shuaiwang)
   * remove after b/20412551
   * @param hasAddressForDeviceContacts hasAddressForDeviceContacts or {@code null} for none
   */
  public QualityQrewritePersonalContactData setHasAddressForDeviceContacts(java.lang.Boolean hasAddressForDeviceContacts) {
    this.hasAddressForDeviceContacts = hasAddressForDeviceContacts;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasGplusProfile() {
    return hasGplusProfile;
  }

  /**
   * @param hasGplusProfile hasGplusProfile or {@code null} for none
   */
  public QualityQrewritePersonalContactData setHasGplusProfile(java.lang.Boolean hasGplusProfile) {
    this.hasGplusProfile = hasGplusProfile;
    return this;
  }

  /**
   * If the contact data is from on device lookup.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsFromOnDeviceLookup() {
    return isFromOnDeviceLookup;
  }

  /**
   * If the contact data is from on device lookup.
   * @param isFromOnDeviceLookup isFromOnDeviceLookup or {@code null} for none
   */
  public QualityQrewritePersonalContactData setIsFromOnDeviceLookup(java.lang.Boolean isFromOnDeviceLookup) {
    this.isFromOnDeviceLookup = isFromOnDeviceLookup;
    return this;
  }

  /**
   * Indicate the contact matches the transliterated query.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsTransliteratedMatch() {
    return isTransliteratedMatch;
  }

  /**
   * Indicate the contact matches the transliterated query.
   * @param isTransliteratedMatch isTransliteratedMatch or {@code null} for none
   */
  public QualityQrewritePersonalContactData setIsTransliteratedMatch(java.lang.Boolean isTransliteratedMatch) {
    this.isTransliteratedMatch = isTransliteratedMatch;
    return this;
  }

  /**
   * If the lookup was done using relationship which is visible to guests. This value will only be
   * set if lookup was done using relationship. E.g. user has a guest relationship (doctor) ->
   * (John) And user says "call doctor", then this value will be true.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsVisibleToGuestsRelationship() {
    return isVisibleToGuestsRelationship;
  }

  /**
   * If the lookup was done using relationship which is visible to guests. This value will only be
   * set if lookup was done using relationship. E.g. user has a guest relationship (doctor) ->
   * (John) And user says "call doctor", then this value will be true.
   * @param isVisibleToGuestsRelationship isVisibleToGuestsRelationship or {@code null} for none
   */
  public QualityQrewritePersonalContactData setIsVisibleToGuestsRelationship(java.lang.Boolean isVisibleToGuestsRelationship) {
    this.isVisibleToGuestsRelationship = isVisibleToGuestsRelationship;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLookupNameSource() {
    return lookupNameSource;
  }

  /**
   * @param lookupNameSource lookupNameSource or {@code null} for none
   */
  public QualityQrewritePersonalContactData setLookupNameSource(java.lang.String lookupNameSource) {
    this.lookupNameSource = lookupNameSource;
    return this;
  }

  /**
   * Populate only if AlternateSource is not NONE.
   * @return value or {@code null} for none
   */
  public AssistantVerticalsCommonContactMatchSignal getMatchSignal() {
    return matchSignal;
  }

  /**
   * Populate only if AlternateSource is not NONE.
   * @param matchSignal matchSignal or {@code null} for none
   */
  public QualityQrewritePersonalContactData setMatchSignal(AssistantVerticalsCommonContactMatchSignal matchSignal) {
    this.matchSignal = matchSignal;
    return this;
  }

  /**
   * LINT.ThenChange(//depot/google3/assistant/verticals/communication/\
   * fulfillment/proto/contact_logging_enums.proto,
   * //depot/google3/assistant/api/dialog_state/values/person.proto,
   * //depot/google3/assistant/context/proto/person.proto)
   * @return value or {@code null} for none
   */
  public java.lang.String getMatchedNameType() {
    return matchedNameType;
  }

  /**
   * LINT.ThenChange(//depot/google3/assistant/verticals/communication/\
   * fulfillment/proto/contact_logging_enums.proto,
   * //depot/google3/assistant/api/dialog_state/values/person.proto,
   * //depot/google3/assistant/context/proto/person.proto)
   * @param matchedNameType matchedNameType or {@code null} for none
   */
  public QualityQrewritePersonalContactData setMatchedNameType(java.lang.String matchedNameType) {
    this.matchedNameType = matchedNameType;
    return this;
  }

  /**
   * Alternate name from recognition that has contact matched. Need this to make name correction
   * history log consistent.
   * @return value or {@code null} for none
   */
  public java.lang.String getMatchedRecognitionAlternateName() {
    return matchedRecognitionAlternateName;
  }

  /**
   * Alternate name from recognition that has contact matched. Need this to make name correction
   * history log consistent.
   * @param matchedRecognitionAlternateName matchedRecognitionAlternateName or {@code null} for none
   */
  public QualityQrewritePersonalContactData setMatchedRecognitionAlternateName(java.lang.String matchedRecognitionAlternateName) {
    this.matchedRecognitionAlternateName = matchedRecognitionAlternateName;
    return this;
  }

  /**
   * Metadata such as name, email, phone, etc.
   * @return value or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPerson getPersonData() {
    return personData;
  }

  /**
   * Metadata such as name, email, phone, etc.
   * @param personData personData or {@code null} for none
   */
  public QualityQrewritePersonalContactData setPersonData(AppsPeopleOzExternalMergedpeopleapiPerson personData) {
    this.personData = personData;
    return this;
  }

  /**
   * Log version of PersonalContactData. Holds e.g. FUZZY match results. It is populated in
   * NamedContactFrame when fuzzy match is performed:
   * http://google3/quality/dialog_manager/frames/contact/named_contact_frame.cc?l=255=331994299
   * Currently only fuzzy ngram match results are logged here.
   * @return value or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog getPersonalContactDataLog() {
    return personalContactDataLog;
  }

  /**
   * Log version of PersonalContactData. Holds e.g. FUZZY match results. It is populated in
   * NamedContactFrame when fuzzy match is performed:
   * http://google3/quality/dialog_manager/frames/contact/named_contact_frame.cc?l=255=331994299
   * Currently only fuzzy ngram match results are logged here.
   * @param personalContactDataLog personalContactDataLog or {@code null} for none
   */
  public QualityQrewritePersonalContactData setPersonalContactDataLog(AssistantLogsCommunicationPersonalContactDataLog personalContactDataLog) {
    this.personalContactDataLog = personalContactDataLog;
    return this;
  }

  /**
   * Contains information about a Copley Person resolution (go/copley-people). This field is used to
   * propagate metadata related to the resolved person, used for attribution and logging. Meaningful
   * data (addresses, phone numbers) are copied into person_data.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingQRefAnnotation getPkgPerson() {
    return pkgPerson;
  }

  /**
   * Contains information about a Copley Person resolution (go/copley-people). This field is used to
   * propagate metadata related to the resolved person, used for attribution and logging. Meaningful
   * data (addresses, phone numbers) are copied into person_data.
   * @param pkgPerson pkgPerson or {@code null} for none
   */
  public QualityQrewritePersonalContactData setPkgPerson(NlpSemanticParsingQRefAnnotation pkgPerson) {
    this.pkgPerson = pkgPerson;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getPkgReferenceType() {
    return pkgReferenceType;
  }

  /**
   * @param pkgReferenceType pkgReferenceType or {@code null} for none
   */
  public QualityQrewritePersonalContactData setPkgReferenceType(java.lang.String pkgReferenceType) {
    this.pkgReferenceType = pkgReferenceType;
    return this;
  }

  /**
   * Populate only if AlternateSource is not NONE.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRecognitionAlternateScore() {
    return recognitionAlternateScore;
  }

  /**
   * Populate only if AlternateSource is not NONE.
   * @param recognitionAlternateScore recognitionAlternateScore or {@code null} for none
   */
  public QualityQrewritePersonalContactData setRecognitionAlternateScore(java.lang.Float recognitionAlternateScore) {
    this.recognitionAlternateScore = recognitionAlternateScore;
    return this;
  }

  /**
   * If not none, then it indicates the personal contact data is alternate and how the alternate is
   * fulfilled.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecognitionAlternateSource() {
    return recognitionAlternateSource;
  }

  /**
   * If not none, then it indicates the personal contact data is alternate and how the alternate is
   * fulfilled.
   * @param recognitionAlternateSource recognitionAlternateSource or {@code null} for none
   */
  public QualityQrewritePersonalContactData setRecognitionAlternateSource(java.lang.String recognitionAlternateSource) {
    this.recognitionAlternateSource = recognitionAlternateSource;
    return this;
  }

  /**
   * Lexical information for relationships in query language, e.g. "Mother" in English, "Mère" in
   * French. It's only populated for source = RELATIONSHIP.
   * @return value or {@code null} for none
   */
  public CopleyLexicalMetadata getRelationshipLexicalInfo() {
    return relationshipLexicalInfo;
  }

  /**
   * Lexical information for relationships in query language, e.g. "Mother" in English, "Mère" in
   * French. It's only populated for source = RELATIONSHIP.
   * @param relationshipLexicalInfo relationshipLexicalInfo or {@code null} for none
   */
  public QualityQrewritePersonalContactData setRelationshipLexicalInfo(CopleyLexicalMetadata relationshipLexicalInfo) {
    this.relationshipLexicalInfo = relationshipLexicalInfo;
    return this;
  }

  /**
   * Resolved relationship names and contact pointers from Assistant Memory. This field is populated
   * into both relationship annotation (source = RELATIONSHIP) and Focus/device contacts retrieved
   * by that contact name. The data from Assistant Memory comes from two different columns:
   * ASSISTANT_SETTINGS and PWS_CONTACT_ANNOTATION. We support multiple people with same
   * relationship (e.g. multiple brothers) by using a repeated relationship_memory field. Examples
   * are at go/person-subgrammar-relationship.
   * @return value or {@code null} for none
   */
  public java.util.List<QualityQrewriteRelationshipMemoryData> getRelationshipMemory() {
    return relationshipMemory;
  }

  /**
   * Resolved relationship names and contact pointers from Assistant Memory. This field is populated
   * into both relationship annotation (source = RELATIONSHIP) and Focus/device contacts retrieved
   * by that contact name. The data from Assistant Memory comes from two different columns:
   * ASSISTANT_SETTINGS and PWS_CONTACT_ANNOTATION. We support multiple people with same
   * relationship (e.g. multiple brothers) by using a repeated relationship_memory field. Examples
   * are at go/person-subgrammar-relationship.
   * @param relationshipMemory relationshipMemory or {@code null} for none
   */
  public QualityQrewritePersonalContactData setRelationshipMemory(java.util.List<QualityQrewriteRelationshipMemoryData> relationshipMemory) {
    this.relationshipMemory = relationshipMemory;
    return this;
  }

  /**
   * Gaia ID of the user this contact belongs to. Only populates if contact is shared from another
   * user. See go/shared-contacts-assistant. E.g. user A triggers the request and uses user B's
   * contact data (which is marked as visible to user A). This field will be populated with user B's
   * gaia id.
   * @return value or {@code null} for none
   */
  public java.lang.Long getSharedContactOwnerGaiaId() {
    return sharedContactOwnerGaiaId;
  }

  /**
   * Gaia ID of the user this contact belongs to. Only populates if contact is shared from another
   * user. See go/shared-contacts-assistant. E.g. user A triggers the request and uses user B's
   * contact data (which is marked as visible to user A). This field will be populated with user B's
   * gaia id.
   * @param sharedContactOwnerGaiaId sharedContactOwnerGaiaId or {@code null} for none
   */
  public QualityQrewritePersonalContactData setSharedContactOwnerGaiaId(java.lang.Long sharedContactOwnerGaiaId) {
    this.sharedContactOwnerGaiaId = sharedContactOwnerGaiaId;
    return this;
  }

  /**
   * LINT.ThenChange(//depot/google3/assistant/verticals/communication/\
   * fulfillment/proto/contact_logging_enums.proto,
   * //depot/google3/assistant/api/dialog_state/values/person.proto) Data source of the contact
   * data.
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * LINT.ThenChange(//depot/google3/assistant/verticals/communication/\
   * fulfillment/proto/contact_logging_enums.proto,
   * //depot/google3/assistant/api/dialog_state/values/person.proto) Data source of the contact
   * data.
   * @param source source or {@code null} for none
   */
  public QualityQrewritePersonalContactData setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  @Override
  public QualityQrewritePersonalContactData set(String fieldName, Object value) {
    return (QualityQrewritePersonalContactData) super.set(fieldName, value);
  }

  @Override
  public QualityQrewritePersonalContactData clone() {
    return (QualityQrewritePersonalContactData) super.clone();
  }

}
