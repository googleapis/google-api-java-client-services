/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * Backup Options for the Database.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DbBackupConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. If set to true, enables automatic backups on the database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoBackupEnabled;

  /**
   * Optional. The day of the week on which the full backup should be performed on the database. If
   * no value is provided, it will default to Sunday.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String autoFullBackupDay;

  /**
   * Optional. The window in which the full backup should be performed on the database. If no value
   * is provided, the default is anytime.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String autoFullBackupWindow;

  /**
   * Optional. The window in which the incremental backup should be performed on the database. If no
   * value is provided, the default is anytime except the auto full backup day.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String autoIncrementalBackupWindow;

  /**
   * Optional. This defines when the backups will be deleted after Database termination.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String backupDeletionPolicy;

  /**
   * Optional. Details of the database backup destinations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<BackupDestinationDetails> backupDestinationDetails;

  static {
    // hack to force ProGuard to consider BackupDestinationDetails used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(BackupDestinationDetails.class);
  }

  /**
   * Optional. The number of days an automatic backup is retained before being automatically
   * deleted. This value determines the earliest point in time to which a database can be restored.
   * Min: 1, Max: 60.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer retentionPeriodDays;

  /**
   * Optional. If set to true, enables automatic backups on the database.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoBackupEnabled() {
    return autoBackupEnabled;
  }

  /**
   * Optional. If set to true, enables automatic backups on the database.
   * @param autoBackupEnabled autoBackupEnabled or {@code null} for none
   */
  public DbBackupConfig setAutoBackupEnabled(java.lang.Boolean autoBackupEnabled) {
    this.autoBackupEnabled = autoBackupEnabled;
    return this;
  }

  /**
   * Optional. The day of the week on which the full backup should be performed on the database. If
   * no value is provided, it will default to Sunday.
   * @return value or {@code null} for none
   */
  public java.lang.String getAutoFullBackupDay() {
    return autoFullBackupDay;
  }

  /**
   * Optional. The day of the week on which the full backup should be performed on the database. If
   * no value is provided, it will default to Sunday.
   * @param autoFullBackupDay autoFullBackupDay or {@code null} for none
   */
  public DbBackupConfig setAutoFullBackupDay(java.lang.String autoFullBackupDay) {
    this.autoFullBackupDay = autoFullBackupDay;
    return this;
  }

  /**
   * Optional. The window in which the full backup should be performed on the database. If no value
   * is provided, the default is anytime.
   * @return value or {@code null} for none
   */
  public java.lang.String getAutoFullBackupWindow() {
    return autoFullBackupWindow;
  }

  /**
   * Optional. The window in which the full backup should be performed on the database. If no value
   * is provided, the default is anytime.
   * @param autoFullBackupWindow autoFullBackupWindow or {@code null} for none
   */
  public DbBackupConfig setAutoFullBackupWindow(java.lang.String autoFullBackupWindow) {
    this.autoFullBackupWindow = autoFullBackupWindow;
    return this;
  }

  /**
   * Optional. The window in which the incremental backup should be performed on the database. If no
   * value is provided, the default is anytime except the auto full backup day.
   * @return value or {@code null} for none
   */
  public java.lang.String getAutoIncrementalBackupWindow() {
    return autoIncrementalBackupWindow;
  }

  /**
   * Optional. The window in which the incremental backup should be performed on the database. If no
   * value is provided, the default is anytime except the auto full backup day.
   * @param autoIncrementalBackupWindow autoIncrementalBackupWindow or {@code null} for none
   */
  public DbBackupConfig setAutoIncrementalBackupWindow(java.lang.String autoIncrementalBackupWindow) {
    this.autoIncrementalBackupWindow = autoIncrementalBackupWindow;
    return this;
  }

  /**
   * Optional. This defines when the backups will be deleted after Database termination.
   * @return value or {@code null} for none
   */
  public java.lang.String getBackupDeletionPolicy() {
    return backupDeletionPolicy;
  }

  /**
   * Optional. This defines when the backups will be deleted after Database termination.
   * @param backupDeletionPolicy backupDeletionPolicy or {@code null} for none
   */
  public DbBackupConfig setBackupDeletionPolicy(java.lang.String backupDeletionPolicy) {
    this.backupDeletionPolicy = backupDeletionPolicy;
    return this;
  }

  /**
   * Optional. Details of the database backup destinations.
   * @return value or {@code null} for none
   */
  public java.util.List<BackupDestinationDetails> getBackupDestinationDetails() {
    return backupDestinationDetails;
  }

  /**
   * Optional. Details of the database backup destinations.
   * @param backupDestinationDetails backupDestinationDetails or {@code null} for none
   */
  public DbBackupConfig setBackupDestinationDetails(java.util.List<BackupDestinationDetails> backupDestinationDetails) {
    this.backupDestinationDetails = backupDestinationDetails;
    return this;
  }

  /**
   * Optional. The number of days an automatic backup is retained before being automatically
   * deleted. This value determines the earliest point in time to which a database can be restored.
   * Min: 1, Max: 60.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRetentionPeriodDays() {
    return retentionPeriodDays;
  }

  /**
   * Optional. The number of days an automatic backup is retained before being automatically
   * deleted. This value determines the earliest point in time to which a database can be restored.
   * Min: 1, Max: 60.
   * @param retentionPeriodDays retentionPeriodDays or {@code null} for none
   */
  public DbBackupConfig setRetentionPeriodDays(java.lang.Integer retentionPeriodDays) {
    this.retentionPeriodDays = retentionPeriodDays;
    return this;
  }

  @Override
  public DbBackupConfig set(String fieldName, Object value) {
    return (DbBackupConfig) super.set(fieldName, value);
  }

  @Override
  public DbBackupConfig clone() {
    return (DbBackupConfig) super.clone();
  }

}
