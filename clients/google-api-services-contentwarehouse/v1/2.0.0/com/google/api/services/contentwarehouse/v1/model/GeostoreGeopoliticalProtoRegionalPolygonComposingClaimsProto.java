/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The polygon composition recipe for a specific region's view of this feature's geometry, based on
 * disputed area claims asserted by this country. Note that the included / excluded claims listed
 * for a given region's view of this feature may not match up exactly with which claims the region
 * recognizes / does not recognize for this feature. Claims may only be included or excluded for
 * regions that themselves are a party to the dispute, i.e. a region's view of itself will include
 * its own claims, and a region's view of another feature will exclude its own claims. See current
 * Geopolitical policy at go/geopolitical-policy-primer.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreGeopoliticalProtoRegionalPolygonComposingClaimsProto extends com.google.api.client.json.GenericJson {

  /**
   * Region code (or other identifier) for the region.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String regionCode;

  /**
   * TYPE_DISPUTED_AREAs claimed by this feature excluded from this region's view of the feature's
   * geometry. (The TDAs must have polygonal geometry and be referenced in this feature's
   * political.claim field.) The polygons of these claims will be subtracted to this feature's base
   * polygon when this feature is viewed from the specified region.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> regionExcludedClaims;

  static {
    // hack to force ProGuard to consider GeostoreFeatureIdProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreFeatureIdProto.class);
  }

  /**
   * TYPE_DISPUTED_AREAs claimed by this feature and included in this region's view of the feature's
   * geometry. (The TDAs must have polygonal geometry and be referenced in this feature's
   * political.claim field.) The polygons of these claims will be added to this feature's base
   * polygon when this feature is viewed from the specified region.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> regionIncludedClaims;

  static {
    // hack to force ProGuard to consider GeostoreFeatureIdProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreFeatureIdProto.class);
  }

  /**
   * Region code (or other identifier) for the region.
   * @return value or {@code null} for none
   */
  public java.lang.String getRegionCode() {
    return regionCode;
  }

  /**
   * Region code (or other identifier) for the region.
   * @param regionCode regionCode or {@code null} for none
   */
  public GeostoreGeopoliticalProtoRegionalPolygonComposingClaimsProto setRegionCode(java.lang.String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * TYPE_DISPUTED_AREAs claimed by this feature excluded from this region's view of the feature's
   * geometry. (The TDAs must have polygonal geometry and be referenced in this feature's
   * political.claim field.) The polygons of these claims will be subtracted to this feature's base
   * polygon when this feature is viewed from the specified region.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getRegionExcludedClaims() {
    return regionExcludedClaims;
  }

  /**
   * TYPE_DISPUTED_AREAs claimed by this feature excluded from this region's view of the feature's
   * geometry. (The TDAs must have polygonal geometry and be referenced in this feature's
   * political.claim field.) The polygons of these claims will be subtracted to this feature's base
   * polygon when this feature is viewed from the specified region.
   * @param regionExcludedClaims regionExcludedClaims or {@code null} for none
   */
  public GeostoreGeopoliticalProtoRegionalPolygonComposingClaimsProto setRegionExcludedClaims(java.util.List<GeostoreFeatureIdProto> regionExcludedClaims) {
    this.regionExcludedClaims = regionExcludedClaims;
    return this;
  }

  /**
   * TYPE_DISPUTED_AREAs claimed by this feature and included in this region's view of the feature's
   * geometry. (The TDAs must have polygonal geometry and be referenced in this feature's
   * political.claim field.) The polygons of these claims will be added to this feature's base
   * polygon when this feature is viewed from the specified region.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getRegionIncludedClaims() {
    return regionIncludedClaims;
  }

  /**
   * TYPE_DISPUTED_AREAs claimed by this feature and included in this region's view of the feature's
   * geometry. (The TDAs must have polygonal geometry and be referenced in this feature's
   * political.claim field.) The polygons of these claims will be added to this feature's base
   * polygon when this feature is viewed from the specified region.
   * @param regionIncludedClaims regionIncludedClaims or {@code null} for none
   */
  public GeostoreGeopoliticalProtoRegionalPolygonComposingClaimsProto setRegionIncludedClaims(java.util.List<GeostoreFeatureIdProto> regionIncludedClaims) {
    this.regionIncludedClaims = regionIncludedClaims;
    return this;
  }

  @Override
  public GeostoreGeopoliticalProtoRegionalPolygonComposingClaimsProto set(String fieldName, Object value) {
    return (GeostoreGeopoliticalProtoRegionalPolygonComposingClaimsProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreGeopoliticalProtoRegionalPolygonComposingClaimsProto clone() {
    return (GeostoreGeopoliticalProtoRegionalPolygonComposingClaimsProto) super.clone();
  }

}
