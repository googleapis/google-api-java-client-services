/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1.model;

/**
 * The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not
 * present, the database is secured by the default Google encryption key.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleFirestoreAdminV1CmekConfig extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Currently in-use [KMS key versions](https://cloud.google.com/kms/docs/resource-
   * hierarchy#key_versions). During [key rotation](https://cloud.google.com/kms/docs/key-rotation),
   * there can be multiple in-use key versions. The expected format is `projects/{project_id}/locati
   * ons/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`
   * .
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> activeKeyVersion;

  /**
   * Required. Only keys in the same location as this database are allowed to be used for
   * encryption. For Firestore's nam5 multi-region, this corresponds to Cloud KMS multi-region us.
   * For Firestore's eur3 multi-region, this corresponds to Cloud KMS multi-region europe. See
   * https://cloud.google.com/kms/docs/locations. The expected format is
   * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kmsKeyName;

  /**
   * Output only. Currently in-use [KMS key versions](https://cloud.google.com/kms/docs/resource-
   * hierarchy#key_versions). During [key rotation](https://cloud.google.com/kms/docs/key-rotation),
   * there can be multiple in-use key versions. The expected format is `projects/{project_id}/locati
   * ons/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`
   * .
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getActiveKeyVersion() {
    return activeKeyVersion;
  }

  /**
   * Output only. Currently in-use [KMS key versions](https://cloud.google.com/kms/docs/resource-
   * hierarchy#key_versions). During [key rotation](https://cloud.google.com/kms/docs/key-rotation),
   * there can be multiple in-use key versions. The expected format is `projects/{project_id}/locati
   * ons/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`
   * .
   * @param activeKeyVersion activeKeyVersion or {@code null} for none
   */
  public GoogleFirestoreAdminV1CmekConfig setActiveKeyVersion(java.util.List<java.lang.String> activeKeyVersion) {
    this.activeKeyVersion = activeKeyVersion;
    return this;
  }

  /**
   * Required. Only keys in the same location as this database are allowed to be used for
   * encryption. For Firestore's nam5 multi-region, this corresponds to Cloud KMS multi-region us.
   * For Firestore's eur3 multi-region, this corresponds to Cloud KMS multi-region europe. See
   * https://cloud.google.com/kms/docs/locations. The expected format is
   * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getKmsKeyName() {
    return kmsKeyName;
  }

  /**
   * Required. Only keys in the same location as this database are allowed to be used for
   * encryption. For Firestore's nam5 multi-region, this corresponds to Cloud KMS multi-region us.
   * For Firestore's eur3 multi-region, this corresponds to Cloud KMS multi-region europe. See
   * https://cloud.google.com/kms/docs/locations. The expected format is
   * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   * @param kmsKeyName kmsKeyName or {@code null} for none
   */
  public GoogleFirestoreAdminV1CmekConfig setKmsKeyName(java.lang.String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  @Override
  public GoogleFirestoreAdminV1CmekConfig set(String fieldName, Object value) {
    return (GoogleFirestoreAdminV1CmekConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleFirestoreAdminV1CmekConfig clone() {
    return (GoogleFirestoreAdminV1CmekConfig) super.clone();
  }

}
