/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A structure that represents a comment. Fields 1 through 6 are designed to store responses from
 * the 3P YouTube Data API (see https://developers.google.com/youtube/v3/docs/comments). Field 7 is
 * used to store the Google-internal representation of the comment; if it is populated, then all
 * other fields may be empty. Next ID: 8
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoContentSearchCommentAnchorSetFeaturesComment extends com.google.api.client.json.GenericJson {

  /**
   * The ID that YouTube uses to uniquely identify the comment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String commentId;

  /**
   * The total number of likes (positive ratings) the comment has received.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer likeCount;

  /**
   * The MiniStanza object that represents the comment. If populated, all other fields in this
   * message may be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private YoutubeCommentsClusteringMiniStanza miniStanza;

  /**
   * The date and time when the comment was orignally published, specified in ISO 8601 format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String publishedAt;

  /**
   * The comment's text, in HTML.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String textDisplay;

  /**
   * The original, raw text of the comment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String textOriginal;

  /**
   * The date and time when the comment was last updated, specified in ISO 8601 format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String updatedAt;

  /**
   * The ID that YouTube uses to uniquely identify the comment.
   * @return value or {@code null} for none
   */
  public java.lang.String getCommentId() {
    return commentId;
  }

  /**
   * The ID that YouTube uses to uniquely identify the comment.
   * @param commentId commentId or {@code null} for none
   */
  public VideoContentSearchCommentAnchorSetFeaturesComment setCommentId(java.lang.String commentId) {
    this.commentId = commentId;
    return this;
  }

  /**
   * The total number of likes (positive ratings) the comment has received.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLikeCount() {
    return likeCount;
  }

  /**
   * The total number of likes (positive ratings) the comment has received.
   * @param likeCount likeCount or {@code null} for none
   */
  public VideoContentSearchCommentAnchorSetFeaturesComment setLikeCount(java.lang.Integer likeCount) {
    this.likeCount = likeCount;
    return this;
  }

  /**
   * The MiniStanza object that represents the comment. If populated, all other fields in this
   * message may be empty.
   * @return value or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza getMiniStanza() {
    return miniStanza;
  }

  /**
   * The MiniStanza object that represents the comment. If populated, all other fields in this
   * message may be empty.
   * @param miniStanza miniStanza or {@code null} for none
   */
  public VideoContentSearchCommentAnchorSetFeaturesComment setMiniStanza(YoutubeCommentsClusteringMiniStanza miniStanza) {
    this.miniStanza = miniStanza;
    return this;
  }

  /**
   * The date and time when the comment was orignally published, specified in ISO 8601 format.
   * @return value or {@code null} for none
   */
  public java.lang.String getPublishedAt() {
    return publishedAt;
  }

  /**
   * The date and time when the comment was orignally published, specified in ISO 8601 format.
   * @param publishedAt publishedAt or {@code null} for none
   */
  public VideoContentSearchCommentAnchorSetFeaturesComment setPublishedAt(java.lang.String publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * The comment's text, in HTML.
   * @return value or {@code null} for none
   */
  public java.lang.String getTextDisplay() {
    return textDisplay;
  }

  /**
   * The comment's text, in HTML.
   * @param textDisplay textDisplay or {@code null} for none
   */
  public VideoContentSearchCommentAnchorSetFeaturesComment setTextDisplay(java.lang.String textDisplay) {
    this.textDisplay = textDisplay;
    return this;
  }

  /**
   * The original, raw text of the comment.
   * @return value or {@code null} for none
   */
  public java.lang.String getTextOriginal() {
    return textOriginal;
  }

  /**
   * The original, raw text of the comment.
   * @param textOriginal textOriginal or {@code null} for none
   */
  public VideoContentSearchCommentAnchorSetFeaturesComment setTextOriginal(java.lang.String textOriginal) {
    this.textOriginal = textOriginal;
    return this;
  }

  /**
   * The date and time when the comment was last updated, specified in ISO 8601 format.
   * @return value or {@code null} for none
   */
  public java.lang.String getUpdatedAt() {
    return updatedAt;
  }

  /**
   * The date and time when the comment was last updated, specified in ISO 8601 format.
   * @param updatedAt updatedAt or {@code null} for none
   */
  public VideoContentSearchCommentAnchorSetFeaturesComment setUpdatedAt(java.lang.String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  @Override
  public VideoContentSearchCommentAnchorSetFeaturesComment set(String fieldName, Object value) {
    return (VideoContentSearchCommentAnchorSetFeaturesComment) super.set(fieldName, value);
  }

  @Override
  public VideoContentSearchCommentAnchorSetFeaturesComment clone() {
    return (VideoContentSearchCommentAnchorSetFeaturesComment) super.clone();
  }

}
