/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.trafficdirector.v2.model;

/**
 * Envoy's RDS implementation fills this message with all currently loaded routes, as described by
 * their RouteConfiguration objects. Static routes that are either defined in the bootstrap
 * configuration or defined inline while configuring listeners are separated from those configured
 * dynamically via RDS. Route configuration information can be used to recreate an Envoy
 * configuration by populating all routes as static routes or by returning them in RDS responses.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Traffic Director API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RoutesConfigDump extends com.google.api.client.json.GenericJson {

  /**
   * The dynamically loaded route configs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DynamicRouteConfig> dynamicRouteConfigs;

  static {
    // hack to force ProGuard to consider DynamicRouteConfig used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DynamicRouteConfig.class);
  }

  /**
   * The statically loaded route configs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StaticRouteConfig> staticRouteConfigs;

  /**
   * The dynamically loaded route configs.
   * @return value or {@code null} for none
   */
  public java.util.List<DynamicRouteConfig> getDynamicRouteConfigs() {
    return dynamicRouteConfigs;
  }

  /**
   * The dynamically loaded route configs.
   * @param dynamicRouteConfigs dynamicRouteConfigs or {@code null} for none
   */
  public RoutesConfigDump setDynamicRouteConfigs(java.util.List<DynamicRouteConfig> dynamicRouteConfigs) {
    this.dynamicRouteConfigs = dynamicRouteConfigs;
    return this;
  }

  /**
   * The statically loaded route configs.
   * @return value or {@code null} for none
   */
  public java.util.List<StaticRouteConfig> getStaticRouteConfigs() {
    return staticRouteConfigs;
  }

  /**
   * The statically loaded route configs.
   * @param staticRouteConfigs staticRouteConfigs or {@code null} for none
   */
  public RoutesConfigDump setStaticRouteConfigs(java.util.List<StaticRouteConfig> staticRouteConfigs) {
    this.staticRouteConfigs = staticRouteConfigs;
    return this;
  }

  @Override
  public RoutesConfigDump set(String fieldName, Object value) {
    return (RoutesConfigDump) super.set(fieldName, value);
  }

  @Override
  public RoutesConfigDump clone() {
    return (RoutesConfigDump) super.clone();
  }

}
