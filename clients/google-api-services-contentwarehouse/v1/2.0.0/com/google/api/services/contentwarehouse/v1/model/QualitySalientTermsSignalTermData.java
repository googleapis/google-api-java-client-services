/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * SignalTermData is signal-specific term-level information. Stores mostly internal data as it is
 * one of the primary data structures used in the populators.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QualitySalientTermsSignalTermData extends com.google.api.client.json.GenericJson {

  /**
   * The deduction of bigram counts from its unigram children. This field is only available in debug
   * mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float bigramDiscountTf;

  /**
   * How much we trust this bigram. For bigrams only. Range: [0.0, 1.0] This field is only available
   * in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float bigramness;

  /**
   * Measures how topical this term is to a particular signal. A term like "lincoln" in the Abraham
   * Lincoln's Wikipedia page should have a centrality close to 1.0 while non-central terms like
   * "florida" should have a centrality close to 0.0. Range: [0.0, 1.0] This field is only available
   * in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float centrality;

  /**
   * The final term frequency for a particular term. This field is only available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float correctedTf;

  /**
   * The term frequency we were expecting for a term given its IDF. Range: [0, observed_volume] This
   * field is only available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float expectedTf;

  /**
   * Global NPMI. For bigrams only. This is a measure of the quality of bigrams calculated using
   * IDF. Range: [-1.0, 1.0] This field is only available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float globalNpmi;

  /**
   * The IDF of the label of a particular term. For a canonical term, this is the mean IDF of its
   * originals, weighted by their observed TF. This field is only available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float idf;

  /**
   * Whether or not this term is a bigram. This field is only available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isBigram;

  /**
   * Raw string that identifies a particular term. This field is only available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String label;

  /**
   * Local NPMI (normalized pointwise mutual information). For bigrams only. This is a measure of
   * the quality of bigrams calculated using observed TF. Range: [-1.0, 1.0] This field is only
   * available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float localNpmi;

  /**
   * The observed term frequency in a particular signal. This field is only available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float observedTf;

  /**
   * The list of the original terms for a canonical. This is used in the pipeline and it is not
   * present in the final output. This field is only available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<QualitySalientTermsSignalTermData> originalTerm;

  /**
   * The raw term frequency in a particular signal. This field is only available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float rawTf;

  /**
   * The measure of how important this term is in this signal. Range: [0.0, 1.0] This field is only
   * available in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float salience;

  /**
   * source is the type of the signal of this SignalTermData.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * The deduction of bigram counts from its unigram children. This field is only available in debug
   * mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getBigramDiscountTf() {
    return bigramDiscountTf;
  }

  /**
   * The deduction of bigram counts from its unigram children. This field is only available in debug
   * mode.
   * @param bigramDiscountTf bigramDiscountTf or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setBigramDiscountTf(java.lang.Float bigramDiscountTf) {
    this.bigramDiscountTf = bigramDiscountTf;
    return this;
  }

  /**
   * How much we trust this bigram. For bigrams only. Range: [0.0, 1.0] This field is only available
   * in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getBigramness() {
    return bigramness;
  }

  /**
   * How much we trust this bigram. For bigrams only. Range: [0.0, 1.0] This field is only available
   * in debug mode.
   * @param bigramness bigramness or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setBigramness(java.lang.Float bigramness) {
    this.bigramness = bigramness;
    return this;
  }

  /**
   * Measures how topical this term is to a particular signal. A term like "lincoln" in the Abraham
   * Lincoln's Wikipedia page should have a centrality close to 1.0 while non-central terms like
   * "florida" should have a centrality close to 0.0. Range: [0.0, 1.0] This field is only available
   * in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getCentrality() {
    return centrality;
  }

  /**
   * Measures how topical this term is to a particular signal. A term like "lincoln" in the Abraham
   * Lincoln's Wikipedia page should have a centrality close to 1.0 while non-central terms like
   * "florida" should have a centrality close to 0.0. Range: [0.0, 1.0] This field is only available
   * in debug mode.
   * @param centrality centrality or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setCentrality(java.lang.Float centrality) {
    this.centrality = centrality;
    return this;
  }

  /**
   * The final term frequency for a particular term. This field is only available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getCorrectedTf() {
    return correctedTf;
  }

  /**
   * The final term frequency for a particular term. This field is only available in debug mode.
   * @param correctedTf correctedTf or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setCorrectedTf(java.lang.Float correctedTf) {
    this.correctedTf = correctedTf;
    return this;
  }

  /**
   * The term frequency we were expecting for a term given its IDF. Range: [0, observed_volume] This
   * field is only available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getExpectedTf() {
    return expectedTf;
  }

  /**
   * The term frequency we were expecting for a term given its IDF. Range: [0, observed_volume] This
   * field is only available in debug mode.
   * @param expectedTf expectedTf or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setExpectedTf(java.lang.Float expectedTf) {
    this.expectedTf = expectedTf;
    return this;
  }

  /**
   * Global NPMI. For bigrams only. This is a measure of the quality of bigrams calculated using
   * IDF. Range: [-1.0, 1.0] This field is only available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getGlobalNpmi() {
    return globalNpmi;
  }

  /**
   * Global NPMI. For bigrams only. This is a measure of the quality of bigrams calculated using
   * IDF. Range: [-1.0, 1.0] This field is only available in debug mode.
   * @param globalNpmi globalNpmi or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setGlobalNpmi(java.lang.Float globalNpmi) {
    this.globalNpmi = globalNpmi;
    return this;
  }

  /**
   * The IDF of the label of a particular term. For a canonical term, this is the mean IDF of its
   * originals, weighted by their observed TF. This field is only available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getIdf() {
    return idf;
  }

  /**
   * The IDF of the label of a particular term. For a canonical term, this is the mean IDF of its
   * originals, weighted by their observed TF. This field is only available in debug mode.
   * @param idf idf or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setIdf(java.lang.Float idf) {
    this.idf = idf;
    return this;
  }

  /**
   * Whether or not this term is a bigram. This field is only available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsBigram() {
    return isBigram;
  }

  /**
   * Whether or not this term is a bigram. This field is only available in debug mode.
   * @param isBigram isBigram or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setIsBigram(java.lang.Boolean isBigram) {
    this.isBigram = isBigram;
    return this;
  }

  /**
   * Raw string that identifies a particular term. This field is only available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * Raw string that identifies a particular term. This field is only available in debug mode.
   * @param label label or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setLabel(java.lang.String label) {
    this.label = label;
    return this;
  }

  /**
   * Local NPMI (normalized pointwise mutual information). For bigrams only. This is a measure of
   * the quality of bigrams calculated using observed TF. Range: [-1.0, 1.0] This field is only
   * available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getLocalNpmi() {
    return localNpmi;
  }

  /**
   * Local NPMI (normalized pointwise mutual information). For bigrams only. This is a measure of
   * the quality of bigrams calculated using observed TF. Range: [-1.0, 1.0] This field is only
   * available in debug mode.
   * @param localNpmi localNpmi or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setLocalNpmi(java.lang.Float localNpmi) {
    this.localNpmi = localNpmi;
    return this;
  }

  /**
   * The observed term frequency in a particular signal. This field is only available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getObservedTf() {
    return observedTf;
  }

  /**
   * The observed term frequency in a particular signal. This field is only available in debug mode.
   * @param observedTf observedTf or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setObservedTf(java.lang.Float observedTf) {
    this.observedTf = observedTf;
    return this;
  }

  /**
   * The list of the original terms for a canonical. This is used in the pipeline and it is not
   * present in the final output. This field is only available in debug mode.
   * @return value or {@code null} for none
   */
  public java.util.List<QualitySalientTermsSignalTermData> getOriginalTerm() {
    return originalTerm;
  }

  /**
   * The list of the original terms for a canonical. This is used in the pipeline and it is not
   * present in the final output. This field is only available in debug mode.
   * @param originalTerm originalTerm or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setOriginalTerm(java.util.List<QualitySalientTermsSignalTermData> originalTerm) {
    this.originalTerm = originalTerm;
    return this;
  }

  /**
   * The raw term frequency in a particular signal. This field is only available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRawTf() {
    return rawTf;
  }

  /**
   * The raw term frequency in a particular signal. This field is only available in debug mode.
   * @param rawTf rawTf or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setRawTf(java.lang.Float rawTf) {
    this.rawTf = rawTf;
    return this;
  }

  /**
   * The measure of how important this term is in this signal. Range: [0.0, 1.0] This field is only
   * available in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSalience() {
    return salience;
  }

  /**
   * The measure of how important this term is in this signal. Range: [0.0, 1.0] This field is only
   * available in debug mode.
   * @param salience salience or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setSalience(java.lang.Float salience) {
    this.salience = salience;
    return this;
  }

  /**
   * source is the type of the signal of this SignalTermData.
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * source is the type of the signal of this SignalTermData.
   * @param source source or {@code null} for none
   */
  public QualitySalientTermsSignalTermData setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  @Override
  public QualitySalientTermsSignalTermData set(String fieldName, Object value) {
    return (QualitySalientTermsSignalTermData) super.set(fieldName, value);
  }

  @Override
  public QualitySalientTermsSignalTermData clone() {
    return (QualitySalientTermsSignalTermData) super.clone();
  }

}
