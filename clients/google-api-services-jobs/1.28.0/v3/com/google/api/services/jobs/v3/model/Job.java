/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.jobs.v3.model;

/**
 * A Job resource represents a job posting (also referred to as a "job listing" or "job
 * requisition"). A job belongs to a Company, which is the hiring entity responsible for the job.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Talent Solution API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Job extends com.google.api.client.json.GenericJson {

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * Location(s) where the employer is looking to hire for this job posting.
   *
   * Specifying the full street address(es) of the hiring location enables better API results,
   * especially job searches by commute time.
   *
   * At most 50 locations are allowed for best search performance. If a job has more locations, it
   * is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes
   * 'ReqA-1', 'ReqA-2', etc.) as multiple jobs with the same company_name, language_code and
   * requisition_id are not allowed. If the original requisition_id must be preserved, a custom
   * field should be used for storage. It is also suggested to group the locations that close to
   * each other in the same job for better search experience.
   *
   * The maximum number of allowed characters is 500.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> addresses;

  /**
   * Required. At least one field within ApplicationInfo must be specified.
   *
   * Job application information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ApplicationInfo applicationInfo;

  /**
   * Output only. Display name of the company listing the job.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String companyDisplayName;

  /**
   * Required.
   *
   * The resource name of the company listing the job, such as "projects/api-test-
   * project/companies/foo".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String companyName;

  /**
   * Optional.
   *
   * Job compensation information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CompensationInfo compensationInfo;

  /**
   * Optional.
   *
   * A map of fields to hold both filterable and non-filterable custom job attributes that are not
   * covered by the provided structured fields.
   *
   * The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*. For
   * example, key0LikeThis or KEY_1_LIKE_THIS.
   *
   * At most 100 filterable and at most 100 unfilterable keys are supported. For filterable
   * `string_values`, across all keys at most 200 values are allowed, with each string no more than
   * 255 characters. For unfilterable `string_values`, the maximum total size of `string_values`
   * across all keys is 50KB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, CustomAttribute> customAttributes;

  static {
    // hack to force ProGuard to consider CustomAttribute used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CustomAttribute.class);
  }

  /**
   * Optional.
   *
   * The desired education degrees for the job, such as Bachelors, Masters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> degreeTypes;

  /**
   * Optional.
   *
   * The department or functional area within the company with the open position.
   *
   * The maximum number of allowed characters is 255.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String department;

  /**
   * Output only. Derived details about the job posting.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private JobDerivedInfo derivedInfo;

  /**
   * Required.
   *
   * The description of the job, which typically includes a multi-paragraph description of the
   * company and related information. Separate fields are provided on the job object for
   * responsibilities, qualifications, and other job characteristics. Use of these separate job
   * fields is recommended.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 100,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Optional.
   *
   * The employment type(s) of a job, for example, full time or part time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> employmentTypes;

  /**
   * Optional.
   *
   * A description of bonus, commission, and other compensation incentives associated with the job
   * not including salary or pay.
   *
   * The maximum number of allowed characters is 10,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String incentives;

  /**
   * Optional.
   *
   * The benefits included with the job.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> jobBenefits;

  /**
   * Optional.
   *
   * The end timestamp of the job. Typically this field is used for contracting engagements. Invalid
   * timestamps are ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String jobEndTime;

  /**
   * Optional.
   *
   * The experience level associated with the job, such as "Entry Level".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String jobLevel;

  /**
   * Optional.
   *
   * The start timestamp of the job in UTC time zone. Typically this field is used for contracting
   * engagements. Invalid timestamps are ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String jobStartTime;

  /**
   * Optional.
   *
   * The language of the posting. This field is distinct from any requirements for fluency that are
   * associated with the job.
   *
   * Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information,
   * see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external"
   * target="_blank" }.
   *
   * If this field is unspecified and Job.description is present, detected language code based on
   * Job.description is assigned, otherwise defaults to 'en_US'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String languageCode;

  /**
   * Required during job update.
   *
   * The resource name for the job. This is generated by the service when a job is created.
   *
   * The format is "projects/{project_id}/jobs/{job_id}", for example, "projects/api-test-
   * project/jobs/1234".
   *
   * Use of this field in job queries and API calls is preferred over the use of requisition_id
   * since this value is unique.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The timestamp when this job posting was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String postingCreateTime;

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it
   * no longer appears in search results. The expired job can't be deleted or listed by the
   * DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the
   * UpdateJob API. An expired job can be updated and opened again by using a future expiration
   * timestamp. Updating an expired job fails if there is another existing open job with same
   * company_name, language_code and requisition_id.
   *
   * The expired jobs are retained in our system for 90 days. However, the overall expired job count
   * cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with
   * earlier expire time are cleaned first. Expired jobs are no longer accessible after they are
   * cleaned out.
   *
   * Invalid timestamps are ignored, and treated as expire time not provided.
   *
   * Timestamp before the instant request is made is considered valid, the job will be treated as
   * expired immediately.
   *
   * If this value is not provided at the time of job creation or is invalid, the job posting
   * expires after 30 days from the job's creation time. For example, if the job was created on
   * 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31
   * 13:00AM UTC.
   *
   * If this value is not provided on job update, it depends on the field masks set by
   * UpdateJobRequest.update_mask. If the field masks include expiry_time, or the masks are empty
   * meaning that every field is updated, the job posting expires after 30 days from the job's last
   * update time. Otherwise the expiration date isn't updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String postingExpireTime;

  /**
   * Optional.
   *
   * The timestamp this job posting was most recently published. The default value is the time the
   * request arrives at the server. Invalid timestamps are ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String postingPublishTime;

  /**
   * Optional.
   *
   * The job PostingRegion (for example, state, country) throughout which the job is available. If
   * this field is set, a LocationFilter in a search query within the job region finds this job
   * posting if an exact location match isn't specified. If this field is set to
   * PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the
   * same location level as this field is strongly recommended.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postingRegion;

  /**
   * Output only. The timestamp when this job posting was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String postingUpdateTime;

  /**
   * Optional.
   *
   * Options for job processing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ProcessingOptions processingOptions;

  /**
   * Optional.
   *
   * A promotion value of the job, as determined by the client. The value determines the sort order
   * of the jobs returned when searching for jobs using the featured jobs search call, with higher
   * promotional values being returned first and ties being resolved by relevance sort. Only the
   * jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH.
   *
   * Default value is 0, and negative values are treated as 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer promotionValue;

  /**
   * Optional.
   *
   * A description of the qualifications required to perform the job. The use of this field is
   * recommended as an alternative to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String qualifications;

  /**
   * Required.
   *
   * The requisition ID, also referred to as the posting ID, assigned by the client to identify a
   * job. This field is intended to be used by clients for client identification and tracking of
   * postings. A job is not allowed to be created if there is another job with the same
   * [company_name], language_code and requisition_id.
   *
   * The maximum number of allowed characters is 255.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String requisitionId;

  /**
   * Optional.
   *
   * A description of job responsibilities. The use of this field is recommended as an alternative
   * to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String responsibilities;

  /**
   * Required.
   *
   * The title of the job, such as "Software Engineer"
   *
   * The maximum number of allowed characters is 500.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String title;

  /**
   * Optional.
   *
   * The visibility of the job.
   *
   * Defaults to Visibility.ACCOUNT_ONLY if not specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String visibility;

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * Location(s) where the employer is looking to hire for this job posting.
   *
   * Specifying the full street address(es) of the hiring location enables better API results,
   * especially job searches by commute time.
   *
   * At most 50 locations are allowed for best search performance. If a job has more locations, it
   * is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes
   * 'ReqA-1', 'ReqA-2', etc.) as multiple jobs with the same company_name, language_code and
   * requisition_id are not allowed. If the original requisition_id must be preserved, a custom
   * field should be used for storage. It is also suggested to group the locations that close to
   * each other in the same job for better search experience.
   *
   * The maximum number of allowed characters is 500.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAddresses() {
    return addresses;
  }

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * Location(s) where the employer is looking to hire for this job posting.
   *
   * Specifying the full street address(es) of the hiring location enables better API results,
   * especially job searches by commute time.
   *
   * At most 50 locations are allowed for best search performance. If a job has more locations, it
   * is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes
   * 'ReqA-1', 'ReqA-2', etc.) as multiple jobs with the same company_name, language_code and
   * requisition_id are not allowed. If the original requisition_id must be preserved, a custom
   * field should be used for storage. It is also suggested to group the locations that close to
   * each other in the same job for better search experience.
   *
   * The maximum number of allowed characters is 500.
   * @param addresses addresses or {@code null} for none
   */
  public Job setAddresses(java.util.List<java.lang.String> addresses) {
    this.addresses = addresses;
    return this;
  }

  /**
   * Required. At least one field within ApplicationInfo must be specified.
   *
   * Job application information.
   * @return value or {@code null} for none
   */
  public ApplicationInfo getApplicationInfo() {
    return applicationInfo;
  }

  /**
   * Required. At least one field within ApplicationInfo must be specified.
   *
   * Job application information.
   * @param applicationInfo applicationInfo or {@code null} for none
   */
  public Job setApplicationInfo(ApplicationInfo applicationInfo) {
    this.applicationInfo = applicationInfo;
    return this;
  }

  /**
   * Output only. Display name of the company listing the job.
   * @return value or {@code null} for none
   */
  public java.lang.String getCompanyDisplayName() {
    return companyDisplayName;
  }

  /**
   * Output only. Display name of the company listing the job.
   * @param companyDisplayName companyDisplayName or {@code null} for none
   */
  public Job setCompanyDisplayName(java.lang.String companyDisplayName) {
    this.companyDisplayName = companyDisplayName;
    return this;
  }

  /**
   * Required.
   *
   * The resource name of the company listing the job, such as "projects/api-test-
   * project/companies/foo".
   * @return value or {@code null} for none
   */
  public java.lang.String getCompanyName() {
    return companyName;
  }

  /**
   * Required.
   *
   * The resource name of the company listing the job, such as "projects/api-test-
   * project/companies/foo".
   * @param companyName companyName or {@code null} for none
   */
  public Job setCompanyName(java.lang.String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Optional.
   *
   * Job compensation information.
   * @return value or {@code null} for none
   */
  public CompensationInfo getCompensationInfo() {
    return compensationInfo;
  }

  /**
   * Optional.
   *
   * Job compensation information.
   * @param compensationInfo compensationInfo or {@code null} for none
   */
  public Job setCompensationInfo(CompensationInfo compensationInfo) {
    this.compensationInfo = compensationInfo;
    return this;
  }

  /**
   * Optional.
   *
   * A map of fields to hold both filterable and non-filterable custom job attributes that are not
   * covered by the provided structured fields.
   *
   * The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*. For
   * example, key0LikeThis or KEY_1_LIKE_THIS.
   *
   * At most 100 filterable and at most 100 unfilterable keys are supported. For filterable
   * `string_values`, across all keys at most 200 values are allowed, with each string no more than
   * 255 characters. For unfilterable `string_values`, the maximum total size of `string_values`
   * across all keys is 50KB.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, CustomAttribute> getCustomAttributes() {
    return customAttributes;
  }

  /**
   * Optional.
   *
   * A map of fields to hold both filterable and non-filterable custom job attributes that are not
   * covered by the provided structured fields.
   *
   * The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*. For
   * example, key0LikeThis or KEY_1_LIKE_THIS.
   *
   * At most 100 filterable and at most 100 unfilterable keys are supported. For filterable
   * `string_values`, across all keys at most 200 values are allowed, with each string no more than
   * 255 characters. For unfilterable `string_values`, the maximum total size of `string_values`
   * across all keys is 50KB.
   * @param customAttributes customAttributes or {@code null} for none
   */
  public Job setCustomAttributes(java.util.Map<String, CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  /**
   * Optional.
   *
   * The desired education degrees for the job, such as Bachelors, Masters.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDegreeTypes() {
    return degreeTypes;
  }

  /**
   * Optional.
   *
   * The desired education degrees for the job, such as Bachelors, Masters.
   * @param degreeTypes degreeTypes or {@code null} for none
   */
  public Job setDegreeTypes(java.util.List<java.lang.String> degreeTypes) {
    this.degreeTypes = degreeTypes;
    return this;
  }

  /**
   * Optional.
   *
   * The department or functional area within the company with the open position.
   *
   * The maximum number of allowed characters is 255.
   * @return value or {@code null} for none
   */
  public java.lang.String getDepartment() {
    return department;
  }

  /**
   * Optional.
   *
   * The department or functional area within the company with the open position.
   *
   * The maximum number of allowed characters is 255.
   * @param department department or {@code null} for none
   */
  public Job setDepartment(java.lang.String department) {
    this.department = department;
    return this;
  }

  /**
   * Output only. Derived details about the job posting.
   * @return value or {@code null} for none
   */
  public JobDerivedInfo getDerivedInfo() {
    return derivedInfo;
  }

  /**
   * Output only. Derived details about the job posting.
   * @param derivedInfo derivedInfo or {@code null} for none
   */
  public Job setDerivedInfo(JobDerivedInfo derivedInfo) {
    this.derivedInfo = derivedInfo;
    return this;
  }

  /**
   * Required.
   *
   * The description of the job, which typically includes a multi-paragraph description of the
   * company and related information. Separate fields are provided on the job object for
   * responsibilities, qualifications, and other job characteristics. Use of these separate job
   * fields is recommended.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 100,000.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Required.
   *
   * The description of the job, which typically includes a multi-paragraph description of the
   * company and related information. Separate fields are provided on the job object for
   * responsibilities, qualifications, and other job characteristics. Use of these separate job
   * fields is recommended.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 100,000.
   * @param description description or {@code null} for none
   */
  public Job setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional.
   *
   * The employment type(s) of a job, for example, full time or part time.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEmploymentTypes() {
    return employmentTypes;
  }

  /**
   * Optional.
   *
   * The employment type(s) of a job, for example, full time or part time.
   * @param employmentTypes employmentTypes or {@code null} for none
   */
  public Job setEmploymentTypes(java.util.List<java.lang.String> employmentTypes) {
    this.employmentTypes = employmentTypes;
    return this;
  }

  /**
   * Optional.
   *
   * A description of bonus, commission, and other compensation incentives associated with the job
   * not including salary or pay.
   *
   * The maximum number of allowed characters is 10,000.
   * @return value or {@code null} for none
   */
  public java.lang.String getIncentives() {
    return incentives;
  }

  /**
   * Optional.
   *
   * A description of bonus, commission, and other compensation incentives associated with the job
   * not including salary or pay.
   *
   * The maximum number of allowed characters is 10,000.
   * @param incentives incentives or {@code null} for none
   */
  public Job setIncentives(java.lang.String incentives) {
    this.incentives = incentives;
    return this;
  }

  /**
   * Optional.
   *
   * The benefits included with the job.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getJobBenefits() {
    return jobBenefits;
  }

  /**
   * Optional.
   *
   * The benefits included with the job.
   * @param jobBenefits jobBenefits or {@code null} for none
   */
  public Job setJobBenefits(java.util.List<java.lang.String> jobBenefits) {
    this.jobBenefits = jobBenefits;
    return this;
  }

  /**
   * Optional.
   *
   * The end timestamp of the job. Typically this field is used for contracting engagements. Invalid
   * timestamps are ignored.
   * @return value or {@code null} for none
   */
  public String getJobEndTime() {
    return jobEndTime;
  }

  /**
   * Optional.
   *
   * The end timestamp of the job. Typically this field is used for contracting engagements. Invalid
   * timestamps are ignored.
   * @param jobEndTime jobEndTime or {@code null} for none
   */
  public Job setJobEndTime(String jobEndTime) {
    this.jobEndTime = jobEndTime;
    return this;
  }

  /**
   * Optional.
   *
   * The experience level associated with the job, such as "Entry Level".
   * @return value or {@code null} for none
   */
  public java.lang.String getJobLevel() {
    return jobLevel;
  }

  /**
   * Optional.
   *
   * The experience level associated with the job, such as "Entry Level".
   * @param jobLevel jobLevel or {@code null} for none
   */
  public Job setJobLevel(java.lang.String jobLevel) {
    this.jobLevel = jobLevel;
    return this;
  }

  /**
   * Optional.
   *
   * The start timestamp of the job in UTC time zone. Typically this field is used for contracting
   * engagements. Invalid timestamps are ignored.
   * @return value or {@code null} for none
   */
  public String getJobStartTime() {
    return jobStartTime;
  }

  /**
   * Optional.
   *
   * The start timestamp of the job in UTC time zone. Typically this field is used for contracting
   * engagements. Invalid timestamps are ignored.
   * @param jobStartTime jobStartTime or {@code null} for none
   */
  public Job setJobStartTime(String jobStartTime) {
    this.jobStartTime = jobStartTime;
    return this;
  }

  /**
   * Optional.
   *
   * The language of the posting. This field is distinct from any requirements for fluency that are
   * associated with the job.
   *
   * Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information,
   * see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external"
   * target="_blank" }.
   *
   * If this field is unspecified and Job.description is present, detected language code based on
   * Job.description is assigned, otherwise defaults to 'en_US'.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageCode() {
    return languageCode;
  }

  /**
   * Optional.
   *
   * The language of the posting. This field is distinct from any requirements for fluency that are
   * associated with the job.
   *
   * Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information,
   * see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external"
   * target="_blank" }.
   *
   * If this field is unspecified and Job.description is present, detected language code based on
   * Job.description is assigned, otherwise defaults to 'en_US'.
   * @param languageCode languageCode or {@code null} for none
   */
  public Job setLanguageCode(java.lang.String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Required during job update.
   *
   * The resource name for the job. This is generated by the service when a job is created.
   *
   * The format is "projects/{project_id}/jobs/{job_id}", for example, "projects/api-test-
   * project/jobs/1234".
   *
   * Use of this field in job queries and API calls is preferred over the use of requisition_id
   * since this value is unique.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required during job update.
   *
   * The resource name for the job. This is generated by the service when a job is created.
   *
   * The format is "projects/{project_id}/jobs/{job_id}", for example, "projects/api-test-
   * project/jobs/1234".
   *
   * Use of this field in job queries and API calls is preferred over the use of requisition_id
   * since this value is unique.
   * @param name name or {@code null} for none
   */
  public Job setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The timestamp when this job posting was created.
   * @return value or {@code null} for none
   */
  public String getPostingCreateTime() {
    return postingCreateTime;
  }

  /**
   * Output only. The timestamp when this job posting was created.
   * @param postingCreateTime postingCreateTime or {@code null} for none
   */
  public Job setPostingCreateTime(String postingCreateTime) {
    this.postingCreateTime = postingCreateTime;
    return this;
  }

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it
   * no longer appears in search results. The expired job can't be deleted or listed by the
   * DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the
   * UpdateJob API. An expired job can be updated and opened again by using a future expiration
   * timestamp. Updating an expired job fails if there is another existing open job with same
   * company_name, language_code and requisition_id.
   *
   * The expired jobs are retained in our system for 90 days. However, the overall expired job count
   * cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with
   * earlier expire time are cleaned first. Expired jobs are no longer accessible after they are
   * cleaned out.
   *
   * Invalid timestamps are ignored, and treated as expire time not provided.
   *
   * Timestamp before the instant request is made is considered valid, the job will be treated as
   * expired immediately.
   *
   * If this value is not provided at the time of job creation or is invalid, the job posting
   * expires after 30 days from the job's creation time. For example, if the job was created on
   * 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31
   * 13:00AM UTC.
   *
   * If this value is not provided on job update, it depends on the field masks set by
   * UpdateJobRequest.update_mask. If the field masks include expiry_time, or the masks are empty
   * meaning that every field is updated, the job posting expires after 30 days from the job's last
   * update time. Otherwise the expiration date isn't updated.
   * @return value or {@code null} for none
   */
  public String getPostingExpireTime() {
    return postingExpireTime;
  }

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it
   * no longer appears in search results. The expired job can't be deleted or listed by the
   * DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the
   * UpdateJob API. An expired job can be updated and opened again by using a future expiration
   * timestamp. Updating an expired job fails if there is another existing open job with same
   * company_name, language_code and requisition_id.
   *
   * The expired jobs are retained in our system for 90 days. However, the overall expired job count
   * cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with
   * earlier expire time are cleaned first. Expired jobs are no longer accessible after they are
   * cleaned out.
   *
   * Invalid timestamps are ignored, and treated as expire time not provided.
   *
   * Timestamp before the instant request is made is considered valid, the job will be treated as
   * expired immediately.
   *
   * If this value is not provided at the time of job creation or is invalid, the job posting
   * expires after 30 days from the job's creation time. For example, if the job was created on
   * 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31
   * 13:00AM UTC.
   *
   * If this value is not provided on job update, it depends on the field masks set by
   * UpdateJobRequest.update_mask. If the field masks include expiry_time, or the masks are empty
   * meaning that every field is updated, the job posting expires after 30 days from the job's last
   * update time. Otherwise the expiration date isn't updated.
   * @param postingExpireTime postingExpireTime or {@code null} for none
   */
  public Job setPostingExpireTime(String postingExpireTime) {
    this.postingExpireTime = postingExpireTime;
    return this;
  }

  /**
   * Optional.
   *
   * The timestamp this job posting was most recently published. The default value is the time the
   * request arrives at the server. Invalid timestamps are ignored.
   * @return value or {@code null} for none
   */
  public String getPostingPublishTime() {
    return postingPublishTime;
  }

  /**
   * Optional.
   *
   * The timestamp this job posting was most recently published. The default value is the time the
   * request arrives at the server. Invalid timestamps are ignored.
   * @param postingPublishTime postingPublishTime or {@code null} for none
   */
  public Job setPostingPublishTime(String postingPublishTime) {
    this.postingPublishTime = postingPublishTime;
    return this;
  }

  /**
   * Optional.
   *
   * The job PostingRegion (for example, state, country) throughout which the job is available. If
   * this field is set, a LocationFilter in a search query within the job region finds this job
   * posting if an exact location match isn't specified. If this field is set to
   * PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the
   * same location level as this field is strongly recommended.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostingRegion() {
    return postingRegion;
  }

  /**
   * Optional.
   *
   * The job PostingRegion (for example, state, country) throughout which the job is available. If
   * this field is set, a LocationFilter in a search query within the job region finds this job
   * posting if an exact location match isn't specified. If this field is set to
   * PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the
   * same location level as this field is strongly recommended.
   * @param postingRegion postingRegion or {@code null} for none
   */
  public Job setPostingRegion(java.lang.String postingRegion) {
    this.postingRegion = postingRegion;
    return this;
  }

  /**
   * Output only. The timestamp when this job posting was last updated.
   * @return value or {@code null} for none
   */
  public String getPostingUpdateTime() {
    return postingUpdateTime;
  }

  /**
   * Output only. The timestamp when this job posting was last updated.
   * @param postingUpdateTime postingUpdateTime or {@code null} for none
   */
  public Job setPostingUpdateTime(String postingUpdateTime) {
    this.postingUpdateTime = postingUpdateTime;
    return this;
  }

  /**
   * Optional.
   *
   * Options for job processing.
   * @return value or {@code null} for none
   */
  public ProcessingOptions getProcessingOptions() {
    return processingOptions;
  }

  /**
   * Optional.
   *
   * Options for job processing.
   * @param processingOptions processingOptions or {@code null} for none
   */
  public Job setProcessingOptions(ProcessingOptions processingOptions) {
    this.processingOptions = processingOptions;
    return this;
  }

  /**
   * Optional.
   *
   * A promotion value of the job, as determined by the client. The value determines the sort order
   * of the jobs returned when searching for jobs using the featured jobs search call, with higher
   * promotional values being returned first and ties being resolved by relevance sort. Only the
   * jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH.
   *
   * Default value is 0, and negative values are treated as 0.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPromotionValue() {
    return promotionValue;
  }

  /**
   * Optional.
   *
   * A promotion value of the job, as determined by the client. The value determines the sort order
   * of the jobs returned when searching for jobs using the featured jobs search call, with higher
   * promotional values being returned first and ties being resolved by relevance sort. Only the
   * jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH.
   *
   * Default value is 0, and negative values are treated as 0.
   * @param promotionValue promotionValue or {@code null} for none
   */
  public Job setPromotionValue(java.lang.Integer promotionValue) {
    this.promotionValue = promotionValue;
    return this;
  }

  /**
   * Optional.
   *
   * A description of the qualifications required to perform the job. The use of this field is
   * recommended as an alternative to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * @return value or {@code null} for none
   */
  public java.lang.String getQualifications() {
    return qualifications;
  }

  /**
   * Optional.
   *
   * A description of the qualifications required to perform the job. The use of this field is
   * recommended as an alternative to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * @param qualifications qualifications or {@code null} for none
   */
  public Job setQualifications(java.lang.String qualifications) {
    this.qualifications = qualifications;
    return this;
  }

  /**
   * Required.
   *
   * The requisition ID, also referred to as the posting ID, assigned by the client to identify a
   * job. This field is intended to be used by clients for client identification and tracking of
   * postings. A job is not allowed to be created if there is another job with the same
   * [company_name], language_code and requisition_id.
   *
   * The maximum number of allowed characters is 255.
   * @return value or {@code null} for none
   */
  public java.lang.String getRequisitionId() {
    return requisitionId;
  }

  /**
   * Required.
   *
   * The requisition ID, also referred to as the posting ID, assigned by the client to identify a
   * job. This field is intended to be used by clients for client identification and tracking of
   * postings. A job is not allowed to be created if there is another job with the same
   * [company_name], language_code and requisition_id.
   *
   * The maximum number of allowed characters is 255.
   * @param requisitionId requisitionId or {@code null} for none
   */
  public Job setRequisitionId(java.lang.String requisitionId) {
    this.requisitionId = requisitionId;
    return this;
  }

  /**
   * Optional.
   *
   * A description of job responsibilities. The use of this field is recommended as an alternative
   * to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * @return value or {@code null} for none
   */
  public java.lang.String getResponsibilities() {
    return responsibilities;
  }

  /**
   * Optional.
   *
   * A description of job responsibilities. The use of this field is recommended as an alternative
   * to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * @param responsibilities responsibilities or {@code null} for none
   */
  public Job setResponsibilities(java.lang.String responsibilities) {
    this.responsibilities = responsibilities;
    return this;
  }

  /**
   * Required.
   *
   * The title of the job, such as "Software Engineer"
   *
   * The maximum number of allowed characters is 500.
   * @return value or {@code null} for none
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Required.
   *
   * The title of the job, such as "Software Engineer"
   *
   * The maximum number of allowed characters is 500.
   * @param title title or {@code null} for none
   */
  public Job setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  /**
   * Optional.
   *
   * The visibility of the job.
   *
   * Defaults to Visibility.ACCOUNT_ONLY if not specified.
   * @return value or {@code null} for none
   */
  public java.lang.String getVisibility() {
    return visibility;
  }

  /**
   * Optional.
   *
   * The visibility of the job.
   *
   * Defaults to Visibility.ACCOUNT_ONLY if not specified.
   * @param visibility visibility or {@code null} for none
   */
  public Job setVisibility(java.lang.String visibility) {
    this.visibility = visibility;
    return this;
  }

  @Override
  public Job set(String fieldName, Object value) {
    return (Job) super.set(fieldName, value);
  }

  @Override
  public Job clone() {
    return (Job) super.clone();
  }

}
