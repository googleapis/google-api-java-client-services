/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataproc.model;

/**
 * A representation of a session.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataproc API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Session extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The time when the session was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. The email address of the user who created the session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String creator;

  /**
   * Optional. Environment configuration for the session execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EnvironmentConfig environmentConfig;

  /**
   * Optional. Jupyter session config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private JupyterConfig jupyterSession;

  /**
   * Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters,
   * and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty,
   * but, if present, must contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a
   * session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Identifier. The resource name of the session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Runtime configuration for the session execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RuntimeConfig runtimeConfig;

  /**
   * Output only. Runtime information about session execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RuntimeInfo runtimeInfo;

  /**
   * Optional. The session template used by the session.Only resource names, including project ID
   * and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/
   * locations/[dataproc_region]/sessionTemplates/[template_id] *
   * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template
   * must be in the same project and Dataproc region as the session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sessionTemplate;

  /**
   * Optional. Spark connect session config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SparkConnectConfig sparkConnectSession;

  /**
   * Output only. A state of the session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Historical state information for the session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SessionStateHistory> stateHistory;

  /**
   * Output only. Session state details, such as the failure description if the state is FAILED.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stateMessage;

  /**
   * Output only. The time when the session entered the current state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String stateTime;

  /**
   * Optional. The email address of the user who owns the session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String user;

  /**
   * Output only. A session UUID (Unique Universal Identifier). The service generates this value
   * when it creates the session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uuid;

  /**
   * Output only. The time when the session was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time when the session was created.
   * @param createTime createTime or {@code null} for none
   */
  public Session setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The email address of the user who created the session.
   * @return value or {@code null} for none
   */
  public java.lang.String getCreator() {
    return creator;
  }

  /**
   * Output only. The email address of the user who created the session.
   * @param creator creator or {@code null} for none
   */
  public Session setCreator(java.lang.String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Optional. Environment configuration for the session execution.
   * @return value or {@code null} for none
   */
  public EnvironmentConfig getEnvironmentConfig() {
    return environmentConfig;
  }

  /**
   * Optional. Environment configuration for the session execution.
   * @param environmentConfig environmentConfig or {@code null} for none
   */
  public Session setEnvironmentConfig(EnvironmentConfig environmentConfig) {
    this.environmentConfig = environmentConfig;
    return this;
  }

  /**
   * Optional. Jupyter session config.
   * @return value or {@code null} for none
   */
  public JupyterConfig getJupyterSession() {
    return jupyterSession;
  }

  /**
   * Optional. Jupyter session config.
   * @param jupyterSession jupyterSession or {@code null} for none
   */
  public Session setJupyterSession(JupyterConfig jupyterSession) {
    this.jupyterSession = jupyterSession;
    return this;
  }

  /**
   * Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters,
   * and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty,
   * but, if present, must contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a
   * session.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters,
   * and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty,
   * but, if present, must contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a
   * session.
   * @param labels labels or {@code null} for none
   */
  public Session setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Identifier. The resource name of the session.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name of the session.
   * @param name name or {@code null} for none
   */
  public Session setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Runtime configuration for the session execution.
   * @return value or {@code null} for none
   */
  public RuntimeConfig getRuntimeConfig() {
    return runtimeConfig;
  }

  /**
   * Optional. Runtime configuration for the session execution.
   * @param runtimeConfig runtimeConfig or {@code null} for none
   */
  public Session setRuntimeConfig(RuntimeConfig runtimeConfig) {
    this.runtimeConfig = runtimeConfig;
    return this;
  }

  /**
   * Output only. Runtime information about session execution.
   * @return value or {@code null} for none
   */
  public RuntimeInfo getRuntimeInfo() {
    return runtimeInfo;
  }

  /**
   * Output only. Runtime information about session execution.
   * @param runtimeInfo runtimeInfo or {@code null} for none
   */
  public Session setRuntimeInfo(RuntimeInfo runtimeInfo) {
    this.runtimeInfo = runtimeInfo;
    return this;
  }

  /**
   * Optional. The session template used by the session.Only resource names, including project ID
   * and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/
   * locations/[dataproc_region]/sessionTemplates/[template_id] *
   * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template
   * must be in the same project and Dataproc region as the session.
   * @return value or {@code null} for none
   */
  public java.lang.String getSessionTemplate() {
    return sessionTemplate;
  }

  /**
   * Optional. The session template used by the session.Only resource names, including project ID
   * and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/
   * locations/[dataproc_region]/sessionTemplates/[template_id] *
   * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template
   * must be in the same project and Dataproc region as the session.
   * @param sessionTemplate sessionTemplate or {@code null} for none
   */
  public Session setSessionTemplate(java.lang.String sessionTemplate) {
    this.sessionTemplate = sessionTemplate;
    return this;
  }

  /**
   * Optional. Spark connect session config.
   * @return value or {@code null} for none
   */
  public SparkConnectConfig getSparkConnectSession() {
    return sparkConnectSession;
  }

  /**
   * Optional. Spark connect session config.
   * @param sparkConnectSession sparkConnectSession or {@code null} for none
   */
  public Session setSparkConnectSession(SparkConnectConfig sparkConnectSession) {
    this.sparkConnectSession = sparkConnectSession;
    return this;
  }

  /**
   * Output only. A state of the session.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. A state of the session.
   * @param state state or {@code null} for none
   */
  public Session setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Historical state information for the session.
   * @return value or {@code null} for none
   */
  public java.util.List<SessionStateHistory> getStateHistory() {
    return stateHistory;
  }

  /**
   * Output only. Historical state information for the session.
   * @param stateHistory stateHistory or {@code null} for none
   */
  public Session setStateHistory(java.util.List<SessionStateHistory> stateHistory) {
    this.stateHistory = stateHistory;
    return this;
  }

  /**
   * Output only. Session state details, such as the failure description if the state is FAILED.
   * @return value or {@code null} for none
   */
  public java.lang.String getStateMessage() {
    return stateMessage;
  }

  /**
   * Output only. Session state details, such as the failure description if the state is FAILED.
   * @param stateMessage stateMessage or {@code null} for none
   */
  public Session setStateMessage(java.lang.String stateMessage) {
    this.stateMessage = stateMessage;
    return this;
  }

  /**
   * Output only. The time when the session entered the current state.
   * @return value or {@code null} for none
   */
  public String getStateTime() {
    return stateTime;
  }

  /**
   * Output only. The time when the session entered the current state.
   * @param stateTime stateTime or {@code null} for none
   */
  public Session setStateTime(String stateTime) {
    this.stateTime = stateTime;
    return this;
  }

  /**
   * Optional. The email address of the user who owns the session.
   * @return value or {@code null} for none
   */
  public java.lang.String getUser() {
    return user;
  }

  /**
   * Optional. The email address of the user who owns the session.
   * @param user user or {@code null} for none
   */
  public Session setUser(java.lang.String user) {
    this.user = user;
    return this;
  }

  /**
   * Output only. A session UUID (Unique Universal Identifier). The service generates this value
   * when it creates the session.
   * @return value or {@code null} for none
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Output only. A session UUID (Unique Universal Identifier). The service generates this value
   * when it creates the session.
   * @param uuid uuid or {@code null} for none
   */
  public Session setUuid(java.lang.String uuid) {
    this.uuid = uuid;
    return this;
  }

  @Override
  public Session set(String fieldName, Object value) {
    return (Session) super.set(fieldName, value);
  }

  @Override
  public Session clone() {
    return (Session) super.clone();
  }

}
