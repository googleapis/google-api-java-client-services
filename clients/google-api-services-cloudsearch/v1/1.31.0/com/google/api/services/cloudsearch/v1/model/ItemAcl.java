/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Access control list information for the item. For more information see [Map ACLs](/cloud-
 * search/docs/guides/acls).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ItemAcl extends com.google.api.client.json.GenericJson {

  /**
   * Sets the type of access rules to apply when an item inherits its ACL from a parent. This should
   * always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is
   * set, this field should be set to a valid AclInheritanceType.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String aclInheritanceType;

  /**
   * List of principals who are explicitly denied access to the item in search results. While
   * principals are denied access by default, use denied readers to handle exceptions and override
   * the list allowed readers. The maximum number of elements is 100.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Principal> deniedReaders;

  /**
   * Name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only*
   * provides access permissions to child items and does not define structural relationships, nor
   * does it provide convenient ways to delete large groups of items. Deleting an ACL parent from
   * the index only alters the access permissions of child items that reference the parent in the
   * inheritAclFrom field. The item is still in the index, but may not visible in search results. By
   * contrast, deletion of a container item also deletes all items that reference the container via
   * the containerName field. The maximum length for this field is 1536 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String inheritAclFrom;

  /**
   * Optional. List of owners for the item. This field has no bearing on document access
   * permissions. It does, however, offer a slight ranking boosts items where the querying user is
   * an owner. The maximum number of elements is 5.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Principal> owners;

  /**
   * List of principals who are allowed to see the item in search results. Optional if inheriting
   * permissions from another item or if the item is not intended to be visible, such as virtual
   * containers. The maximum number of elements is 1000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Principal> readers;

  /**
   * Sets the type of access rules to apply when an item inherits its ACL from a parent. This should
   * always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is
   * set, this field should be set to a valid AclInheritanceType.
   * @return value or {@code null} for none
   */
  public java.lang.String getAclInheritanceType() {
    return aclInheritanceType;
  }

  /**
   * Sets the type of access rules to apply when an item inherits its ACL from a parent. This should
   * always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is
   * set, this field should be set to a valid AclInheritanceType.
   * @param aclInheritanceType aclInheritanceType or {@code null} for none
   */
  public ItemAcl setAclInheritanceType(java.lang.String aclInheritanceType) {
    this.aclInheritanceType = aclInheritanceType;
    return this;
  }

  /**
   * List of principals who are explicitly denied access to the item in search results. While
   * principals are denied access by default, use denied readers to handle exceptions and override
   * the list allowed readers. The maximum number of elements is 100.
   * @return value or {@code null} for none
   */
  public java.util.List<Principal> getDeniedReaders() {
    return deniedReaders;
  }

  /**
   * List of principals who are explicitly denied access to the item in search results. While
   * principals are denied access by default, use denied readers to handle exceptions and override
   * the list allowed readers. The maximum number of elements is 100.
   * @param deniedReaders deniedReaders or {@code null} for none
   */
  public ItemAcl setDeniedReaders(java.util.List<Principal> deniedReaders) {
    this.deniedReaders = deniedReaders;
    return this;
  }

  /**
   * Name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only*
   * provides access permissions to child items and does not define structural relationships, nor
   * does it provide convenient ways to delete large groups of items. Deleting an ACL parent from
   * the index only alters the access permissions of child items that reference the parent in the
   * inheritAclFrom field. The item is still in the index, but may not visible in search results. By
   * contrast, deletion of a container item also deletes all items that reference the container via
   * the containerName field. The maximum length for this field is 1536 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getInheritAclFrom() {
    return inheritAclFrom;
  }

  /**
   * Name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only*
   * provides access permissions to child items and does not define structural relationships, nor
   * does it provide convenient ways to delete large groups of items. Deleting an ACL parent from
   * the index only alters the access permissions of child items that reference the parent in the
   * inheritAclFrom field. The item is still in the index, but may not visible in search results. By
   * contrast, deletion of a container item also deletes all items that reference the container via
   * the containerName field. The maximum length for this field is 1536 characters.
   * @param inheritAclFrom inheritAclFrom or {@code null} for none
   */
  public ItemAcl setInheritAclFrom(java.lang.String inheritAclFrom) {
    this.inheritAclFrom = inheritAclFrom;
    return this;
  }

  /**
   * Optional. List of owners for the item. This field has no bearing on document access
   * permissions. It does, however, offer a slight ranking boosts items where the querying user is
   * an owner. The maximum number of elements is 5.
   * @return value or {@code null} for none
   */
  public java.util.List<Principal> getOwners() {
    return owners;
  }

  /**
   * Optional. List of owners for the item. This field has no bearing on document access
   * permissions. It does, however, offer a slight ranking boosts items where the querying user is
   * an owner. The maximum number of elements is 5.
   * @param owners owners or {@code null} for none
   */
  public ItemAcl setOwners(java.util.List<Principal> owners) {
    this.owners = owners;
    return this;
  }

  /**
   * List of principals who are allowed to see the item in search results. Optional if inheriting
   * permissions from another item or if the item is not intended to be visible, such as virtual
   * containers. The maximum number of elements is 1000.
   * @return value or {@code null} for none
   */
  public java.util.List<Principal> getReaders() {
    return readers;
  }

  /**
   * List of principals who are allowed to see the item in search results. Optional if inheriting
   * permissions from another item or if the item is not intended to be visible, such as virtual
   * containers. The maximum number of elements is 1000.
   * @param readers readers or {@code null} for none
   */
  public ItemAcl setReaders(java.util.List<Principal> readers) {
    this.readers = readers;
    return this;
  }

  @Override
  public ItemAcl set(String fieldName, Object value) {
    return (ItemAcl) super.set(fieldName, value);
  }

  @Override
  public ItemAcl clone() {
    return (ItemAcl) super.clone();
  }

}
