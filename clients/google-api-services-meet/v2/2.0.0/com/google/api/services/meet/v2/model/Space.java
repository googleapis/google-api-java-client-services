/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.meet.v2.model;

/**
 * Virtual place where conferences are held. Only one active conference can be held in one space at
 * any given time.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Meet API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Space extends com.google.api.client.json.GenericJson {

  /**
   * Active conference, if it exists.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ActiveConference activeConference;

  /**
   * Configuration pertaining to the meeting space.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SpaceConfig config;

  /**
   * Output only. Type friendly unique string used to join the meeting. Format:
   * `[a-z]+-[a-z]+-[a-z]+`. For example, `abc-mnop-xyz`. The maximum length is 128 characters. Can
   * only be used as an alias of the space name to get the space.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String meetingCode;

  /**
   * Output only. URI used to join meetings consisting of `https://meet.google.com/` followed by the
   * `meeting_code`. For example, `https://meet.google.com/abc-mnop-xyz`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String meetingUri;

  /**
   * Immutable. Resource name of the space. Format: `spaces/{space}`. `{space}` is the resource
   * identifier for the space. It's a unique, server-generated ID and is case sensitive. For
   * example, `jQCFfuBOdN5z`. For more information, see [How Meet identifies a meeting
   * space](https://developers.google.com/meet/api/guides/meeting-spaces#identify-meeting-space).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Active conference, if it exists.
   * @return value or {@code null} for none
   */
  public ActiveConference getActiveConference() {
    return activeConference;
  }

  /**
   * Active conference, if it exists.
   * @param activeConference activeConference or {@code null} for none
   */
  public Space setActiveConference(ActiveConference activeConference) {
    this.activeConference = activeConference;
    return this;
  }

  /**
   * Configuration pertaining to the meeting space.
   * @return value or {@code null} for none
   */
  public SpaceConfig getConfig() {
    return config;
  }

  /**
   * Configuration pertaining to the meeting space.
   * @param config config or {@code null} for none
   */
  public Space setConfig(SpaceConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Output only. Type friendly unique string used to join the meeting. Format:
   * `[a-z]+-[a-z]+-[a-z]+`. For example, `abc-mnop-xyz`. The maximum length is 128 characters. Can
   * only be used as an alias of the space name to get the space.
   * @return value or {@code null} for none
   */
  public java.lang.String getMeetingCode() {
    return meetingCode;
  }

  /**
   * Output only. Type friendly unique string used to join the meeting. Format:
   * `[a-z]+-[a-z]+-[a-z]+`. For example, `abc-mnop-xyz`. The maximum length is 128 characters. Can
   * only be used as an alias of the space name to get the space.
   * @param meetingCode meetingCode or {@code null} for none
   */
  public Space setMeetingCode(java.lang.String meetingCode) {
    this.meetingCode = meetingCode;
    return this;
  }

  /**
   * Output only. URI used to join meetings consisting of `https://meet.google.com/` followed by the
   * `meeting_code`. For example, `https://meet.google.com/abc-mnop-xyz`.
   * @return value or {@code null} for none
   */
  public java.lang.String getMeetingUri() {
    return meetingUri;
  }

  /**
   * Output only. URI used to join meetings consisting of `https://meet.google.com/` followed by the
   * `meeting_code`. For example, `https://meet.google.com/abc-mnop-xyz`.
   * @param meetingUri meetingUri or {@code null} for none
   */
  public Space setMeetingUri(java.lang.String meetingUri) {
    this.meetingUri = meetingUri;
    return this;
  }

  /**
   * Immutable. Resource name of the space. Format: `spaces/{space}`. `{space}` is the resource
   * identifier for the space. It's a unique, server-generated ID and is case sensitive. For
   * example, `jQCFfuBOdN5z`. For more information, see [How Meet identifies a meeting
   * space](https://developers.google.com/meet/api/guides/meeting-spaces#identify-meeting-space).
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Immutable. Resource name of the space. Format: `spaces/{space}`. `{space}` is the resource
   * identifier for the space. It's a unique, server-generated ID and is case sensitive. For
   * example, `jQCFfuBOdN5z`. For more information, see [How Meet identifies a meeting
   * space](https://developers.google.com/meet/api/guides/meeting-spaces#identify-meeting-space).
   * @param name name or {@code null} for none
   */
  public Space setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  @Override
  public Space set(String fieldName, Object value) {
    return (Space) super.set(fieldName, value);
  }

  @Override
  public Space clone() {
    return (Space) super.clone();
  }

}
