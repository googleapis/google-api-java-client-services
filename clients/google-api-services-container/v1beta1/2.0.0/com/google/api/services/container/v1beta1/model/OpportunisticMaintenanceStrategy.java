/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.container.v1beta1.model;

/**
 * Strategy that will trigger maintenance on behalf of the customer.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Kubernetes Engine API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class OpportunisticMaintenanceStrategy extends com.google.api.client.json.GenericJson {

  /**
   * The window of time that opportunistic maintenance can run. Example: A setting of 14 days
   * implies that opportunistic maintenance can only be ran in the 2 weeks leading up to the
   * scheduled maintenance date. Setting 28 days allows opportunistic maintenance to run at any time
   * in the scheduled maintenance window (all `PERIODIC` maintenance is set 28 days in advance).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String maintenanceAvailabilityWindow;

  /**
   * The minimum nodes required to be available in a pool. Blocks maintenance if it would cause the
   * number of running nodes to dip below this value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long minNodesPerPool;

  /**
   * The amount of time that a node can remain idle (no customer owned workloads running), before
   * triggering maintenance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String nodeIdleTimeWindow;

  /**
   * The window of time that opportunistic maintenance can run. Example: A setting of 14 days
   * implies that opportunistic maintenance can only be ran in the 2 weeks leading up to the
   * scheduled maintenance date. Setting 28 days allows opportunistic maintenance to run at any time
   * in the scheduled maintenance window (all `PERIODIC` maintenance is set 28 days in advance).
   * @return value or {@code null} for none
   */
  public String getMaintenanceAvailabilityWindow() {
    return maintenanceAvailabilityWindow;
  }

  /**
   * The window of time that opportunistic maintenance can run. Example: A setting of 14 days
   * implies that opportunistic maintenance can only be ran in the 2 weeks leading up to the
   * scheduled maintenance date. Setting 28 days allows opportunistic maintenance to run at any time
   * in the scheduled maintenance window (all `PERIODIC` maintenance is set 28 days in advance).
   * @param maintenanceAvailabilityWindow maintenanceAvailabilityWindow or {@code null} for none
   */
  public OpportunisticMaintenanceStrategy setMaintenanceAvailabilityWindow(String maintenanceAvailabilityWindow) {
    this.maintenanceAvailabilityWindow = maintenanceAvailabilityWindow;
    return this;
  }

  /**
   * The minimum nodes required to be available in a pool. Blocks maintenance if it would cause the
   * number of running nodes to dip below this value.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMinNodesPerPool() {
    return minNodesPerPool;
  }

  /**
   * The minimum nodes required to be available in a pool. Blocks maintenance if it would cause the
   * number of running nodes to dip below this value.
   * @param minNodesPerPool minNodesPerPool or {@code null} for none
   */
  public OpportunisticMaintenanceStrategy setMinNodesPerPool(java.lang.Long minNodesPerPool) {
    this.minNodesPerPool = minNodesPerPool;
    return this;
  }

  /**
   * The amount of time that a node can remain idle (no customer owned workloads running), before
   * triggering maintenance.
   * @return value or {@code null} for none
   */
  public String getNodeIdleTimeWindow() {
    return nodeIdleTimeWindow;
  }

  /**
   * The amount of time that a node can remain idle (no customer owned workloads running), before
   * triggering maintenance.
   * @param nodeIdleTimeWindow nodeIdleTimeWindow or {@code null} for none
   */
  public OpportunisticMaintenanceStrategy setNodeIdleTimeWindow(String nodeIdleTimeWindow) {
    this.nodeIdleTimeWindow = nodeIdleTimeWindow;
    return this;
  }

  @Override
  public OpportunisticMaintenanceStrategy set(String fieldName, Object value) {
    return (OpportunisticMaintenanceStrategy) super.set(fieldName, value);
  }

  @Override
  public OpportunisticMaintenanceStrategy clone() {
    return (OpportunisticMaintenanceStrategy) super.clone();
  }

}
