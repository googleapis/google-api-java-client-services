/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securitycenter.v1beta2.model;

/**
 * Information about the requests relevant to the finding.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Security Command Center API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Requests extends com.google.api.client.json.GenericJson {

  /**
   * Allowed RPS (requests per second) over the long term.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer longTermAllowed;

  /**
   * Denied RPS (requests per second) over the long term.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer longTermDenied;

  /**
   * For 'Increasing deny ratio', the ratio is the denied traffic divided by the allowed traffic.
   * For 'Allowed traffic spike', the ratio is the allowed traffic in the short term divided by
   * allowed traffic in the long term.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double ratio;

  /**
   * Allowed RPS (requests per second) in the short term.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer shortTermAllowed;

  /**
   * Allowed RPS (requests per second) over the long term.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLongTermAllowed() {
    return longTermAllowed;
  }

  /**
   * Allowed RPS (requests per second) over the long term.
   * @param longTermAllowed longTermAllowed or {@code null} for none
   */
  public Requests setLongTermAllowed(java.lang.Integer longTermAllowed) {
    this.longTermAllowed = longTermAllowed;
    return this;
  }

  /**
   * Denied RPS (requests per second) over the long term.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLongTermDenied() {
    return longTermDenied;
  }

  /**
   * Denied RPS (requests per second) over the long term.
   * @param longTermDenied longTermDenied or {@code null} for none
   */
  public Requests setLongTermDenied(java.lang.Integer longTermDenied) {
    this.longTermDenied = longTermDenied;
    return this;
  }

  /**
   * For 'Increasing deny ratio', the ratio is the denied traffic divided by the allowed traffic.
   * For 'Allowed traffic spike', the ratio is the allowed traffic in the short term divided by
   * allowed traffic in the long term.
   * @return value or {@code null} for none
   */
  public java.lang.Double getRatio() {
    return ratio;
  }

  /**
   * For 'Increasing deny ratio', the ratio is the denied traffic divided by the allowed traffic.
   * For 'Allowed traffic spike', the ratio is the allowed traffic in the short term divided by
   * allowed traffic in the long term.
   * @param ratio ratio or {@code null} for none
   */
  public Requests setRatio(java.lang.Double ratio) {
    this.ratio = ratio;
    return this;
  }

  /**
   * Allowed RPS (requests per second) in the short term.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getShortTermAllowed() {
    return shortTermAllowed;
  }

  /**
   * Allowed RPS (requests per second) in the short term.
   * @param shortTermAllowed shortTermAllowed or {@code null} for none
   */
  public Requests setShortTermAllowed(java.lang.Integer shortTermAllowed) {
    this.shortTermAllowed = shortTermAllowed;
    return this;
  }

  @Override
  public Requests set(String fieldName, Object value) {
    return (Requests) super.set(fieldName, value);
  }

  @Override
  public Requests clone() {
    return (Requests) super.clone();
  }

}
