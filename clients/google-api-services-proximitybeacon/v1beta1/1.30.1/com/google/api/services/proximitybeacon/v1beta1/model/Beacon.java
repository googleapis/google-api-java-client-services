/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.proximitybeacon.v1beta1.model;

/**
 * Details of a beacon device.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Proximity Beacon API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Beacon extends com.google.api.client.json.GenericJson {

  /**
   * The identifier of a beacon as advertised by it. This field must be populated when registering.
   * It may be empty when updating a beacon record because it is ignored in updates.
   *
   * When registering a beacon that broadcasts Eddystone-EID, this field should contain a "stable"
   * Eddystone-UID that identifies the beacon and links it to its attachments. The stable Eddystone-
   * UID is only used for administering the beacon.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AdvertisedId advertisedId;

  /**
   * Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the
   * beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
   * Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
   *
   * This field must be left empty when registering. After reading a beacon, clients can use the
   * name for future operations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String beaconName;

  /**
   * Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Write-only registration parameters for beacons using Eddystone-EID (remotely resolved ephemeral
   * ID) format. This information will not be populated in API responses. When submitting this data,
   * the `advertised_id` field must contain an ID of type Eddystone-UID. Any other ID type will
   * result in an error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EphemeralIdRegistration ephemeralIdRegistration;

  /**
   * Expected location stability. This is set when the beacon is registered or updated, not
   * automatically detected in any way. Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String expectedStability;

  /**
   * The indoor level information for this beacon, if known. As returned by the Google Maps API.
   * Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndoorLevel indoorLevel;

  /**
   * The location of the beacon, expressed as a latitude and longitude pair. This location is given
   * when the beacon is registered or updated. It does not necessarily indicate the actual current
   * location of the beacon. Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LatLng latLng;

  /**
   * The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed.
   * This is given when the beacon is registered or updated, not automatically detected in any way.
   * Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String placeId;

  /**
   * Properties of the beacon device, for example battery type or firmware version. Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> properties;

  /**
   * Some beacons may require a user to provide an authorization key before changing any of its
   * configuration (e.g. broadcast frames, transmit power). This field provides a place to store and
   * control access to that key. This field is populated in responses to `GET
   * /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say:
   * If the user is authorized to write the beacon's confidential data in the service, the service
   * considers them authorized to configure the beacon. Note that this key grants nothing on the
   * service, only on the beacon itself.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String provisioningKey;

  /**
   * Current status of the beacon. Required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String status;

  /**
   * The identifier of a beacon as advertised by it. This field must be populated when registering.
   * It may be empty when updating a beacon record because it is ignored in updates.
   *
   * When registering a beacon that broadcasts Eddystone-EID, this field should contain a "stable"
   * Eddystone-UID that identifies the beacon and links it to its attachments. The stable Eddystone-
   * UID is only used for administering the beacon.
   * @return value or {@code null} for none
   */
  public AdvertisedId getAdvertisedId() {
    return advertisedId;
  }

  /**
   * The identifier of a beacon as advertised by it. This field must be populated when registering.
   * It may be empty when updating a beacon record because it is ignored in updates.
   *
   * When registering a beacon that broadcasts Eddystone-EID, this field should contain a "stable"
   * Eddystone-UID that identifies the beacon and links it to its attachments. The stable Eddystone-
   * UID is only used for administering the beacon.
   * @param advertisedId advertisedId or {@code null} for none
   */
  public Beacon setAdvertisedId(AdvertisedId advertisedId) {
    this.advertisedId = advertisedId;
    return this;
  }

  /**
   * Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the
   * beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
   * Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
   *
   * This field must be left empty when registering. After reading a beacon, clients can use the
   * name for future operations.
   * @return value or {@code null} for none
   */
  public java.lang.String getBeaconName() {
    return beaconName;
  }

  /**
   * Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the
   * beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
   * Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
   *
   * This field must be left empty when registering. After reading a beacon, clients can use the
   * name for future operations.
   * @param beaconName beaconName or {@code null} for none
   */
  public Beacon setBeaconName(java.lang.String beaconName) {
    this.beaconName = beaconName;
    return this;
  }

  /**
   * Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.
   * @param description description or {@code null} for none
   */
  public Beacon setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Write-only registration parameters for beacons using Eddystone-EID (remotely resolved ephemeral
   * ID) format. This information will not be populated in API responses. When submitting this data,
   * the `advertised_id` field must contain an ID of type Eddystone-UID. Any other ID type will
   * result in an error.
   * @return value or {@code null} for none
   */
  public EphemeralIdRegistration getEphemeralIdRegistration() {
    return ephemeralIdRegistration;
  }

  /**
   * Write-only registration parameters for beacons using Eddystone-EID (remotely resolved ephemeral
   * ID) format. This information will not be populated in API responses. When submitting this data,
   * the `advertised_id` field must contain an ID of type Eddystone-UID. Any other ID type will
   * result in an error.
   * @param ephemeralIdRegistration ephemeralIdRegistration or {@code null} for none
   */
  public Beacon setEphemeralIdRegistration(EphemeralIdRegistration ephemeralIdRegistration) {
    this.ephemeralIdRegistration = ephemeralIdRegistration;
    return this;
  }

  /**
   * Expected location stability. This is set when the beacon is registered or updated, not
   * automatically detected in any way. Optional.
   * @return value or {@code null} for none
   */
  public java.lang.String getExpectedStability() {
    return expectedStability;
  }

  /**
   * Expected location stability. This is set when the beacon is registered or updated, not
   * automatically detected in any way. Optional.
   * @param expectedStability expectedStability or {@code null} for none
   */
  public Beacon setExpectedStability(java.lang.String expectedStability) {
    this.expectedStability = expectedStability;
    return this;
  }

  /**
   * The indoor level information for this beacon, if known. As returned by the Google Maps API.
   * Optional.
   * @return value or {@code null} for none
   */
  public IndoorLevel getIndoorLevel() {
    return indoorLevel;
  }

  /**
   * The indoor level information for this beacon, if known. As returned by the Google Maps API.
   * Optional.
   * @param indoorLevel indoorLevel or {@code null} for none
   */
  public Beacon setIndoorLevel(IndoorLevel indoorLevel) {
    this.indoorLevel = indoorLevel;
    return this;
  }

  /**
   * The location of the beacon, expressed as a latitude and longitude pair. This location is given
   * when the beacon is registered or updated. It does not necessarily indicate the actual current
   * location of the beacon. Optional.
   * @return value or {@code null} for none
   */
  public LatLng getLatLng() {
    return latLng;
  }

  /**
   * The location of the beacon, expressed as a latitude and longitude pair. This location is given
   * when the beacon is registered or updated. It does not necessarily indicate the actual current
   * location of the beacon. Optional.
   * @param latLng latLng or {@code null} for none
   */
  public Beacon setLatLng(LatLng latLng) {
    this.latLng = latLng;
    return this;
  }

  /**
   * The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed.
   * This is given when the beacon is registered or updated, not automatically detected in any way.
   * Optional.
   * @return value or {@code null} for none
   */
  public java.lang.String getPlaceId() {
    return placeId;
  }

  /**
   * The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed.
   * This is given when the beacon is registered or updated, not automatically detected in any way.
   * Optional.
   * @param placeId placeId or {@code null} for none
   */
  public Beacon setPlaceId(java.lang.String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * Properties of the beacon device, for example battery type or firmware version. Optional.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getProperties() {
    return properties;
  }

  /**
   * Properties of the beacon device, for example battery type or firmware version. Optional.
   * @param properties properties or {@code null} for none
   */
  public Beacon setProperties(java.util.Map<String, java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Some beacons may require a user to provide an authorization key before changing any of its
   * configuration (e.g. broadcast frames, transmit power). This field provides a place to store and
   * control access to that key. This field is populated in responses to `GET
   * /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say:
   * If the user is authorized to write the beacon's confidential data in the service, the service
   * considers them authorized to configure the beacon. Note that this key grants nothing on the
   * service, only on the beacon itself.
   * @see #decodeProvisioningKey()
   * @return value or {@code null} for none
   */
  public java.lang.String getProvisioningKey() {
    return provisioningKey;
  }

  /**
   * Some beacons may require a user to provide an authorization key before changing any of its
   * configuration (e.g. broadcast frames, transmit power). This field provides a place to store and
   * control access to that key. This field is populated in responses to `GET
   * /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say:
   * If the user is authorized to write the beacon's confidential data in the service, the service
   * considers them authorized to configure the beacon. Note that this key grants nothing on the
   * service, only on the beacon itself.
   * @see #getProvisioningKey()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeProvisioningKey() {
    return com.google.api.client.util.Base64.decodeBase64(provisioningKey);
  }

  /**
   * Some beacons may require a user to provide an authorization key before changing any of its
   * configuration (e.g. broadcast frames, transmit power). This field provides a place to store and
   * control access to that key. This field is populated in responses to `GET
   * /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say:
   * If the user is authorized to write the beacon's confidential data in the service, the service
   * considers them authorized to configure the beacon. Note that this key grants nothing on the
   * service, only on the beacon itself.
   * @see #encodeProvisioningKey()
   * @param provisioningKey provisioningKey or {@code null} for none
   */
  public Beacon setProvisioningKey(java.lang.String provisioningKey) {
    this.provisioningKey = provisioningKey;
    return this;
  }

  /**
   * Some beacons may require a user to provide an authorization key before changing any of its
   * configuration (e.g. broadcast frames, transmit power). This field provides a place to store and
   * control access to that key. This field is populated in responses to `GET
   * /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say:
   * If the user is authorized to write the beacon's confidential data in the service, the service
   * considers them authorized to configure the beacon. Note that this key grants nothing on the
   * service, only on the beacon itself.
   * @see #setProvisioningKey()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public Beacon encodeProvisioningKey(byte[] provisioningKey) {
    this.provisioningKey = com.google.api.client.util.Base64.encodeBase64URLSafeString(provisioningKey);
    return this;
  }

  /**
   * Current status of the beacon. Required.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Current status of the beacon. Required.
   * @param status status or {@code null} for none
   */
  public Beacon setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  @Override
  public Beacon set(String fieldName, Object value) {
    return (Beacon) super.set(fieldName, value);
  }

  @Override
  public Beacon clone() {
    return (Beacon) super.clone();
  }

}
