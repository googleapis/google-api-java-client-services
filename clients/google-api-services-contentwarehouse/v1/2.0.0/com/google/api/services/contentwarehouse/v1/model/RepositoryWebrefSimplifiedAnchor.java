/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Represents a subpart of the anchor data of the docjoins, but is much smaller. When we build this
 * SimplifiedAnchor from the anchor data of the docjoins, by specifying the option
 * separate_onsite_anchors to SimplifiedAnchorsBuilder, we can also separate the onsite anchors from
 * the other (offdomain) anchors. So onsite anchors and offdomain anchors will have their own count,
 * score, normalized score, and total volume (.._offdomain and .._onsite fields). For example, if
 * there are 10 onsite anchors and 20 offdomain anchors for the anchor text "mountain view", then
 * the count_from_onsite is 10, and the count_from_offdomain is 20 when we separate onsite anchors
 * out. Otherwise (if we don't separate onsite anchors), the count is 30 (10 + 20) and we don't have
 * values in the .._offdomain and .._onsite fields.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefSimplifiedAnchor extends com.google.api.client.json.GenericJson {

  /**
   * The set of (equivalent from WebRef point of view) anchors used to produce this segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefAnchorIndices anchorIndices;

  /**
   * The anchor text. Note that the normalized text is not populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefLocalizedString anchorText;

  /**
   * The number of times we see this anchor text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger count;

  /**
   * Count, score, normalized score, and volume of offdomain anchors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger countFromOffdomain;

  /**
   * Count, score, normalized score, and volume of onsite anchors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger countFromOnsite;

  /**
   * The normalized score, which is computed from the score and the total_volume.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float normalizedScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float normalizedScoreFromOffdomain;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float normalizedScoreFromOnsite;

  /**
   * The sum/aggregate of the anchor scores that have the same text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float score;

  /**
   * The sum/aggregate of the anchor scores that direct to a fragment and have the same text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float scoreFromFragment;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float scoreFromOffdomain;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float scoreFromOffdomainFragment;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float scoreFromOnsite;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float scoreFromOnsiteFragment;

  /**
   * The sum/aggregate of the anchor scores that direct to a different wiki title and have the same
   * text. NOTE: url direct to a fragment score is not included in this value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float scoreFromRedirect;

  /**
   * The total score volume used for normalization.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float totalVolume;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float totalVolumeFromOffdomain;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float totalVolumeFromOnsite;

  /**
   * The set of (equivalent from WebRef point of view) anchors used to produce this segment.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefAnchorIndices getAnchorIndices() {
    return anchorIndices;
  }

  /**
   * The set of (equivalent from WebRef point of view) anchors used to produce this segment.
   * @param anchorIndices anchorIndices or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setAnchorIndices(RepositoryWebrefAnchorIndices anchorIndices) {
    this.anchorIndices = anchorIndices;
    return this;
  }

  /**
   * The anchor text. Note that the normalized text is not populated.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefLocalizedString getAnchorText() {
    return anchorText;
  }

  /**
   * The anchor text. Note that the normalized text is not populated.
   * @param anchorText anchorText or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setAnchorText(RepositoryWebrefLocalizedString anchorText) {
    this.anchorText = anchorText;
    return this;
  }

  /**
   * The number of times we see this anchor text.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getCount() {
    return count;
  }

  /**
   * The number of times we see this anchor text.
   * @param count count or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setCount(java.math.BigInteger count) {
    this.count = count;
    return this;
  }

  /**
   * Count, score, normalized score, and volume of offdomain anchors.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getCountFromOffdomain() {
    return countFromOffdomain;
  }

  /**
   * Count, score, normalized score, and volume of offdomain anchors.
   * @param countFromOffdomain countFromOffdomain or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setCountFromOffdomain(java.math.BigInteger countFromOffdomain) {
    this.countFromOffdomain = countFromOffdomain;
    return this;
  }

  /**
   * Count, score, normalized score, and volume of onsite anchors.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getCountFromOnsite() {
    return countFromOnsite;
  }

  /**
   * Count, score, normalized score, and volume of onsite anchors.
   * @param countFromOnsite countFromOnsite or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setCountFromOnsite(java.math.BigInteger countFromOnsite) {
    this.countFromOnsite = countFromOnsite;
    return this;
  }

  /**
   * The normalized score, which is computed from the score and the total_volume.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNormalizedScore() {
    return normalizedScore;
  }

  /**
   * The normalized score, which is computed from the score and the total_volume.
   * @param normalizedScore normalizedScore or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setNormalizedScore(java.lang.Float normalizedScore) {
    this.normalizedScore = normalizedScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getNormalizedScoreFromOffdomain() {
    return normalizedScoreFromOffdomain;
  }

  /**
   * @param normalizedScoreFromOffdomain normalizedScoreFromOffdomain or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setNormalizedScoreFromOffdomain(java.lang.Float normalizedScoreFromOffdomain) {
    this.normalizedScoreFromOffdomain = normalizedScoreFromOffdomain;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getNormalizedScoreFromOnsite() {
    return normalizedScoreFromOnsite;
  }

  /**
   * @param normalizedScoreFromOnsite normalizedScoreFromOnsite or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setNormalizedScoreFromOnsite(java.lang.Float normalizedScoreFromOnsite) {
    this.normalizedScoreFromOnsite = normalizedScoreFromOnsite;
    return this;
  }

  /**
   * The sum/aggregate of the anchor scores that have the same text.
   * @return value or {@code null} for none
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * The sum/aggregate of the anchor scores that have the same text.
   * @param score score or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setScore(java.lang.Float score) {
    this.score = score;
    return this;
  }

  /**
   * The sum/aggregate of the anchor scores that direct to a fragment and have the same text.
   * @return value or {@code null} for none
   */
  public java.lang.Float getScoreFromFragment() {
    return scoreFromFragment;
  }

  /**
   * The sum/aggregate of the anchor scores that direct to a fragment and have the same text.
   * @param scoreFromFragment scoreFromFragment or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setScoreFromFragment(java.lang.Float scoreFromFragment) {
    this.scoreFromFragment = scoreFromFragment;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getScoreFromOffdomain() {
    return scoreFromOffdomain;
  }

  /**
   * @param scoreFromOffdomain scoreFromOffdomain or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setScoreFromOffdomain(java.lang.Float scoreFromOffdomain) {
    this.scoreFromOffdomain = scoreFromOffdomain;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getScoreFromOffdomainFragment() {
    return scoreFromOffdomainFragment;
  }

  /**
   * @param scoreFromOffdomainFragment scoreFromOffdomainFragment or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setScoreFromOffdomainFragment(java.lang.Float scoreFromOffdomainFragment) {
    this.scoreFromOffdomainFragment = scoreFromOffdomainFragment;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getScoreFromOnsite() {
    return scoreFromOnsite;
  }

  /**
   * @param scoreFromOnsite scoreFromOnsite or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setScoreFromOnsite(java.lang.Float scoreFromOnsite) {
    this.scoreFromOnsite = scoreFromOnsite;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getScoreFromOnsiteFragment() {
    return scoreFromOnsiteFragment;
  }

  /**
   * @param scoreFromOnsiteFragment scoreFromOnsiteFragment or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setScoreFromOnsiteFragment(java.lang.Float scoreFromOnsiteFragment) {
    this.scoreFromOnsiteFragment = scoreFromOnsiteFragment;
    return this;
  }

  /**
   * The sum/aggregate of the anchor scores that direct to a different wiki title and have the same
   * text. NOTE: url direct to a fragment score is not included in this value.
   * @return value or {@code null} for none
   */
  public java.lang.Float getScoreFromRedirect() {
    return scoreFromRedirect;
  }

  /**
   * The sum/aggregate of the anchor scores that direct to a different wiki title and have the same
   * text. NOTE: url direct to a fragment score is not included in this value.
   * @param scoreFromRedirect scoreFromRedirect or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setScoreFromRedirect(java.lang.Float scoreFromRedirect) {
    this.scoreFromRedirect = scoreFromRedirect;
    return this;
  }

  /**
   * The total score volume used for normalization.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTotalVolume() {
    return totalVolume;
  }

  /**
   * The total score volume used for normalization.
   * @param totalVolume totalVolume or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setTotalVolume(java.lang.Float totalVolume) {
    this.totalVolume = totalVolume;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getTotalVolumeFromOffdomain() {
    return totalVolumeFromOffdomain;
  }

  /**
   * @param totalVolumeFromOffdomain totalVolumeFromOffdomain or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setTotalVolumeFromOffdomain(java.lang.Float totalVolumeFromOffdomain) {
    this.totalVolumeFromOffdomain = totalVolumeFromOffdomain;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getTotalVolumeFromOnsite() {
    return totalVolumeFromOnsite;
  }

  /**
   * @param totalVolumeFromOnsite totalVolumeFromOnsite or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchor setTotalVolumeFromOnsite(java.lang.Float totalVolumeFromOnsite) {
    this.totalVolumeFromOnsite = totalVolumeFromOnsite;
    return this;
  }

  @Override
  public RepositoryWebrefSimplifiedAnchor set(String fieldName, Object value) {
    return (RepositoryWebrefSimplifiedAnchor) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefSimplifiedAnchor clone() {
    return (RepositoryWebrefSimplifiedAnchor) super.clone();
  }

}
