/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.content.model;

/**
 * Topic trends fields requested by the merchant in the query. Field values are only set if the
 * merchant queries `TopicTrendsView`. Forecast data can be queried up to 13 weeks by passing a
 * future date in the `date` field. Historical data is measured daily, and forecasted data is
 * projected weekly. All data points are normalized based on the highest data points returned in the
 * response. If you make separate queries with different date ranges, you might see different values
 * for the same date in each response. The recommended way to get a trend score of a topic is
 * `last7_days_search_interest / last{$day}_days_search_interest - 1`. You can view trends for up to
 * eight topics at a time.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Content API for Shopping. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TopicTrends extends com.google.api.client.json.GenericJson {

  /**
   * Country trends are calculated for. Must be a two-letter country code (ISO 3166-1-alpha-2 code),
   * for example, `“US”`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String customerCountryCode;

  /**
   * Date the trend score was retrieved.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date date;

  /**
   * Search interest in the last 120 days, with the same normalization as search_interest. This
   * field is only present for a past date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double last120DaysSearchInterest;

  /**
   * Search interest in the last 30 days, with the same normalization as search_interest. This field
   * is only present for a past date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double last30DaysSearchInterest;

  /**
   * Search interest in the last 7 days, with the same normalization as search_interest. This field
   * is only present for a past date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double last7DaysSearchInterest;

  /**
   * Search interest in the last 90 days, with the same normalization as search_interest. This field
   * is only present for a past date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double last90DaysSearchInterest;

  /**
   * Estimated search interest in the next 7 days, with the same normalization as search_interest.
   * This field is only present for a future date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double next7DaysSearchInterest;

  /**
   * Daily search interest, normalized to the time and country to make comparisons easier, with 100
   * representing peak popularity (from 0 to 100) for the requested time period and location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double searchInterest;

  /**
   * Google-provided topic trends are calculated for. Only top eight topics are returned. Topic is
   * what shoppers are searching for on Google, grouped by the same concept.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String topic;

  /**
   * Country trends are calculated for. Must be a two-letter country code (ISO 3166-1-alpha-2 code),
   * for example, `“US”`.
   * @return value or {@code null} for none
   */
  public java.lang.String getCustomerCountryCode() {
    return customerCountryCode;
  }

  /**
   * Country trends are calculated for. Must be a two-letter country code (ISO 3166-1-alpha-2 code),
   * for example, `“US”`.
   * @param customerCountryCode customerCountryCode or {@code null} for none
   */
  public TopicTrends setCustomerCountryCode(java.lang.String customerCountryCode) {
    this.customerCountryCode = customerCountryCode;
    return this;
  }

  /**
   * Date the trend score was retrieved.
   * @return value or {@code null} for none
   */
  public Date getDate() {
    return date;
  }

  /**
   * Date the trend score was retrieved.
   * @param date date or {@code null} for none
   */
  public TopicTrends setDate(Date date) {
    this.date = date;
    return this;
  }

  /**
   * Search interest in the last 120 days, with the same normalization as search_interest. This
   * field is only present for a past date.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLast120DaysSearchInterest() {
    return last120DaysSearchInterest;
  }

  /**
   * Search interest in the last 120 days, with the same normalization as search_interest. This
   * field is only present for a past date.
   * @param last120DaysSearchInterest last120DaysSearchInterest or {@code null} for none
   */
  public TopicTrends setLast120DaysSearchInterest(java.lang.Double last120DaysSearchInterest) {
    this.last120DaysSearchInterest = last120DaysSearchInterest;
    return this;
  }

  /**
   * Search interest in the last 30 days, with the same normalization as search_interest. This field
   * is only present for a past date.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLast30DaysSearchInterest() {
    return last30DaysSearchInterest;
  }

  /**
   * Search interest in the last 30 days, with the same normalization as search_interest. This field
   * is only present for a past date.
   * @param last30DaysSearchInterest last30DaysSearchInterest or {@code null} for none
   */
  public TopicTrends setLast30DaysSearchInterest(java.lang.Double last30DaysSearchInterest) {
    this.last30DaysSearchInterest = last30DaysSearchInterest;
    return this;
  }

  /**
   * Search interest in the last 7 days, with the same normalization as search_interest. This field
   * is only present for a past date.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLast7DaysSearchInterest() {
    return last7DaysSearchInterest;
  }

  /**
   * Search interest in the last 7 days, with the same normalization as search_interest. This field
   * is only present for a past date.
   * @param last7DaysSearchInterest last7DaysSearchInterest or {@code null} for none
   */
  public TopicTrends setLast7DaysSearchInterest(java.lang.Double last7DaysSearchInterest) {
    this.last7DaysSearchInterest = last7DaysSearchInterest;
    return this;
  }

  /**
   * Search interest in the last 90 days, with the same normalization as search_interest. This field
   * is only present for a past date.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLast90DaysSearchInterest() {
    return last90DaysSearchInterest;
  }

  /**
   * Search interest in the last 90 days, with the same normalization as search_interest. This field
   * is only present for a past date.
   * @param last90DaysSearchInterest last90DaysSearchInterest or {@code null} for none
   */
  public TopicTrends setLast90DaysSearchInterest(java.lang.Double last90DaysSearchInterest) {
    this.last90DaysSearchInterest = last90DaysSearchInterest;
    return this;
  }

  /**
   * Estimated search interest in the next 7 days, with the same normalization as search_interest.
   * This field is only present for a future date.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNext7DaysSearchInterest() {
    return next7DaysSearchInterest;
  }

  /**
   * Estimated search interest in the next 7 days, with the same normalization as search_interest.
   * This field is only present for a future date.
   * @param next7DaysSearchInterest next7DaysSearchInterest or {@code null} for none
   */
  public TopicTrends setNext7DaysSearchInterest(java.lang.Double next7DaysSearchInterest) {
    this.next7DaysSearchInterest = next7DaysSearchInterest;
    return this;
  }

  /**
   * Daily search interest, normalized to the time and country to make comparisons easier, with 100
   * representing peak popularity (from 0 to 100) for the requested time period and location.
   * @return value or {@code null} for none
   */
  public java.lang.Double getSearchInterest() {
    return searchInterest;
  }

  /**
   * Daily search interest, normalized to the time and country to make comparisons easier, with 100
   * representing peak popularity (from 0 to 100) for the requested time period and location.
   * @param searchInterest searchInterest or {@code null} for none
   */
  public TopicTrends setSearchInterest(java.lang.Double searchInterest) {
    this.searchInterest = searchInterest;
    return this;
  }

  /**
   * Google-provided topic trends are calculated for. Only top eight topics are returned. Topic is
   * what shoppers are searching for on Google, grouped by the same concept.
   * @return value or {@code null} for none
   */
  public java.lang.String getTopic() {
    return topic;
  }

  /**
   * Google-provided topic trends are calculated for. Only top eight topics are returned. Topic is
   * what shoppers are searching for on Google, grouped by the same concept.
   * @param topic topic or {@code null} for none
   */
  public TopicTrends setTopic(java.lang.String topic) {
    this.topic = topic;
    return this;
  }

  @Override
  public TopicTrends set(String fieldName, Object value) {
    return (TopicTrends) super.set(fieldName, value);
  }

  @Override
  public TopicTrends clone() {
    return (TopicTrends) super.clone();
  }

}
