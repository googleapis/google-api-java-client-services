/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Necessary information of lightweight token pattern with entity retrieval to pass to downstream
 * clients. For example: FpTokenRange: normalized_text: "zurichben" language: Hungarian
 * retrieved_entity: /m/08966 (with name "zurich") will get: MatchedLightweightToken:
 * LightweightTokenType: "LOCATIVE" begin_offset: 6 end_offset: 9 pattern_id: 8141703461898598811
 * source_entity_index: 0 FpTokenRange: normalized_text: "egyesult allamokott" language: Hungarian
 * retrieved_entity: /m/09c7w0 (with name "egyesult allamok") will get: MatchedLightweightToken:
 * LightweightTokenType: "LOCATIVE" begin_offset: 16 end_offset: 19 pattern_id: 10449962977910715124
 * source_entity_index: 0 Note that begin_offset and end_offset marks the input byte range of the
 * matched input text. For example, if the input text is [tannlegas] in Norwegian, this matches with
 * the rewrite rule "*e:*as" to transform "tannlegas" to "tannlege". The matched byte range is [7,
 * 9) on "as", therefore begin_offset = 7 and end_offset = 9. This must not be confused with the
 * rewritten range [7, 8) on "e". Also, keep in mind these are byte offsets, not codepoints.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefLightweightTokensMatchedLightweightToken extends com.google.api.client.json.GenericJson {

  /**
   * The byte offset of the beging of the additional lightweight token match. e.g. the prefix
   * pattern of the circumfix.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer additionalBeginOffset;

  /**
   * The byte offset of the end of the additional lightweight token match. e.g. the suffix pattern
   * of the circumfix.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer additionalEndOffset;

  /**
   * The byte offset of the begin of the lightweight token match within each range. The default
   * value of -1 (std::string::npos) means that there's no affix or adposition detected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer beginOffset;

  /**
   * The byte offset of the end of the lightweight token match within each range. The default value
   * of 0 means that there's no affix or adposition detected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer endOffset;

  /**
   * Matched pattern Id which will be used to retrieve back pattern features. Pattern id is only
   * populated for Enricher model.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger patternId;

  /**
   * The index of the source entity in the resulting WebrefEntities or WebrefEntitiesWrapper, to
   * which the lightweight token rule is applied. This field is only populated at the end of Qref
   * scorer when we are sure which source entity should output.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sourceEntityIndex;

  /**
   * The type of the lightweight token match, which provides the semantic information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The byte offset of the beging of the additional lightweight token match. e.g. the prefix
   * pattern of the circumfix.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAdditionalBeginOffset() {
    return additionalBeginOffset;
  }

  /**
   * The byte offset of the beging of the additional lightweight token match. e.g. the prefix
   * pattern of the circumfix.
   * @param additionalBeginOffset additionalBeginOffset or {@code null} for none
   */
  public RepositoryWebrefLightweightTokensMatchedLightweightToken setAdditionalBeginOffset(java.lang.Integer additionalBeginOffset) {
    this.additionalBeginOffset = additionalBeginOffset;
    return this;
  }

  /**
   * The byte offset of the end of the additional lightweight token match. e.g. the suffix pattern
   * of the circumfix.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAdditionalEndOffset() {
    return additionalEndOffset;
  }

  /**
   * The byte offset of the end of the additional lightweight token match. e.g. the suffix pattern
   * of the circumfix.
   * @param additionalEndOffset additionalEndOffset or {@code null} for none
   */
  public RepositoryWebrefLightweightTokensMatchedLightweightToken setAdditionalEndOffset(java.lang.Integer additionalEndOffset) {
    this.additionalEndOffset = additionalEndOffset;
    return this;
  }

  /**
   * The byte offset of the begin of the lightweight token match within each range. The default
   * value of -1 (std::string::npos) means that there's no affix or adposition detected.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBeginOffset() {
    return beginOffset;
  }

  /**
   * The byte offset of the begin of the lightweight token match within each range. The default
   * value of -1 (std::string::npos) means that there's no affix or adposition detected.
   * @param beginOffset beginOffset or {@code null} for none
   */
  public RepositoryWebrefLightweightTokensMatchedLightweightToken setBeginOffset(java.lang.Integer beginOffset) {
    this.beginOffset = beginOffset;
    return this;
  }

  /**
   * The byte offset of the end of the lightweight token match within each range. The default value
   * of 0 means that there's no affix or adposition detected.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEndOffset() {
    return endOffset;
  }

  /**
   * The byte offset of the end of the lightweight token match within each range. The default value
   * of 0 means that there's no affix or adposition detected.
   * @param endOffset endOffset or {@code null} for none
   */
  public RepositoryWebrefLightweightTokensMatchedLightweightToken setEndOffset(java.lang.Integer endOffset) {
    this.endOffset = endOffset;
    return this;
  }

  /**
   * Matched pattern Id which will be used to retrieve back pattern features. Pattern id is only
   * populated for Enricher model.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getPatternId() {
    return patternId;
  }

  /**
   * Matched pattern Id which will be used to retrieve back pattern features. Pattern id is only
   * populated for Enricher model.
   * @param patternId patternId or {@code null} for none
   */
  public RepositoryWebrefLightweightTokensMatchedLightweightToken setPatternId(java.math.BigInteger patternId) {
    this.patternId = patternId;
    return this;
  }

  /**
   * The index of the source entity in the resulting WebrefEntities or WebrefEntitiesWrapper, to
   * which the lightweight token rule is applied. This field is only populated at the end of Qref
   * scorer when we are sure which source entity should output.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSourceEntityIndex() {
    return sourceEntityIndex;
  }

  /**
   * The index of the source entity in the resulting WebrefEntities or WebrefEntitiesWrapper, to
   * which the lightweight token rule is applied. This field is only populated at the end of Qref
   * scorer when we are sure which source entity should output.
   * @param sourceEntityIndex sourceEntityIndex or {@code null} for none
   */
  public RepositoryWebrefLightweightTokensMatchedLightweightToken setSourceEntityIndex(java.lang.Integer sourceEntityIndex) {
    this.sourceEntityIndex = sourceEntityIndex;
    return this;
  }

  /**
   * The type of the lightweight token match, which provides the semantic information.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The type of the lightweight token match, which provides the semantic information.
   * @param type type or {@code null} for none
   */
  public RepositoryWebrefLightweightTokensMatchedLightweightToken setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public RepositoryWebrefLightweightTokensMatchedLightweightToken set(String fieldName, Object value) {
    return (RepositoryWebrefLightweightTokensMatchedLightweightToken) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefLightweightTokensMatchedLightweightToken clone() {
    return (RepositoryWebrefLightweightTokensMatchedLightweightToken) super.clone();
  }

}
