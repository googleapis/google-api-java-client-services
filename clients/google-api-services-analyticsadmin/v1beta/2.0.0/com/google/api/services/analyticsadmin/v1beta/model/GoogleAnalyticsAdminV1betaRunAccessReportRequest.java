/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.analyticsadmin.v1beta.model;

/**
 * The request for a Data Access Record Report.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Analytics Admin API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAnalyticsAdminV1betaRunAccessReportRequest extends com.google.api.client.json.GenericJson {

  /**
   * Date ranges of access records to read. If multiple date ranges are requested, each response row
   * will contain a zero based date range index. If two date ranges overlap, the access records for
   * the overlapping days is included in the response rows for both date ranges. Requests are
   * allowed up to 2 date ranges.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleAnalyticsAdminV1betaAccessDateRange> dateRanges;

  static {
    // hack to force ProGuard to consider GoogleAnalyticsAdminV1betaAccessDateRange used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleAnalyticsAdminV1betaAccessDateRange.class);
  }

  /**
   * Dimension filters let you restrict report response to specific dimension values which match the
   * filter. For example, filtering on access records of a single user. To learn more, see
   * [Fundamentals of Dimension Filters](https://developers.google.com/analytics/devguides/reporting
   * /data/v1/basics#dimension_filters) for examples. Metrics cannot be used in this filter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAnalyticsAdminV1betaAccessFilterExpression dimensionFilter;

  /**
   * The dimensions requested and displayed in the response. Requests are allowed up to 9
   * dimensions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleAnalyticsAdminV1betaAccessDimension> dimensions;

  static {
    // hack to force ProGuard to consider GoogleAnalyticsAdminV1betaAccessDimension used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleAnalyticsAdminV1betaAccessDimension.class);
  }

  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a
   * maximum of 100,000 rows per request, no matter how many you ask for. `limit` must be positive.
   * The API may return fewer rows than the requested `limit`, if there aren't as many remaining
   * rows as the `limit`. For instance, there are fewer than 300 possible values for the dimension
   * `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you
   * set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](
   * https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long limit;

  /**
   * Metric filters allow you to restrict report response to specific metric values which match the
   * filter. Metric filters are applied after aggregating the report's rows, similar to SQL having-
   * clause. Dimensions cannot be used in this filter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAnalyticsAdminV1betaAccessFilterExpression metricFilter;

  /**
   * The metrics requested and displayed in the response. Requests are allowed up to 10 metrics.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleAnalyticsAdminV1betaAccessMetric> metrics;

  static {
    // hack to force ProGuard to consider GoogleAnalyticsAdminV1betaAccessMetric used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleAnalyticsAdminV1betaAccessMetric.class);
  }

  /**
   * The row count of the start row. The first row is counted as row 0. If offset is unspecified, it
   * is treated as 0. If offset is zero, then this method will return the first page of results with
   * `limit` entries. To learn more about this pagination parameter, see [Pagination](https://develo
   * pers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long offset;

  /**
   * Specifies how rows are ordered in the response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleAnalyticsAdminV1betaAccessOrderBy> orderBys;

  static {
    // hack to force ProGuard to consider GoogleAnalyticsAdminV1betaAccessOrderBy used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleAnalyticsAdminV1betaAccessOrderBy.class);
  }

  /**
   * Toggles whether to return the current state of this Analytics Property's quota. Quota is
   * returned in [AccessQuota](#AccessQuota). For account-level requests, this field must be false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean returnEntityQuota;

  /**
   * This request's time zone if specified. If unspecified, the property's time zone is used. The
   * request's time zone is used to interpret the start & end dates of the report. Formatted as
   * strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example
   * "America/New_York" or "Asia/Tokyo".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timeZone;

  /**
   * Date ranges of access records to read. If multiple date ranges are requested, each response row
   * will contain a zero based date range index. If two date ranges overlap, the access records for
   * the overlapping days is included in the response rows for both date ranges. Requests are
   * allowed up to 2 date ranges.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleAnalyticsAdminV1betaAccessDateRange> getDateRanges() {
    return dateRanges;
  }

  /**
   * Date ranges of access records to read. If multiple date ranges are requested, each response row
   * will contain a zero based date range index. If two date ranges overlap, the access records for
   * the overlapping days is included in the response rows for both date ranges. Requests are
   * allowed up to 2 date ranges.
   * @param dateRanges dateRanges or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setDateRanges(java.util.List<GoogleAnalyticsAdminV1betaAccessDateRange> dateRanges) {
    this.dateRanges = dateRanges;
    return this;
  }

  /**
   * Dimension filters let you restrict report response to specific dimension values which match the
   * filter. For example, filtering on access records of a single user. To learn more, see
   * [Fundamentals of Dimension Filters](https://developers.google.com/analytics/devguides/reporting
   * /data/v1/basics#dimension_filters) for examples. Metrics cannot be used in this filter.
   * @return value or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaAccessFilterExpression getDimensionFilter() {
    return dimensionFilter;
  }

  /**
   * Dimension filters let you restrict report response to specific dimension values which match the
   * filter. For example, filtering on access records of a single user. To learn more, see
   * [Fundamentals of Dimension Filters](https://developers.google.com/analytics/devguides/reporting
   * /data/v1/basics#dimension_filters) for examples. Metrics cannot be used in this filter.
   * @param dimensionFilter dimensionFilter or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setDimensionFilter(GoogleAnalyticsAdminV1betaAccessFilterExpression dimensionFilter) {
    this.dimensionFilter = dimensionFilter;
    return this;
  }

  /**
   * The dimensions requested and displayed in the response. Requests are allowed up to 9
   * dimensions.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleAnalyticsAdminV1betaAccessDimension> getDimensions() {
    return dimensions;
  }

  /**
   * The dimensions requested and displayed in the response. Requests are allowed up to 9
   * dimensions.
   * @param dimensions dimensions or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setDimensions(java.util.List<GoogleAnalyticsAdminV1betaAccessDimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a
   * maximum of 100,000 rows per request, no matter how many you ask for. `limit` must be positive.
   * The API may return fewer rows than the requested `limit`, if there aren't as many remaining
   * rows as the `limit`. For instance, there are fewer than 300 possible values for the dimension
   * `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you
   * set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](
   * https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @return value or {@code null} for none
   */
  public java.lang.Long getLimit() {
    return limit;
  }

  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a
   * maximum of 100,000 rows per request, no matter how many you ask for. `limit` must be positive.
   * The API may return fewer rows than the requested `limit`, if there aren't as many remaining
   * rows as the `limit`. For instance, there are fewer than 300 possible values for the dimension
   * `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you
   * set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](
   * https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @param limit limit or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setLimit(java.lang.Long limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Metric filters allow you to restrict report response to specific metric values which match the
   * filter. Metric filters are applied after aggregating the report's rows, similar to SQL having-
   * clause. Dimensions cannot be used in this filter.
   * @return value or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaAccessFilterExpression getMetricFilter() {
    return metricFilter;
  }

  /**
   * Metric filters allow you to restrict report response to specific metric values which match the
   * filter. Metric filters are applied after aggregating the report's rows, similar to SQL having-
   * clause. Dimensions cannot be used in this filter.
   * @param metricFilter metricFilter or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setMetricFilter(GoogleAnalyticsAdminV1betaAccessFilterExpression metricFilter) {
    this.metricFilter = metricFilter;
    return this;
  }

  /**
   * The metrics requested and displayed in the response. Requests are allowed up to 10 metrics.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleAnalyticsAdminV1betaAccessMetric> getMetrics() {
    return metrics;
  }

  /**
   * The metrics requested and displayed in the response. Requests are allowed up to 10 metrics.
   * @param metrics metrics or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setMetrics(java.util.List<GoogleAnalyticsAdminV1betaAccessMetric> metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * The row count of the start row. The first row is counted as row 0. If offset is unspecified, it
   * is treated as 0. If offset is zero, then this method will return the first page of results with
   * `limit` entries. To learn more about this pagination parameter, see [Pagination](https://develo
   * pers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @return value or {@code null} for none
   */
  public java.lang.Long getOffset() {
    return offset;
  }

  /**
   * The row count of the start row. The first row is counted as row 0. If offset is unspecified, it
   * is treated as 0. If offset is zero, then this method will return the first page of results with
   * `limit` entries. To learn more about this pagination parameter, see [Pagination](https://develo
   * pers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @param offset offset or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setOffset(java.lang.Long offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Specifies how rows are ordered in the response.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleAnalyticsAdminV1betaAccessOrderBy> getOrderBys() {
    return orderBys;
  }

  /**
   * Specifies how rows are ordered in the response.
   * @param orderBys orderBys or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setOrderBys(java.util.List<GoogleAnalyticsAdminV1betaAccessOrderBy> orderBys) {
    this.orderBys = orderBys;
    return this;
  }

  /**
   * Toggles whether to return the current state of this Analytics Property's quota. Quota is
   * returned in [AccessQuota](#AccessQuota). For account-level requests, this field must be false.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReturnEntityQuota() {
    return returnEntityQuota;
  }

  /**
   * Toggles whether to return the current state of this Analytics Property's quota. Quota is
   * returned in [AccessQuota](#AccessQuota). For account-level requests, this field must be false.
   * @param returnEntityQuota returnEntityQuota or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setReturnEntityQuota(java.lang.Boolean returnEntityQuota) {
    this.returnEntityQuota = returnEntityQuota;
    return this;
  }

  /**
   * This request's time zone if specified. If unspecified, the property's time zone is used. The
   * request's time zone is used to interpret the start & end dates of the report. Formatted as
   * strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example
   * "America/New_York" or "Asia/Tokyo".
   * @return value or {@code null} for none
   */
  public java.lang.String getTimeZone() {
    return timeZone;
  }

  /**
   * This request's time zone if specified. If unspecified, the property's time zone is used. The
   * request's time zone is used to interpret the start & end dates of the report. Formatted as
   * strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example
   * "America/New_York" or "Asia/Tokyo".
   * @param timeZone timeZone or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest setTimeZone(java.lang.String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  @Override
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest set(String fieldName, Object value) {
    return (GoogleAnalyticsAdminV1betaRunAccessReportRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleAnalyticsAdminV1betaRunAccessReportRequest clone() {
    return (GoogleAnalyticsAdminV1betaRunAccessReportRequest) super.clone();
  }

}
