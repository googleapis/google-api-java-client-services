/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1.model;

/**
 * The user preferences relating to Google Cloud VMware Engine target platform.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VmwareEnginePreferences extends com.google.api.client.json.GenericJson {

  /**
   * Commitment plan to consider when calculating costs for virtual machine insights and
   * recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good
   * value to start with.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String commitmentPlan;

  /**
   * CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double cpuOvercommitRatio;

  /**
   * Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double memoryOvercommitRatio;

  /**
   * The Deduplication and Compression ratio is based on the logical (Used Before) space required to
   * store data before applying deduplication and compression, in relation to the physical (Used
   * After) space required after applying deduplication and compression. Specifically, the ratio is
   * the Used Before space divided by the Used After space. For example, if the Used Before space is
   * 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x.
   * Acceptable values are between 1.0 and 4.0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double storageDeduplicationCompressionRatio;

  /**
   * Commitment plan to consider when calculating costs for virtual machine insights and
   * recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good
   * value to start with.
   * @return value or {@code null} for none
   */
  public java.lang.String getCommitmentPlan() {
    return commitmentPlan;
  }

  /**
   * Commitment plan to consider when calculating costs for virtual machine insights and
   * recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good
   * value to start with.
   * @param commitmentPlan commitmentPlan or {@code null} for none
   */
  public VmwareEnginePreferences setCommitmentPlan(java.lang.String commitmentPlan) {
    this.commitmentPlan = commitmentPlan;
    return this;
  }

  /**
   * CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.
   * @return value or {@code null} for none
   */
  public java.lang.Double getCpuOvercommitRatio() {
    return cpuOvercommitRatio;
  }

  /**
   * CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.
   * @param cpuOvercommitRatio cpuOvercommitRatio or {@code null} for none
   */
  public VmwareEnginePreferences setCpuOvercommitRatio(java.lang.Double cpuOvercommitRatio) {
    this.cpuOvercommitRatio = cpuOvercommitRatio;
    return this;
  }

  /**
   * Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
   * @return value or {@code null} for none
   */
  public java.lang.Double getMemoryOvercommitRatio() {
    return memoryOvercommitRatio;
  }

  /**
   * Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
   * @param memoryOvercommitRatio memoryOvercommitRatio or {@code null} for none
   */
  public VmwareEnginePreferences setMemoryOvercommitRatio(java.lang.Double memoryOvercommitRatio) {
    this.memoryOvercommitRatio = memoryOvercommitRatio;
    return this;
  }

  /**
   * The Deduplication and Compression ratio is based on the logical (Used Before) space required to
   * store data before applying deduplication and compression, in relation to the physical (Used
   * After) space required after applying deduplication and compression. Specifically, the ratio is
   * the Used Before space divided by the Used After space. For example, if the Used Before space is
   * 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x.
   * Acceptable values are between 1.0 and 4.0.
   * @return value or {@code null} for none
   */
  public java.lang.Double getStorageDeduplicationCompressionRatio() {
    return storageDeduplicationCompressionRatio;
  }

  /**
   * The Deduplication and Compression ratio is based on the logical (Used Before) space required to
   * store data before applying deduplication and compression, in relation to the physical (Used
   * After) space required after applying deduplication and compression. Specifically, the ratio is
   * the Used Before space divided by the Used After space. For example, if the Used Before space is
   * 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x.
   * Acceptable values are between 1.0 and 4.0.
   * @param storageDeduplicationCompressionRatio storageDeduplicationCompressionRatio or {@code null} for none
   */
  public VmwareEnginePreferences setStorageDeduplicationCompressionRatio(java.lang.Double storageDeduplicationCompressionRatio) {
    this.storageDeduplicationCompressionRatio = storageDeduplicationCompressionRatio;
    return this;
  }

  @Override
  public VmwareEnginePreferences set(String fieldName, Object value) {
    return (VmwareEnginePreferences) super.set(fieldName, value);
  }

  @Override
  public VmwareEnginePreferences clone() {
    return (VmwareEnginePreferences) super.clone();
  }

}
