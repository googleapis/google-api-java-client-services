/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Value is derived from previous task state (go/taskstates).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState extends com.google.api.client.json.GenericJson {

  /**
   * Argument names in the DialogIntentState that the argument corresponds to. This is repeated so
   * it can handle complex argument update paths. (ordered from outermost argument to innermost
   * argument)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> argumentName;

  /**
   * The span(s) in the current query (if any) used to resolve the previous query's DIS. Example: U:
   * Barack Obama G: Do you want his age or his height? U: The first one. G: Age(/m/obama) In this
   * example, the intent is derived from the previous query's DIS, but also needs to be resolved in
   * the current query since the user was presented with multiple options.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingAnnotationEvalData> currentQueryEvalData;

  /**
   * The id of the specific DialogIntentState instance that the argument corresponds to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dialogIntentStateId;

  /**
   * Intent name of the DialogIntentState that the argument corresponds to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String intentName;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidate listCandidate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCall previousFunctionCall;

  /**
   * Argument names in the DialogIntentState that the argument corresponds to. This is repeated so
   * it can handle complex argument update paths. (ordered from outermost argument to innermost
   * argument)
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getArgumentName() {
    return argumentName;
  }

  /**
   * Argument names in the DialogIntentState that the argument corresponds to. This is repeated so
   * it can handle complex argument update paths. (ordered from outermost argument to innermost
   * argument)
   * @param argumentName argumentName or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState setArgumentName(java.util.List<java.lang.String> argumentName) {
    this.argumentName = argumentName;
    return this;
  }

  /**
   * The span(s) in the current query (if any) used to resolve the previous query's DIS. Example: U:
   * Barack Obama G: Do you want his age or his height? U: The first one. G: Age(/m/obama) In this
   * example, the intent is derived from the previous query's DIS, but also needs to be resolved in
   * the current query since the user was presented with multiple options.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingAnnotationEvalData> getCurrentQueryEvalData() {
    return currentQueryEvalData;
  }

  /**
   * The span(s) in the current query (if any) used to resolve the previous query's DIS. Example: U:
   * Barack Obama G: Do you want his age or his height? U: The first one. G: Age(/m/obama) In this
   * example, the intent is derived from the previous query's DIS, but also needs to be resolved in
   * the current query since the user was presented with multiple options.
   * @param currentQueryEvalData currentQueryEvalData or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState setCurrentQueryEvalData(java.util.List<NlpSemanticParsingAnnotationEvalData> currentQueryEvalData) {
    this.currentQueryEvalData = currentQueryEvalData;
    return this;
  }

  /**
   * The id of the specific DialogIntentState instance that the argument corresponds to.
   * @return value or {@code null} for none
   */
  public java.lang.String getDialogIntentStateId() {
    return dialogIntentStateId;
  }

  /**
   * The id of the specific DialogIntentState instance that the argument corresponds to.
   * @param dialogIntentStateId dialogIntentStateId or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState setDialogIntentStateId(java.lang.String dialogIntentStateId) {
    this.dialogIntentStateId = dialogIntentStateId;
    return this;
  }

  /**
   * Intent name of the DialogIntentState that the argument corresponds to.
   * @return value or {@code null} for none
   */
  public java.lang.String getIntentName() {
    return intentName;
  }

  /**
   * Intent name of the DialogIntentState that the argument corresponds to.
   * @param intentName intentName or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState setIntentName(java.lang.String intentName) {
    this.intentName = intentName;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidate getListCandidate() {
    return listCandidate;
  }

  /**
   * @param listCandidate listCandidate or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState setListCandidate(KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidate listCandidate) {
    this.listCandidate = listCandidate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCall getPreviousFunctionCall() {
    return previousFunctionCall;
  }

  /**
   * @param previousFunctionCall previousFunctionCall or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState setPreviousFunctionCall(KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCall previousFunctionCall) {
    this.previousFunctionCall = previousFunctionCall;
    return this;
  }

  @Override
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState set(String fieldName, Object value) {
    return (KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState) super.set(fieldName, value);
  }

  @Override
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState clone() {
    return (KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState) super.clone();
  }

}
