/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.tpu.v2alpha1.model;

/**
 * Boot disk configurations.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud TPU API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BootDiskConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Customer encryption key for boot disk.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CustomerEncryptionKey customerEncryptionKey;

  /**
   * Optional. Size of the boot disk in GB. It must be larger than or equal to the size of the
   * image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long diskSizeGb;

  /**
   * Optional. Whether the boot disk will be created with confidential compute mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enableConfidentialCompute;

  /**
   * Optional. Indicates how many IOPS to provision for the disk. This sets the number of I/O
   * operations per second that the disk can handle. To learn more about IOPS, see [Provisioning
   * persistent disk
   * performance](https://cloud.google.com/compute/docs/disks/performance#provisioned-iops).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long provisionedIops;

  /**
   * Optional. Indicates how much throughput to provision for the disk. This sets the number of
   * throughput MB per second that the disk can handle.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long provisionedThroughput;

  /**
   * Optional. Image from which boot disk is to be created. If not specified, the default image for
   * the runtime version will be used. Example: `projects/$PROJECT_ID/global/images/$IMAGE_NAME`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceImage;

  /**
   * Optional. The storage pool in which the boot disk is created. You can provide this as a partial
   * or full URL to the resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String storagePool;

  /**
   * Optional. Customer encryption key for boot disk.
   * @return value or {@code null} for none
   */
  public CustomerEncryptionKey getCustomerEncryptionKey() {
    return customerEncryptionKey;
  }

  /**
   * Optional. Customer encryption key for boot disk.
   * @param customerEncryptionKey customerEncryptionKey or {@code null} for none
   */
  public BootDiskConfig setCustomerEncryptionKey(CustomerEncryptionKey customerEncryptionKey) {
    this.customerEncryptionKey = customerEncryptionKey;
    return this;
  }

  /**
   * Optional. Size of the boot disk in GB. It must be larger than or equal to the size of the
   * image.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDiskSizeGb() {
    return diskSizeGb;
  }

  /**
   * Optional. Size of the boot disk in GB. It must be larger than or equal to the size of the
   * image.
   * @param diskSizeGb diskSizeGb or {@code null} for none
   */
  public BootDiskConfig setDiskSizeGb(java.lang.Long diskSizeGb) {
    this.diskSizeGb = diskSizeGb;
    return this;
  }

  /**
   * Optional. Whether the boot disk will be created with confidential compute mode.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnableConfidentialCompute() {
    return enableConfidentialCompute;
  }

  /**
   * Optional. Whether the boot disk will be created with confidential compute mode.
   * @param enableConfidentialCompute enableConfidentialCompute or {@code null} for none
   */
  public BootDiskConfig setEnableConfidentialCompute(java.lang.Boolean enableConfidentialCompute) {
    this.enableConfidentialCompute = enableConfidentialCompute;
    return this;
  }

  /**
   * Optional. Indicates how many IOPS to provision for the disk. This sets the number of I/O
   * operations per second that the disk can handle. To learn more about IOPS, see [Provisioning
   * persistent disk
   * performance](https://cloud.google.com/compute/docs/disks/performance#provisioned-iops).
   * @return value or {@code null} for none
   */
  public java.lang.Long getProvisionedIops() {
    return provisionedIops;
  }

  /**
   * Optional. Indicates how many IOPS to provision for the disk. This sets the number of I/O
   * operations per second that the disk can handle. To learn more about IOPS, see [Provisioning
   * persistent disk
   * performance](https://cloud.google.com/compute/docs/disks/performance#provisioned-iops).
   * @param provisionedIops provisionedIops or {@code null} for none
   */
  public BootDiskConfig setProvisionedIops(java.lang.Long provisionedIops) {
    this.provisionedIops = provisionedIops;
    return this;
  }

  /**
   * Optional. Indicates how much throughput to provision for the disk. This sets the number of
   * throughput MB per second that the disk can handle.
   * @return value or {@code null} for none
   */
  public java.lang.Long getProvisionedThroughput() {
    return provisionedThroughput;
  }

  /**
   * Optional. Indicates how much throughput to provision for the disk. This sets the number of
   * throughput MB per second that the disk can handle.
   * @param provisionedThroughput provisionedThroughput or {@code null} for none
   */
  public BootDiskConfig setProvisionedThroughput(java.lang.Long provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
    return this;
  }

  /**
   * Optional. Image from which boot disk is to be created. If not specified, the default image for
   * the runtime version will be used. Example: `projects/$PROJECT_ID/global/images/$IMAGE_NAME`.
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceImage() {
    return sourceImage;
  }

  /**
   * Optional. Image from which boot disk is to be created. If not specified, the default image for
   * the runtime version will be used. Example: `projects/$PROJECT_ID/global/images/$IMAGE_NAME`.
   * @param sourceImage sourceImage or {@code null} for none
   */
  public BootDiskConfig setSourceImage(java.lang.String sourceImage) {
    this.sourceImage = sourceImage;
    return this;
  }

  /**
   * Optional. The storage pool in which the boot disk is created. You can provide this as a partial
   * or full URL to the resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getStoragePool() {
    return storagePool;
  }

  /**
   * Optional. The storage pool in which the boot disk is created. You can provide this as a partial
   * or full URL to the resource.
   * @param storagePool storagePool or {@code null} for none
   */
  public BootDiskConfig setStoragePool(java.lang.String storagePool) {
    this.storagePool = storagePool;
    return this;
  }

  @Override
  public BootDiskConfig set(String fieldName, Object value) {
    return (BootDiskConfig) super.set(fieldName, value);
  }

  @Override
  public BootDiskConfig clone() {
    return (BootDiskConfig) super.clone();
  }

}
