/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.directory.model;

/**
 * JSON template for token resource in Directory API.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Admin SDK API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Token extends com.google.api.client.json.GenericJson {

  /**
   * Whether the application is registered with Google. The value is `true` if the application has
   * an anonymous Client ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean anonymous;

  /**
   * The Client ID of the application the token is issued to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientId;

  /**
   * The displayable name of the application the token is issued to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayText;

  /**
   * ETag of the resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * The type of the API resource. This is always `admin#directory#token`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * Whether the token is issued to an installed application. The value is `true` if the application
   * is installed to a desktop or mobile device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean nativeApp;

  /**
   * A list of authorization scopes the application is granted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> scopes;

  /**
   * The unique ID of the user that issued the token.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userKey;

  /**
   * Whether the application is registered with Google. The value is `true` if the application has
   * an anonymous Client ID.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAnonymous() {
    return anonymous;
  }

  /**
   * Whether the application is registered with Google. The value is `true` if the application has
   * an anonymous Client ID.
   * @param anonymous anonymous or {@code null} for none
   */
  public Token setAnonymous(java.lang.Boolean anonymous) {
    this.anonymous = anonymous;
    return this;
  }

  /**
   * The Client ID of the application the token is issued to.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientId() {
    return clientId;
  }

  /**
   * The Client ID of the application the token is issued to.
   * @param clientId clientId or {@code null} for none
   */
  public Token setClientId(java.lang.String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * The displayable name of the application the token is issued to.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayText() {
    return displayText;
  }

  /**
   * The displayable name of the application the token is issued to.
   * @param displayText displayText or {@code null} for none
   */
  public Token setDisplayText(java.lang.String displayText) {
    this.displayText = displayText;
    return this;
  }

  /**
   * ETag of the resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * ETag of the resource.
   * @param etag etag or {@code null} for none
   */
  public Token setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The type of the API resource. This is always `admin#directory#token`.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * The type of the API resource. This is always `admin#directory#token`.
   * @param kind kind or {@code null} for none
   */
  public Token setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Whether the token is issued to an installed application. The value is `true` if the application
   * is installed to a desktop or mobile device.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNativeApp() {
    return nativeApp;
  }

  /**
   * Whether the token is issued to an installed application. The value is `true` if the application
   * is installed to a desktop or mobile device.
   * @param nativeApp nativeApp or {@code null} for none
   */
  public Token setNativeApp(java.lang.Boolean nativeApp) {
    this.nativeApp = nativeApp;
    return this;
  }

  /**
   * A list of authorization scopes the application is granted.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getScopes() {
    return scopes;
  }

  /**
   * A list of authorization scopes the application is granted.
   * @param scopes scopes or {@code null} for none
   */
  public Token setScopes(java.util.List<java.lang.String> scopes) {
    this.scopes = scopes;
    return this;
  }

  /**
   * The unique ID of the user that issued the token.
   * @return value or {@code null} for none
   */
  public java.lang.String getUserKey() {
    return userKey;
  }

  /**
   * The unique ID of the user that issued the token.
   * @param userKey userKey or {@code null} for none
   */
  public Token setUserKey(java.lang.String userKey) {
    this.userKey = userKey;
    return this;
  }

  @Override
  public Token set(String fieldName, Object value) {
    return (Token) super.set(fieldName, value);
  }

  @Override
  public Token clone() {
    return (Token) super.clone();
  }

}
