/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * This field records where the ItemScope was retrieved, if it was created via a web fetch.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Provenance extends com.google.api.client.json.GenericJson {

  /**
   * Annotation blob from Annotation Service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String annotationBlob;

  /**
   * Canonical url of the retrieved_url, if one was resolved during retrieval, for example, if a
   * rel="canonical" link tag was provided in the retrieved web page.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String canonicalUrl;

  /**
   * The url originally passed in the PRS request, which should be used to re-discover the content.
   * Note that this URL may be a forwarding service or link shortener (bit.ly), so it should not be
   * assumed to be canonical, but should be used for navigation back to the original source of the
   * itemscope.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String inputUrl;

  /**
   * Contains exact types as parsed, whether or not we recognized that type at parse time. If an
   * itemscope is created by merging SchemaOrg markup and open graph markup then the first itemtype
   * would be schemaorg type, the second would be open graph and so on. example:
   * http://schema.org/VideoObject, og:video.movie Plain text; usually a URL
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> itemtype;

  /**
   * The server retrieved timestamp (in msec).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger retrievedTimestampMsec;

  /**
   * The final URL that was the actual source of the itemscope, after any redirects.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String retrievedUrl;

  /**
   * Annotation blob from Annotation Service.
   * @see #decodeAnnotationBlob()
   * @return value or {@code null} for none
   */
  public java.lang.String getAnnotationBlob() {
    return annotationBlob;
  }

  /**
   * Annotation blob from Annotation Service.
   * @see #getAnnotationBlob()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeAnnotationBlob() {
    return com.google.api.client.util.Base64.decodeBase64(annotationBlob);
  }

  /**
   * Annotation blob from Annotation Service.
   * @see #encodeAnnotationBlob()
   * @param annotationBlob annotationBlob or {@code null} for none
   */
  public Provenance setAnnotationBlob(java.lang.String annotationBlob) {
    this.annotationBlob = annotationBlob;
    return this;
  }

  /**
   * Annotation blob from Annotation Service.
   * @see #setAnnotationBlob()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public Provenance encodeAnnotationBlob(byte[] annotationBlob) {
    this.annotationBlob = com.google.api.client.util.Base64.encodeBase64URLSafeString(annotationBlob);
    return this;
  }

  /**
   * Canonical url of the retrieved_url, if one was resolved during retrieval, for example, if a
   * rel="canonical" link tag was provided in the retrieved web page.
   * @return value or {@code null} for none
   */
  public java.lang.String getCanonicalUrl() {
    return canonicalUrl;
  }

  /**
   * Canonical url of the retrieved_url, if one was resolved during retrieval, for example, if a
   * rel="canonical" link tag was provided in the retrieved web page.
   * @param canonicalUrl canonicalUrl or {@code null} for none
   */
  public Provenance setCanonicalUrl(java.lang.String canonicalUrl) {
    this.canonicalUrl = canonicalUrl;
    return this;
  }

  /**
   * The url originally passed in the PRS request, which should be used to re-discover the content.
   * Note that this URL may be a forwarding service or link shortener (bit.ly), so it should not be
   * assumed to be canonical, but should be used for navigation back to the original source of the
   * itemscope.
   * @return value or {@code null} for none
   */
  public java.lang.String getInputUrl() {
    return inputUrl;
  }

  /**
   * The url originally passed in the PRS request, which should be used to re-discover the content.
   * Note that this URL may be a forwarding service or link shortener (bit.ly), so it should not be
   * assumed to be canonical, but should be used for navigation back to the original source of the
   * itemscope.
   * @param inputUrl inputUrl or {@code null} for none
   */
  public Provenance setInputUrl(java.lang.String inputUrl) {
    this.inputUrl = inputUrl;
    return this;
  }

  /**
   * Contains exact types as parsed, whether or not we recognized that type at parse time. If an
   * itemscope is created by merging SchemaOrg markup and open graph markup then the first itemtype
   * would be schemaorg type, the second would be open graph and so on. example:
   * http://schema.org/VideoObject, og:video.movie Plain text; usually a URL
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getItemtype() {
    return itemtype;
  }

  /**
   * Contains exact types as parsed, whether or not we recognized that type at parse time. If an
   * itemscope is created by merging SchemaOrg markup and open graph markup then the first itemtype
   * would be schemaorg type, the second would be open graph and so on. example:
   * http://schema.org/VideoObject, og:video.movie Plain text; usually a URL
   * @param itemtype itemtype or {@code null} for none
   */
  public Provenance setItemtype(java.util.List<java.lang.String> itemtype) {
    this.itemtype = itemtype;
    return this;
  }

  /**
   * The server retrieved timestamp (in msec).
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getRetrievedTimestampMsec() {
    return retrievedTimestampMsec;
  }

  /**
   * The server retrieved timestamp (in msec).
   * @param retrievedTimestampMsec retrievedTimestampMsec or {@code null} for none
   */
  public Provenance setRetrievedTimestampMsec(java.math.BigInteger retrievedTimestampMsec) {
    this.retrievedTimestampMsec = retrievedTimestampMsec;
    return this;
  }

  /**
   * The final URL that was the actual source of the itemscope, after any redirects.
   * @return value or {@code null} for none
   */
  public java.lang.String getRetrievedUrl() {
    return retrievedUrl;
  }

  /**
   * The final URL that was the actual source of the itemscope, after any redirects.
   * @param retrievedUrl retrievedUrl or {@code null} for none
   */
  public Provenance setRetrievedUrl(java.lang.String retrievedUrl) {
    this.retrievedUrl = retrievedUrl;
    return this;
  }

  @Override
  public Provenance set(String fieldName, Object value) {
    return (Provenance) super.set(fieldName, value);
  }

  @Override
  public Provenance clone() {
    return (Provenance) super.clone();
  }

}
