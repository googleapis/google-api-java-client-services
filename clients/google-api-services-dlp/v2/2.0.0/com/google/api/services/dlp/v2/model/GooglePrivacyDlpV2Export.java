/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dlp.v2.model;

/**
 * If set, the detailed data profiles will be persisted to the location of your choice whenever
 * updated.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Sensitive Data Protection (DLP). For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GooglePrivacyDlpV2Export extends com.google.api.client.json.GenericJson {

  /**
   * Store all table and column profiles in an existing table or a new table in an existing dataset.
   * Each re-generation will result in new rows in BigQuery. Data is inserted using [streaming
   * insert](https://cloud.google.com/blog/products/bigquery/life-of-a-bigquery-streaming-insert)
   * and so data may be in the buffer for a period of time after the profile has finished. The
   * Pub/Sub notification is sent before the streaming buffer is guaranteed to be written, so data
   * may not be instantly visible to queries by the time your topic receives the Pub/Sub
   * notification.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2BigQueryTable profileTable;

  /**
   * Store all table and column profiles in an existing table or a new table in an existing dataset.
   * Each re-generation will result in new rows in BigQuery. Data is inserted using [streaming
   * insert](https://cloud.google.com/blog/products/bigquery/life-of-a-bigquery-streaming-insert)
   * and so data may be in the buffer for a period of time after the profile has finished. The
   * Pub/Sub notification is sent before the streaming buffer is guaranteed to be written, so data
   * may not be instantly visible to queries by the time your topic receives the Pub/Sub
   * notification.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2BigQueryTable getProfileTable() {
    return profileTable;
  }

  /**
   * Store all table and column profiles in an existing table or a new table in an existing dataset.
   * Each re-generation will result in new rows in BigQuery. Data is inserted using [streaming
   * insert](https://cloud.google.com/blog/products/bigquery/life-of-a-bigquery-streaming-insert)
   * and so data may be in the buffer for a period of time after the profile has finished. The
   * Pub/Sub notification is sent before the streaming buffer is guaranteed to be written, so data
   * may not be instantly visible to queries by the time your topic receives the Pub/Sub
   * notification.
   * @param profileTable profileTable or {@code null} for none
   */
  public GooglePrivacyDlpV2Export setProfileTable(GooglePrivacyDlpV2BigQueryTable profileTable) {
    this.profileTable = profileTable;
    return this;
  }

  @Override
  public GooglePrivacyDlpV2Export set(String fieldName, Object value) {
    return (GooglePrivacyDlpV2Export) super.set(fieldName, value);
  }

  @Override
  public GooglePrivacyDlpV2Export clone() {
    return (GooglePrivacyDlpV2Export) super.clone();
  }

}
