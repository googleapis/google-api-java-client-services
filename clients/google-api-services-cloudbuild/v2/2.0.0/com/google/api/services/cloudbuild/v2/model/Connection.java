/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbuild.v2.model;

/**
 * A connection to a SCM like GitHub, GitHub Enterprise, Bitbucket Server or GitLab.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Build API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Connection extends com.google.api.client.json.GenericJson {

  /**
   * Allows clients to store small amounts of arbitrary data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Output only. Server assigned timestamp for when the connection was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * If disabled is set to true, functionality is disabled for this connection. Repository based API
   * methods and webhooks processing for repositories in this connection will be disabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean disabled;

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on
   * update and delete requests to ensure the client has an up-to-date value before proceeding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Configuration for connections to github.com.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GitHubConfig githubConfig;

  /**
   * Configuration for connections to an instance of GitHub Enterprise.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig githubEnterpriseConfig;

  /**
   * Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleDevtoolsCloudbuildV2GitLabConfig gitlabConfig;

  /**
   * Output only. Installation state of the Connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private InstallationState installationState;

  /**
   * Immutable. The resource name of the connection, in the format
   * `projects/{project}/locations/{location}/connections/{connection_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. Set to true when the connection is being set up or updated in the background.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reconciling;

  /**
   * Output only. Server assigned timestamp for when the connection was updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Allows clients to store small amounts of arbitrary data.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Allows clients to store small amounts of arbitrary data.
   * @param annotations annotations or {@code null} for none
   */
  public Connection setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Output only. Server assigned timestamp for when the connection was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Server assigned timestamp for when the connection was created.
   * @param createTime createTime or {@code null} for none
   */
  public Connection setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * If disabled is set to true, functionality is disabled for this connection. Repository based API
   * methods and webhooks processing for repositories in this connection will be disabled.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDisabled() {
    return disabled;
  }

  /**
   * If disabled is set to true, functionality is disabled for this connection. Repository based API
   * methods and webhooks processing for repositories in this connection will be disabled.
   * @param disabled disabled or {@code null} for none
   */
  public Connection setDisabled(java.lang.Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on
   * update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on
   * update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @param etag etag or {@code null} for none
   */
  public Connection setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Configuration for connections to github.com.
   * @return value or {@code null} for none
   */
  public GitHubConfig getGithubConfig() {
    return githubConfig;
  }

  /**
   * Configuration for connections to github.com.
   * @param githubConfig githubConfig or {@code null} for none
   */
  public Connection setGithubConfig(GitHubConfig githubConfig) {
    this.githubConfig = githubConfig;
    return this;
  }

  /**
   * Configuration for connections to an instance of GitHub Enterprise.
   * @return value or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig getGithubEnterpriseConfig() {
    return githubEnterpriseConfig;
  }

  /**
   * Configuration for connections to an instance of GitHub Enterprise.
   * @param githubEnterpriseConfig githubEnterpriseConfig or {@code null} for none
   */
  public Connection setGithubEnterpriseConfig(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig githubEnterpriseConfig) {
    this.githubEnterpriseConfig = githubEnterpriseConfig;
    return this;
  }

  /**
   * Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
   * @return value or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitLabConfig getGitlabConfig() {
    return gitlabConfig;
  }

  /**
   * Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
   * @param gitlabConfig gitlabConfig or {@code null} for none
   */
  public Connection setGitlabConfig(GoogleDevtoolsCloudbuildV2GitLabConfig gitlabConfig) {
    this.gitlabConfig = gitlabConfig;
    return this;
  }

  /**
   * Output only. Installation state of the Connection.
   * @return value or {@code null} for none
   */
  public InstallationState getInstallationState() {
    return installationState;
  }

  /**
   * Output only. Installation state of the Connection.
   * @param installationState installationState or {@code null} for none
   */
  public Connection setInstallationState(InstallationState installationState) {
    this.installationState = installationState;
    return this;
  }

  /**
   * Immutable. The resource name of the connection, in the format
   * `projects/{project}/locations/{location}/connections/{connection_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Immutable. The resource name of the connection, in the format
   * `projects/{project}/locations/{location}/connections/{connection_id}`.
   * @param name name or {@code null} for none
   */
  public Connection setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Set to true when the connection is being set up or updated in the background.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReconciling() {
    return reconciling;
  }

  /**
   * Output only. Set to true when the connection is being set up or updated in the background.
   * @param reconciling reconciling or {@code null} for none
   */
  public Connection setReconciling(java.lang.Boolean reconciling) {
    this.reconciling = reconciling;
    return this;
  }

  /**
   * Output only. Server assigned timestamp for when the connection was updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Server assigned timestamp for when the connection was updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public Connection setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public Connection set(String fieldName, Object value) {
    return (Connection) super.set(fieldName, value);
  }

  @Override
  public Connection clone() {
    return (Connection) super.clone();
  }

}
