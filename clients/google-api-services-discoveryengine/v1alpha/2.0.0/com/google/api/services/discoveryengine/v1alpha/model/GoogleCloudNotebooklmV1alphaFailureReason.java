/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1alpha.model;

/**
 * Failure reason containing details about why a source failed to ingest.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudNotebooklmV1alphaFailureReason extends com.google.api.client.json.GenericJson {

  /**
   * An audio file transcription specific error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonAudioTranscriptionError audioTranscriptionError;

  /**
   * Error if the user tries to add a source from a blocked domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonDomainBlocked domainBlocked;

  /**
   * A google drive specific error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonGoogleDriveError googleDriveError;

  /**
   * Indicates an error occurred while ingesting the source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonIngestionError ingestionError;

  /**
   * Indicates that the source is paywalled and cannot be ingested.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonPaywallError paywallError;

  /**
   * Indicates that the source is empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonSourceEmpty sourceEmpty;

  /**
   * Error if the user tries to update beyond their limits.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonSourceLimitExceeded sourceLimitExceeded;

  /**
   * Indicates source word count exceeded the user's limit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonSourceTooLong sourceTooLong;

  /**
   * Indicates that the source is unreachable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonSourceUnreachable sourceUnreachable;

  /**
   * Indicates an unknown error occurred.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonUnknown unknown;

  /**
   * Indicates an error occurred while uploading the source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonUploadError uploadError;

  /**
   * A youtube specific error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudNotebooklmV1alphaFailureReasonYoutubeError youtubeError;

  /**
   * An audio file transcription specific error.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonAudioTranscriptionError getAudioTranscriptionError() {
    return audioTranscriptionError;
  }

  /**
   * An audio file transcription specific error.
   * @param audioTranscriptionError audioTranscriptionError or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setAudioTranscriptionError(GoogleCloudNotebooklmV1alphaFailureReasonAudioTranscriptionError audioTranscriptionError) {
    this.audioTranscriptionError = audioTranscriptionError;
    return this;
  }

  /**
   * Error if the user tries to add a source from a blocked domain.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonDomainBlocked getDomainBlocked() {
    return domainBlocked;
  }

  /**
   * Error if the user tries to add a source from a blocked domain.
   * @param domainBlocked domainBlocked or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setDomainBlocked(GoogleCloudNotebooklmV1alphaFailureReasonDomainBlocked domainBlocked) {
    this.domainBlocked = domainBlocked;
    return this;
  }

  /**
   * A google drive specific error.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonGoogleDriveError getGoogleDriveError() {
    return googleDriveError;
  }

  /**
   * A google drive specific error.
   * @param googleDriveError googleDriveError or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setGoogleDriveError(GoogleCloudNotebooklmV1alphaFailureReasonGoogleDriveError googleDriveError) {
    this.googleDriveError = googleDriveError;
    return this;
  }

  /**
   * Indicates an error occurred while ingesting the source.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonIngestionError getIngestionError() {
    return ingestionError;
  }

  /**
   * Indicates an error occurred while ingesting the source.
   * @param ingestionError ingestionError or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setIngestionError(GoogleCloudNotebooklmV1alphaFailureReasonIngestionError ingestionError) {
    this.ingestionError = ingestionError;
    return this;
  }

  /**
   * Indicates that the source is paywalled and cannot be ingested.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonPaywallError getPaywallError() {
    return paywallError;
  }

  /**
   * Indicates that the source is paywalled and cannot be ingested.
   * @param paywallError paywallError or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setPaywallError(GoogleCloudNotebooklmV1alphaFailureReasonPaywallError paywallError) {
    this.paywallError = paywallError;
    return this;
  }

  /**
   * Indicates that the source is empty.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonSourceEmpty getSourceEmpty() {
    return sourceEmpty;
  }

  /**
   * Indicates that the source is empty.
   * @param sourceEmpty sourceEmpty or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setSourceEmpty(GoogleCloudNotebooklmV1alphaFailureReasonSourceEmpty sourceEmpty) {
    this.sourceEmpty = sourceEmpty;
    return this;
  }

  /**
   * Error if the user tries to update beyond their limits.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonSourceLimitExceeded getSourceLimitExceeded() {
    return sourceLimitExceeded;
  }

  /**
   * Error if the user tries to update beyond their limits.
   * @param sourceLimitExceeded sourceLimitExceeded or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setSourceLimitExceeded(GoogleCloudNotebooklmV1alphaFailureReasonSourceLimitExceeded sourceLimitExceeded) {
    this.sourceLimitExceeded = sourceLimitExceeded;
    return this;
  }

  /**
   * Indicates source word count exceeded the user's limit.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonSourceTooLong getSourceTooLong() {
    return sourceTooLong;
  }

  /**
   * Indicates source word count exceeded the user's limit.
   * @param sourceTooLong sourceTooLong or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setSourceTooLong(GoogleCloudNotebooklmV1alphaFailureReasonSourceTooLong sourceTooLong) {
    this.sourceTooLong = sourceTooLong;
    return this;
  }

  /**
   * Indicates that the source is unreachable.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonSourceUnreachable getSourceUnreachable() {
    return sourceUnreachable;
  }

  /**
   * Indicates that the source is unreachable.
   * @param sourceUnreachable sourceUnreachable or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setSourceUnreachable(GoogleCloudNotebooklmV1alphaFailureReasonSourceUnreachable sourceUnreachable) {
    this.sourceUnreachable = sourceUnreachable;
    return this;
  }

  /**
   * Indicates an unknown error occurred.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonUnknown getUnknown() {
    return unknown;
  }

  /**
   * Indicates an unknown error occurred.
   * @param unknown unknown or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setUnknown(GoogleCloudNotebooklmV1alphaFailureReasonUnknown unknown) {
    this.unknown = unknown;
    return this;
  }

  /**
   * Indicates an error occurred while uploading the source.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonUploadError getUploadError() {
    return uploadError;
  }

  /**
   * Indicates an error occurred while uploading the source.
   * @param uploadError uploadError or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setUploadError(GoogleCloudNotebooklmV1alphaFailureReasonUploadError uploadError) {
    this.uploadError = uploadError;
    return this;
  }

  /**
   * A youtube specific error.
   * @return value or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReasonYoutubeError getYoutubeError() {
    return youtubeError;
  }

  /**
   * A youtube specific error.
   * @param youtubeError youtubeError or {@code null} for none
   */
  public GoogleCloudNotebooklmV1alphaFailureReason setYoutubeError(GoogleCloudNotebooklmV1alphaFailureReasonYoutubeError youtubeError) {
    this.youtubeError = youtubeError;
    return this;
  }

  @Override
  public GoogleCloudNotebooklmV1alphaFailureReason set(String fieldName, Object value) {
    return (GoogleCloudNotebooklmV1alphaFailureReason) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudNotebooklmV1alphaFailureReason clone() {
    return (GoogleCloudNotebooklmV1alphaFailureReason) super.clone();
  }

}
