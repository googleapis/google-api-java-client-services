/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v2.model;

/**
 * A `Directory` represents a directory node in a file tree, containing zero or more children
 * FileNodes and DirectoryNodes. Each `Node` contains its name in the directory, the digest of its
 * content (either a file blob or a `Directory` proto), as well as possibly some metadata about the
 * file or directory.
 *
 * In order to ensure that two equivalent directory trees hash to the same value, the following
 * restrictions MUST be obeyed when constructing a a `Directory`:   - Every child in the directory
 * must have a path of exactly one segment.     Multiple levels of directory hierarchy may not be
 * collapsed.   - Each child in the directory must have a unique path segment (file name).   - The
 * files and directories in the directory must each be sorted in     lexicographical order by path.
 * The path strings must be sorted by code     point, equivalently, by UTF-8 bytes.
 *
 * A `Directory` that obeys the restrictions is said to be in canonical form.
 *
 * As an example, the following could be used for a file named `bar` and a directory named `foo`
 * with an executable file named `baz` (hashes shortened for readability):
 *
 * ```json // (Directory proto) {   files: [     {       name: "bar",       digest: {         hash:
 * "4a73bc9d03...",         size: 65534       }     }   ],   directories: [     {       name: "foo",
 * digest: {         hash: "4cf2eda940...",         size: 43       }     }   ] }
 *
 * // (Directory proto with hash "4cf2eda940..." and size 43) {   files: [     {       name: "baz",
 * digest: {         hash: "b2c941073e...",         size: 1294,       },       is_executable: true
 * }   ] } ```
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleDevtoolsRemoteexecutionV1testDirectory extends com.google.api.client.json.GenericJson {

  /**
   * The subdirectories in the directory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsRemoteexecutionV1testDirectoryNode> directories;

  /**
   * The files in the directory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsRemoteexecutionV1testFileNode> files;

  /**
   * The subdirectories in the directory.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsRemoteexecutionV1testDirectoryNode> getDirectories() {
    return directories;
  }

  /**
   * The subdirectories in the directory.
   * @param directories directories or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testDirectory setDirectories(java.util.List<GoogleDevtoolsRemoteexecutionV1testDirectoryNode> directories) {
    this.directories = directories;
    return this;
  }

  /**
   * The files in the directory.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsRemoteexecutionV1testFileNode> getFiles() {
    return files;
  }

  /**
   * The files in the directory.
   * @param files files or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testDirectory setFiles(java.util.List<GoogleDevtoolsRemoteexecutionV1testFileNode> files) {
    this.files = files;
    return this;
  }

  @Override
  public GoogleDevtoolsRemoteexecutionV1testDirectory set(String fieldName, Object value) {
    return (GoogleDevtoolsRemoteexecutionV1testDirectory) super.set(fieldName, value);
  }

  @Override
  public GoogleDevtoolsRemoteexecutionV1testDirectory clone() {
    return (GoogleDevtoolsRemoteexecutionV1testDirectory) super.clone();
  }

}
