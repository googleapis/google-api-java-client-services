/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.walletobjects.model;

/**
 * Model definition for GiftCardObject.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Wallet API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GiftCardObject extends com.google.api.client.json.GenericJson {

  /**
   * Optional app or website link that will be displayed as a button on the front of the pass. If
   * AppLinkData is provided for the corresponding class only object AppLinkData will be displayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppLinkData appLinkData;

  /**
   * The card's monetary balance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money balance;

  /**
   * The date and time when the balance was last updated. Offset is required. If balance is updated
   * and this property is not provided, system will default to the current time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DateTime balanceUpdateTime;

  /**
   * The barcode type and value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Barcode barcode;

  /**
   * Required. The card's number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cardNumber;

  /**
   * Required. The class associated with this object. The class must be of the same type as this
   * object, must already exist, and must be approved. Class IDs should follow the format issuer
   * ID.identifier where the former is issued by Google and latter is chosen by you.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String classId;

  /**
   * A copy of the inherited fields of the parent class. These fields are retrieved during a GET.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GiftCardClass classReference;

  /**
   * Indicates if notifications should explicitly be suppressed. If this field is set to true,
   * regardless of the `messages` field, expiration notifications to the user will be suppressed. By
   * default, this field is set to false. Currently, this can only be set for offers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean disableExpirationNotification;

  /**
   * The card's event number, an optional field used by some gift cards.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventNumber;

  /**
   * Information that controls how passes are grouped together.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GroupingInfo groupingInfo;

  /**
   * Whether this object is currently linked to a single device. This field is set by the platform
   * when a user saves the object, linking it to their device. Intended for use by select partners.
   * Contact support for additional information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasLinkedDevice;

  /**
   * Indicates if the object has users. This field is set by the platform.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasUsers;

  /**
   * Optional banner image displayed on the front of the card. If none is present, hero image of the
   * class, if present, will be displayed. If hero image of the class is also not present, nothing
   * will be displayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Image heroImage;

  /**
   * Required. The unique identifier for an object. This ID must be unique across all objects from
   * an issuer. This value should follow the format issuer ID.identifier where the former is issued
   * by Google and latter is chosen by you. The unique identifier should only include alphanumeric
   * characters, '.', '_', or '-'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * Image module data. The maximum number of these fields displayed is 1 from object level and 1
   * for class object level.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImageModuleData> imageModulesData;

  /**
   * Deprecated. Use textModulesData instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private InfoModuleData infoModuleData;

  /**
   * Identifies what kind of resource this is. Value: the fixed string
   * `"walletobjects#giftCardObject"`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * Links module data. If links module data is also defined on the class, both will be displayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LinksModuleData linksModuleData;

  /**
   * Note: This field is currently not supported to trigger geo notifications.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<LatLongPoint> locations;

  /**
   * An array of messages displayed in the app. All users of this object will receive its associated
   * messages. The maximum number of these fields is 10.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Message> messages;

  /**
   * Pass constraints for the object. Includes limiting NFC and screenshot behaviors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PassConstraints passConstraints;

  /**
   * The card's PIN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pin;

  /**
   * The rotating barcode type and value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RotatingBarcode rotatingBarcode;

  /**
   * The value that will be transmitted to a Smart Tap certified terminal over NFC for this object.
   * The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly
   * in order for the pass to support Smart Tap. Only ASCII characters are supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String smartTapRedemptionValue;

  /**
   * Required. The state of the object. This field is used to determine how an object is displayed
   * in the app. For example, an `inactive` object is moved to the "Expired passes" section.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Text module data. If text module data is also defined on the class, both will be displayed. The
   * maximum number of these fields displayed is 10 from the object and 10 from the class.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<TextModuleData> textModulesData;

  /**
   * The time period this object will be `active` and object can be used. An object's state will be
   * changed to `expired` when this time period has passed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TimeInterval validTimeInterval;

  /**
   * Deprecated
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long version;

  /**
   * Optional app or website link that will be displayed as a button on the front of the pass. If
   * AppLinkData is provided for the corresponding class only object AppLinkData will be displayed.
   * @return value or {@code null} for none
   */
  public AppLinkData getAppLinkData() {
    return appLinkData;
  }

  /**
   * Optional app or website link that will be displayed as a button on the front of the pass. If
   * AppLinkData is provided for the corresponding class only object AppLinkData will be displayed.
   * @param appLinkData appLinkData or {@code null} for none
   */
  public GiftCardObject setAppLinkData(AppLinkData appLinkData) {
    this.appLinkData = appLinkData;
    return this;
  }

  /**
   * The card's monetary balance.
   * @return value or {@code null} for none
   */
  public Money getBalance() {
    return balance;
  }

  /**
   * The card's monetary balance.
   * @param balance balance or {@code null} for none
   */
  public GiftCardObject setBalance(Money balance) {
    this.balance = balance;
    return this;
  }

  /**
   * The date and time when the balance was last updated. Offset is required. If balance is updated
   * and this property is not provided, system will default to the current time.
   * @return value or {@code null} for none
   */
  public DateTime getBalanceUpdateTime() {
    return balanceUpdateTime;
  }

  /**
   * The date and time when the balance was last updated. Offset is required. If balance is updated
   * and this property is not provided, system will default to the current time.
   * @param balanceUpdateTime balanceUpdateTime or {@code null} for none
   */
  public GiftCardObject setBalanceUpdateTime(DateTime balanceUpdateTime) {
    this.balanceUpdateTime = balanceUpdateTime;
    return this;
  }

  /**
   * The barcode type and value.
   * @return value or {@code null} for none
   */
  public Barcode getBarcode() {
    return barcode;
  }

  /**
   * The barcode type and value.
   * @param barcode barcode or {@code null} for none
   */
  public GiftCardObject setBarcode(Barcode barcode) {
    this.barcode = barcode;
    return this;
  }

  /**
   * Required. The card's number.
   * @return value or {@code null} for none
   */
  public java.lang.String getCardNumber() {
    return cardNumber;
  }

  /**
   * Required. The card's number.
   * @param cardNumber cardNumber or {@code null} for none
   */
  public GiftCardObject setCardNumber(java.lang.String cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

  /**
   * Required. The class associated with this object. The class must be of the same type as this
   * object, must already exist, and must be approved. Class IDs should follow the format issuer
   * ID.identifier where the former is issued by Google and latter is chosen by you.
   * @return value or {@code null} for none
   */
  public java.lang.String getClassId() {
    return classId;
  }

  /**
   * Required. The class associated with this object. The class must be of the same type as this
   * object, must already exist, and must be approved. Class IDs should follow the format issuer
   * ID.identifier where the former is issued by Google and latter is chosen by you.
   * @param classId classId or {@code null} for none
   */
  public GiftCardObject setClassId(java.lang.String classId) {
    this.classId = classId;
    return this;
  }

  /**
   * A copy of the inherited fields of the parent class. These fields are retrieved during a GET.
   * @return value or {@code null} for none
   */
  public GiftCardClass getClassReference() {
    return classReference;
  }

  /**
   * A copy of the inherited fields of the parent class. These fields are retrieved during a GET.
   * @param classReference classReference or {@code null} for none
   */
  public GiftCardObject setClassReference(GiftCardClass classReference) {
    this.classReference = classReference;
    return this;
  }

  /**
   * Indicates if notifications should explicitly be suppressed. If this field is set to true,
   * regardless of the `messages` field, expiration notifications to the user will be suppressed. By
   * default, this field is set to false. Currently, this can only be set for offers.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDisableExpirationNotification() {
    return disableExpirationNotification;
  }

  /**
   * Indicates if notifications should explicitly be suppressed. If this field is set to true,
   * regardless of the `messages` field, expiration notifications to the user will be suppressed. By
   * default, this field is set to false. Currently, this can only be set for offers.
   * @param disableExpirationNotification disableExpirationNotification or {@code null} for none
   */
  public GiftCardObject setDisableExpirationNotification(java.lang.Boolean disableExpirationNotification) {
    this.disableExpirationNotification = disableExpirationNotification;
    return this;
  }

  /**
   * The card's event number, an optional field used by some gift cards.
   * @return value or {@code null} for none
   */
  public java.lang.String getEventNumber() {
    return eventNumber;
  }

  /**
   * The card's event number, an optional field used by some gift cards.
   * @param eventNumber eventNumber or {@code null} for none
   */
  public GiftCardObject setEventNumber(java.lang.String eventNumber) {
    this.eventNumber = eventNumber;
    return this;
  }

  /**
   * Information that controls how passes are grouped together.
   * @return value or {@code null} for none
   */
  public GroupingInfo getGroupingInfo() {
    return groupingInfo;
  }

  /**
   * Information that controls how passes are grouped together.
   * @param groupingInfo groupingInfo or {@code null} for none
   */
  public GiftCardObject setGroupingInfo(GroupingInfo groupingInfo) {
    this.groupingInfo = groupingInfo;
    return this;
  }

  /**
   * Whether this object is currently linked to a single device. This field is set by the platform
   * when a user saves the object, linking it to their device. Intended for use by select partners.
   * Contact support for additional information.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasLinkedDevice() {
    return hasLinkedDevice;
  }

  /**
   * Whether this object is currently linked to a single device. This field is set by the platform
   * when a user saves the object, linking it to their device. Intended for use by select partners.
   * Contact support for additional information.
   * @param hasLinkedDevice hasLinkedDevice or {@code null} for none
   */
  public GiftCardObject setHasLinkedDevice(java.lang.Boolean hasLinkedDevice) {
    this.hasLinkedDevice = hasLinkedDevice;
    return this;
  }

  /**
   * Indicates if the object has users. This field is set by the platform.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasUsers() {
    return hasUsers;
  }

  /**
   * Indicates if the object has users. This field is set by the platform.
   * @param hasUsers hasUsers or {@code null} for none
   */
  public GiftCardObject setHasUsers(java.lang.Boolean hasUsers) {
    this.hasUsers = hasUsers;
    return this;
  }

  /**
   * Optional banner image displayed on the front of the card. If none is present, hero image of the
   * class, if present, will be displayed. If hero image of the class is also not present, nothing
   * will be displayed.
   * @return value or {@code null} for none
   */
  public Image getHeroImage() {
    return heroImage;
  }

  /**
   * Optional banner image displayed on the front of the card. If none is present, hero image of the
   * class, if present, will be displayed. If hero image of the class is also not present, nothing
   * will be displayed.
   * @param heroImage heroImage or {@code null} for none
   */
  public GiftCardObject setHeroImage(Image heroImage) {
    this.heroImage = heroImage;
    return this;
  }

  /**
   * Required. The unique identifier for an object. This ID must be unique across all objects from
   * an issuer. This value should follow the format issuer ID.identifier where the former is issued
   * by Google and latter is chosen by you. The unique identifier should only include alphanumeric
   * characters, '.', '_', or '-'.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Required. The unique identifier for an object. This ID must be unique across all objects from
   * an issuer. This value should follow the format issuer ID.identifier where the former is issued
   * by Google and latter is chosen by you. The unique identifier should only include alphanumeric
   * characters, '.', '_', or '-'.
   * @param id id or {@code null} for none
   */
  public GiftCardObject setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * Image module data. The maximum number of these fields displayed is 1 from object level and 1
   * for class object level.
   * @return value or {@code null} for none
   */
  public java.util.List<ImageModuleData> getImageModulesData() {
    return imageModulesData;
  }

  /**
   * Image module data. The maximum number of these fields displayed is 1 from object level and 1
   * for class object level.
   * @param imageModulesData imageModulesData or {@code null} for none
   */
  public GiftCardObject setImageModulesData(java.util.List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
    return this;
  }

  /**
   * Deprecated. Use textModulesData instead.
   * @return value or {@code null} for none
   */
  public InfoModuleData getInfoModuleData() {
    return infoModuleData;
  }

  /**
   * Deprecated. Use textModulesData instead.
   * @param infoModuleData infoModuleData or {@code null} for none
   */
  public GiftCardObject setInfoModuleData(InfoModuleData infoModuleData) {
    this.infoModuleData = infoModuleData;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string
   * `"walletobjects#giftCardObject"`.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string
   * `"walletobjects#giftCardObject"`.
   * @param kind kind or {@code null} for none
   */
  public GiftCardObject setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Links module data. If links module data is also defined on the class, both will be displayed.
   * @return value or {@code null} for none
   */
  public LinksModuleData getLinksModuleData() {
    return linksModuleData;
  }

  /**
   * Links module data. If links module data is also defined on the class, both will be displayed.
   * @param linksModuleData linksModuleData or {@code null} for none
   */
  public GiftCardObject setLinksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
    return this;
  }

  /**
   * Note: This field is currently not supported to trigger geo notifications.
   * @return value or {@code null} for none
   */
  public java.util.List<LatLongPoint> getLocations() {
    return locations;
  }

  /**
   * Note: This field is currently not supported to trigger geo notifications.
   * @param locations locations or {@code null} for none
   */
  public GiftCardObject setLocations(java.util.List<LatLongPoint> locations) {
    this.locations = locations;
    return this;
  }

  /**
   * An array of messages displayed in the app. All users of this object will receive its associated
   * messages. The maximum number of these fields is 10.
   * @return value or {@code null} for none
   */
  public java.util.List<Message> getMessages() {
    return messages;
  }

  /**
   * An array of messages displayed in the app. All users of this object will receive its associated
   * messages. The maximum number of these fields is 10.
   * @param messages messages or {@code null} for none
   */
  public GiftCardObject setMessages(java.util.List<Message> messages) {
    this.messages = messages;
    return this;
  }

  /**
   * Pass constraints for the object. Includes limiting NFC and screenshot behaviors.
   * @return value or {@code null} for none
   */
  public PassConstraints getPassConstraints() {
    return passConstraints;
  }

  /**
   * Pass constraints for the object. Includes limiting NFC and screenshot behaviors.
   * @param passConstraints passConstraints or {@code null} for none
   */
  public GiftCardObject setPassConstraints(PassConstraints passConstraints) {
    this.passConstraints = passConstraints;
    return this;
  }

  /**
   * The card's PIN.
   * @return value or {@code null} for none
   */
  public java.lang.String getPin() {
    return pin;
  }

  /**
   * The card's PIN.
   * @param pin pin or {@code null} for none
   */
  public GiftCardObject setPin(java.lang.String pin) {
    this.pin = pin;
    return this;
  }

  /**
   * The rotating barcode type and value.
   * @return value or {@code null} for none
   */
  public RotatingBarcode getRotatingBarcode() {
    return rotatingBarcode;
  }

  /**
   * The rotating barcode type and value.
   * @param rotatingBarcode rotatingBarcode or {@code null} for none
   */
  public GiftCardObject setRotatingBarcode(RotatingBarcode rotatingBarcode) {
    this.rotatingBarcode = rotatingBarcode;
    return this;
  }

  /**
   * The value that will be transmitted to a Smart Tap certified terminal over NFC for this object.
   * The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly
   * in order for the pass to support Smart Tap. Only ASCII characters are supported.
   * @return value or {@code null} for none
   */
  public java.lang.String getSmartTapRedemptionValue() {
    return smartTapRedemptionValue;
  }

  /**
   * The value that will be transmitted to a Smart Tap certified terminal over NFC for this object.
   * The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly
   * in order for the pass to support Smart Tap. Only ASCII characters are supported.
   * @param smartTapRedemptionValue smartTapRedemptionValue or {@code null} for none
   */
  public GiftCardObject setSmartTapRedemptionValue(java.lang.String smartTapRedemptionValue) {
    this.smartTapRedemptionValue = smartTapRedemptionValue;
    return this;
  }

  /**
   * Required. The state of the object. This field is used to determine how an object is displayed
   * in the app. For example, an `inactive` object is moved to the "Expired passes" section.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Required. The state of the object. This field is used to determine how an object is displayed
   * in the app. For example, an `inactive` object is moved to the "Expired passes" section.
   * @param state state or {@code null} for none
   */
  public GiftCardObject setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Text module data. If text module data is also defined on the class, both will be displayed. The
   * maximum number of these fields displayed is 10 from the object and 10 from the class.
   * @return value or {@code null} for none
   */
  public java.util.List<TextModuleData> getTextModulesData() {
    return textModulesData;
  }

  /**
   * Text module data. If text module data is also defined on the class, both will be displayed. The
   * maximum number of these fields displayed is 10 from the object and 10 from the class.
   * @param textModulesData textModulesData or {@code null} for none
   */
  public GiftCardObject setTextModulesData(java.util.List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
    return this;
  }

  /**
   * The time period this object will be `active` and object can be used. An object's state will be
   * changed to `expired` when this time period has passed.
   * @return value or {@code null} for none
   */
  public TimeInterval getValidTimeInterval() {
    return validTimeInterval;
  }

  /**
   * The time period this object will be `active` and object can be used. An object's state will be
   * changed to `expired` when this time period has passed.
   * @param validTimeInterval validTimeInterval or {@code null} for none
   */
  public GiftCardObject setValidTimeInterval(TimeInterval validTimeInterval) {
    this.validTimeInterval = validTimeInterval;
    return this;
  }

  /**
   * Deprecated
   * @return value or {@code null} for none
   */
  public java.lang.Long getVersion() {
    return version;
  }

  /**
   * Deprecated
   * @param version version or {@code null} for none
   */
  public GiftCardObject setVersion(java.lang.Long version) {
    this.version = version;
    return this;
  }

  @Override
  public GiftCardObject set(String fieldName, Object value) {
    return (GiftCardObject) super.set(fieldName, value);
  }

  @Override
  public GiftCardObject clone() {
    return (GiftCardObject) super.clone();
  }

}
