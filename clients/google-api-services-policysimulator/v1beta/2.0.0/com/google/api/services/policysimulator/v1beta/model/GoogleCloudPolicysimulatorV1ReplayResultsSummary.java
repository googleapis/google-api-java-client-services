/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.policysimulator.v1beta.model;

/**
 * Summary statistics about the replayed log entries.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Policy Simulator API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudPolicysimulatorV1ReplayResultsSummary extends com.google.api.client.json.GenericJson {

  /**
   * The number of replayed log entries with a difference between baseline and simulated policies.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer differenceCount;

  /**
   * The number of log entries that could not be replayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer errorCount;

  /**
   * The total number of log entries replayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer logCount;

  /**
   * The date of the newest log entry replayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeDate newestDate;

  /**
   * The date of the oldest log entry replayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeDate oldestDate;

  /**
   * The number of replayed log entries with no difference between baseline and simulated policies.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer unchangedCount;

  /**
   * The number of replayed log entries with a difference between baseline and simulated policies.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDifferenceCount() {
    return differenceCount;
  }

  /**
   * The number of replayed log entries with a difference between baseline and simulated policies.
   * @param differenceCount differenceCount or {@code null} for none
   */
  public GoogleCloudPolicysimulatorV1ReplayResultsSummary setDifferenceCount(java.lang.Integer differenceCount) {
    this.differenceCount = differenceCount;
    return this;
  }

  /**
   * The number of log entries that could not be replayed.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getErrorCount() {
    return errorCount;
  }

  /**
   * The number of log entries that could not be replayed.
   * @param errorCount errorCount or {@code null} for none
   */
  public GoogleCloudPolicysimulatorV1ReplayResultsSummary setErrorCount(java.lang.Integer errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   * The total number of log entries replayed.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLogCount() {
    return logCount;
  }

  /**
   * The total number of log entries replayed.
   * @param logCount logCount or {@code null} for none
   */
  public GoogleCloudPolicysimulatorV1ReplayResultsSummary setLogCount(java.lang.Integer logCount) {
    this.logCount = logCount;
    return this;
  }

  /**
   * The date of the newest log entry replayed.
   * @return value or {@code null} for none
   */
  public GoogleTypeDate getNewestDate() {
    return newestDate;
  }

  /**
   * The date of the newest log entry replayed.
   * @param newestDate newestDate or {@code null} for none
   */
  public GoogleCloudPolicysimulatorV1ReplayResultsSummary setNewestDate(GoogleTypeDate newestDate) {
    this.newestDate = newestDate;
    return this;
  }

  /**
   * The date of the oldest log entry replayed.
   * @return value or {@code null} for none
   */
  public GoogleTypeDate getOldestDate() {
    return oldestDate;
  }

  /**
   * The date of the oldest log entry replayed.
   * @param oldestDate oldestDate or {@code null} for none
   */
  public GoogleCloudPolicysimulatorV1ReplayResultsSummary setOldestDate(GoogleTypeDate oldestDate) {
    this.oldestDate = oldestDate;
    return this;
  }

  /**
   * The number of replayed log entries with no difference between baseline and simulated policies.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getUnchangedCount() {
    return unchangedCount;
  }

  /**
   * The number of replayed log entries with no difference between baseline and simulated policies.
   * @param unchangedCount unchangedCount or {@code null} for none
   */
  public GoogleCloudPolicysimulatorV1ReplayResultsSummary setUnchangedCount(java.lang.Integer unchangedCount) {
    this.unchangedCount = unchangedCount;
    return this;
  }

  @Override
  public GoogleCloudPolicysimulatorV1ReplayResultsSummary set(String fieldName, Object value) {
    return (GoogleCloudPolicysimulatorV1ReplayResultsSummary) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudPolicysimulatorV1ReplayResultsSummary clone() {
    return (GoogleCloudPolicysimulatorV1ReplayResultsSummary) super.clone();
  }

}
