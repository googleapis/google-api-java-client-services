/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Flexible Recurrence proto to be used with People Prompts. Examples: Single recurrence that occurs
 * on a specific date: single_recurrence { date { year: 2022 month: 11 day: 17 } } Yearly recurrence
 * such as a birthday or anniversary: yearly_recurrence { monthly_pattern { monthly_day_recurrence {
 * month_day: 17 } } months: JULY } Weekly reccurrence such as: every two weeks on Monday: every: 2
 * weekly_recurrence { week_day: MONDAY } Monthly recurrence such as: third Thursday of every month:
 * monthly_recurrence { monthly_weekday_recurrence { week_day: THURSDAY week_day_number: 3 } } Used
 * in PeopleAPI layers + FBS/ContactsService (not in ProfileService) TODO(b/240850530) add link to
 * validators when created.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SocialGraphApiProtoRecurrence extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialGraphApiProtoDailyRecurrence dailyRecurrence;

  /**
   * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X
   * days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default value will
   * be considered 1 (every day,every week,...) and not 0. This is ignored for a SingleRecurrence.
   * Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer every;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialGraphApiProtoMonthlyRecurrence monthlyRecurrence;

  /**
   * Ends at abstract DateTime. (inclusive)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeDateTime recurrenceEndDate;

  /**
   * The start of the recurrence can be represented as a DateTime. This is ignored for a
   * SingleRecurrence and YearlyRecurrence.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeDateTime recurrenceStart;

  /**
   * Will repeat only a finite number of times. This is the original number of times the recurrence
   * will repeat and not how many times are left for it to repeat.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer repeatCount;

  /**
   * Will continue to repeat until prompt is deleted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialGraphApiProtoRecurrenceRepeatForever repeatForever;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialGraphApiProtoSingleRecurrence singleRecurrence;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialGraphApiProtoWeeklyRecurrence weeklyRecurrence;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialGraphApiProtoYearlyRecurrence yearlyRecurrence;

  /**
   * @return value or {@code null} for none
   */
  public SocialGraphApiProtoDailyRecurrence getDailyRecurrence() {
    return dailyRecurrence;
  }

  /**
   * @param dailyRecurrence dailyRecurrence or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setDailyRecurrence(SocialGraphApiProtoDailyRecurrence dailyRecurrence) {
    this.dailyRecurrence = dailyRecurrence;
    return this;
  }

  /**
   * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X
   * days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default value will
   * be considered 1 (every day,every week,...) and not 0. This is ignored for a SingleRecurrence.
   * Optional.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEvery() {
    return every;
  }

  /**
   * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X
   * days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default value will
   * be considered 1 (every day,every week,...) and not 0. This is ignored for a SingleRecurrence.
   * Optional.
   * @param every every or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setEvery(java.lang.Integer every) {
    this.every = every;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public SocialGraphApiProtoMonthlyRecurrence getMonthlyRecurrence() {
    return monthlyRecurrence;
  }

  /**
   * @param monthlyRecurrence monthlyRecurrence or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setMonthlyRecurrence(SocialGraphApiProtoMonthlyRecurrence monthlyRecurrence) {
    this.monthlyRecurrence = monthlyRecurrence;
    return this;
  }

  /**
   * Ends at abstract DateTime. (inclusive)
   * @return value or {@code null} for none
   */
  public GoogleTypeDateTime getRecurrenceEndDate() {
    return recurrenceEndDate;
  }

  /**
   * Ends at abstract DateTime. (inclusive)
   * @param recurrenceEndDate recurrenceEndDate or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setRecurrenceEndDate(GoogleTypeDateTime recurrenceEndDate) {
    this.recurrenceEndDate = recurrenceEndDate;
    return this;
  }

  /**
   * The start of the recurrence can be represented as a DateTime. This is ignored for a
   * SingleRecurrence and YearlyRecurrence.
   * @return value or {@code null} for none
   */
  public GoogleTypeDateTime getRecurrenceStart() {
    return recurrenceStart;
  }

  /**
   * The start of the recurrence can be represented as a DateTime. This is ignored for a
   * SingleRecurrence and YearlyRecurrence.
   * @param recurrenceStart recurrenceStart or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setRecurrenceStart(GoogleTypeDateTime recurrenceStart) {
    this.recurrenceStart = recurrenceStart;
    return this;
  }

  /**
   * Will repeat only a finite number of times. This is the original number of times the recurrence
   * will repeat and not how many times are left for it to repeat.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRepeatCount() {
    return repeatCount;
  }

  /**
   * Will repeat only a finite number of times. This is the original number of times the recurrence
   * will repeat and not how many times are left for it to repeat.
   * @param repeatCount repeatCount or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setRepeatCount(java.lang.Integer repeatCount) {
    this.repeatCount = repeatCount;
    return this;
  }

  /**
   * Will continue to repeat until prompt is deleted.
   * @return value or {@code null} for none
   */
  public SocialGraphApiProtoRecurrenceRepeatForever getRepeatForever() {
    return repeatForever;
  }

  /**
   * Will continue to repeat until prompt is deleted.
   * @param repeatForever repeatForever or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setRepeatForever(SocialGraphApiProtoRecurrenceRepeatForever repeatForever) {
    this.repeatForever = repeatForever;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public SocialGraphApiProtoSingleRecurrence getSingleRecurrence() {
    return singleRecurrence;
  }

  /**
   * @param singleRecurrence singleRecurrence or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setSingleRecurrence(SocialGraphApiProtoSingleRecurrence singleRecurrence) {
    this.singleRecurrence = singleRecurrence;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public SocialGraphApiProtoWeeklyRecurrence getWeeklyRecurrence() {
    return weeklyRecurrence;
  }

  /**
   * @param weeklyRecurrence weeklyRecurrence or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setWeeklyRecurrence(SocialGraphApiProtoWeeklyRecurrence weeklyRecurrence) {
    this.weeklyRecurrence = weeklyRecurrence;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public SocialGraphApiProtoYearlyRecurrence getYearlyRecurrence() {
    return yearlyRecurrence;
  }

  /**
   * @param yearlyRecurrence yearlyRecurrence or {@code null} for none
   */
  public SocialGraphApiProtoRecurrence setYearlyRecurrence(SocialGraphApiProtoYearlyRecurrence yearlyRecurrence) {
    this.yearlyRecurrence = yearlyRecurrence;
    return this;
  }

  @Override
  public SocialGraphApiProtoRecurrence set(String fieldName, Object value) {
    return (SocialGraphApiProtoRecurrence) super.set(fieldName, value);
  }

  @Override
  public SocialGraphApiProtoRecurrence clone() {
    return (SocialGraphApiProtoRecurrence) super.clone();
  }

}
