/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * A resource containing sign in details for an enterprise. Use enterprises to manage SigninDetails
 * for a given enterprise. For an enterprise, we can have any number of SigninDetails that is
 * uniquely identified by combination of the following three fields (signin_url,
 * allow_personal_usage, token_tag). One cannot create two SigninDetails with the same (signin_url,
 * allow_personal_usage, token_tag). (token_tag is an optional field) Patch: The operation updates
 * the current list of SigninDetails with the new list of SigninDetails. If the stored SigninDetail
 * configuration is passed, it returns the same signin_enrollment_token and qr_code. If we pass
 * multiple identical SigninDetail configurations that are not stored, it will store the first one
 * amongst those SigninDetail configurations and if the configuration already exists we cannot
 * request it more than once in a particular patch API call, otherwise it will give a duplicate key
 * error and the whole operation will fail. If we remove certain SigninDetail configuration from the
 * request then it will get removed from the storage. And then we can request for another
 * signin_enrollment_token and qr_code for the same SigninDetail configuration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SigninDetail extends com.google.api.client.json.GenericJson {

  /**
   * Controls whether personal usage is allowed on a device provisioned with this enrollment
   * token.For company-owned devices: Enabling personal usage allows the user to set up a work
   * profile on the device. Disabling personal usage requires the user provision the device as a
   * fully managed device.For personally-owned devices: Enabling personal usage allows the user to
   * set up a work profile on the device. Disabling personal usage will prevent the device from
   * provisioning. Personal usage cannot be disabled on personally-owned device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String allowPersonalUsage;

  /**
   * A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device
   * with this enrollment token. To enroll a device using NFC, the NFC record must contain a
   * serialized java.util.Properties representation of the properties in the JSON. This is a read-
   * only field generated by the server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String qrCode;

  /**
   * An enterprise wide enrollment token used to trigger custom sign-in flow. This is a read-only
   * field generated by the server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String signinEnrollmentToken;

  /**
   * Sign-in URL for authentication when device is provisioned with a sign-in enrollment token. The
   * sign-in endpoint should finish authentication flow with a URL in the form of
   * https://enterprise.google.com/android/enroll?et= for a successful login, or
   * https://enterprise.google.com/android/enroll/invalid for a failed login.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String signinUrl;

  /**
   * An EMM-specified tag to distinguish between instances of SigninDetail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tokenTag;

  /**
   * Controls whether personal usage is allowed on a device provisioned with this enrollment
   * token.For company-owned devices: Enabling personal usage allows the user to set up a work
   * profile on the device. Disabling personal usage requires the user provision the device as a
   * fully managed device.For personally-owned devices: Enabling personal usage allows the user to
   * set up a work profile on the device. Disabling personal usage will prevent the device from
   * provisioning. Personal usage cannot be disabled on personally-owned device.
   * @return value or {@code null} for none
   */
  public java.lang.String getAllowPersonalUsage() {
    return allowPersonalUsage;
  }

  /**
   * Controls whether personal usage is allowed on a device provisioned with this enrollment
   * token.For company-owned devices: Enabling personal usage allows the user to set up a work
   * profile on the device. Disabling personal usage requires the user provision the device as a
   * fully managed device.For personally-owned devices: Enabling personal usage allows the user to
   * set up a work profile on the device. Disabling personal usage will prevent the device from
   * provisioning. Personal usage cannot be disabled on personally-owned device.
   * @param allowPersonalUsage allowPersonalUsage or {@code null} for none
   */
  public SigninDetail setAllowPersonalUsage(java.lang.String allowPersonalUsage) {
    this.allowPersonalUsage = allowPersonalUsage;
    return this;
  }

  /**
   * A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device
   * with this enrollment token. To enroll a device using NFC, the NFC record must contain a
   * serialized java.util.Properties representation of the properties in the JSON. This is a read-
   * only field generated by the server.
   * @return value or {@code null} for none
   */
  public java.lang.String getQrCode() {
    return qrCode;
  }

  /**
   * A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device
   * with this enrollment token. To enroll a device using NFC, the NFC record must contain a
   * serialized java.util.Properties representation of the properties in the JSON. This is a read-
   * only field generated by the server.
   * @param qrCode qrCode or {@code null} for none
   */
  public SigninDetail setQrCode(java.lang.String qrCode) {
    this.qrCode = qrCode;
    return this;
  }

  /**
   * An enterprise wide enrollment token used to trigger custom sign-in flow. This is a read-only
   * field generated by the server.
   * @return value or {@code null} for none
   */
  public java.lang.String getSigninEnrollmentToken() {
    return signinEnrollmentToken;
  }

  /**
   * An enterprise wide enrollment token used to trigger custom sign-in flow. This is a read-only
   * field generated by the server.
   * @param signinEnrollmentToken signinEnrollmentToken or {@code null} for none
   */
  public SigninDetail setSigninEnrollmentToken(java.lang.String signinEnrollmentToken) {
    this.signinEnrollmentToken = signinEnrollmentToken;
    return this;
  }

  /**
   * Sign-in URL for authentication when device is provisioned with a sign-in enrollment token. The
   * sign-in endpoint should finish authentication flow with a URL in the form of
   * https://enterprise.google.com/android/enroll?et= for a successful login, or
   * https://enterprise.google.com/android/enroll/invalid for a failed login.
   * @return value or {@code null} for none
   */
  public java.lang.String getSigninUrl() {
    return signinUrl;
  }

  /**
   * Sign-in URL for authentication when device is provisioned with a sign-in enrollment token. The
   * sign-in endpoint should finish authentication flow with a URL in the form of
   * https://enterprise.google.com/android/enroll?et= for a successful login, or
   * https://enterprise.google.com/android/enroll/invalid for a failed login.
   * @param signinUrl signinUrl or {@code null} for none
   */
  public SigninDetail setSigninUrl(java.lang.String signinUrl) {
    this.signinUrl = signinUrl;
    return this;
  }

  /**
   * An EMM-specified tag to distinguish between instances of SigninDetail.
   * @return value or {@code null} for none
   */
  public java.lang.String getTokenTag() {
    return tokenTag;
  }

  /**
   * An EMM-specified tag to distinguish between instances of SigninDetail.
   * @param tokenTag tokenTag or {@code null} for none
   */
  public SigninDetail setTokenTag(java.lang.String tokenTag) {
    this.tokenTag = tokenTag;
    return this;
  }

  @Override
  public SigninDetail set(String fieldName, Object value) {
    return (SigninDetail) super.set(fieldName, value);
  }

  @Override
  public SigninDetail clone() {
    return (SigninDetail) super.clone();
  }

}
